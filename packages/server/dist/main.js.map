{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////home/runner/work/office-hours/office-hours/node_modules/@sentry/webpack-plugin/src/sentry-webpack.module.js","webpack:///./src/main.ts","webpack:///(webpack)/buildin/module.js","webpack:///./src/bootstrap.ts","webpack:///../common/index.ts","webpack:///external \"class-transformer\"","webpack:///external \"class-validator\"","webpack:///external \"reflect-metadata\"","webpack:///external \"@nestjs/common\"","webpack:///external \"@nestjs/core\"","webpack:///external \"@sentry/integrations\"","webpack:///external \"@sentry/node\"","webpack:///external \"@sentry/tracing\"","webpack:///external \"cookie-parser\"","webpack:///external \"morgan\"","webpack:///./src/app.module.ts","webpack:///external \"@nestjs/config\"","webpack:///external \"@nestjs/schedule\"","webpack:///external \"@nestjs/typeorm\"","webpack:///./src/insights/insights.module.ts","webpack:///./src/insights/insights.command.ts","webpack:///external \"nestjs-command\"","webpack:///external \"typeorm\"","webpack:///./src/insights/insights.service.ts","webpack:///./src/insights/insight-objects.ts","webpack:///./src/profile/user-course.entity.ts","webpack:///./src/course/course.entity.ts","webpack:///./src/alerts/alerts.entity.ts","webpack:///./src/profile/user.entity.ts","webpack:///./src/notification/desktop-notif.entity.ts","webpack:///./src/notification/phone-notif.entity.ts","webpack:///./src/queue/queue.entity.ts","webpack:///./src/question/question-group.entity.ts","webpack:///./src/question/question.entity.ts","webpack:///./src/question/question-fsm.ts","webpack:///./src/course/office-hour.entity.ts","webpack:///./src/profile/event-model.entity.ts","webpack:///./src/semester/semester.entity.ts","webpack:///./src/insights/insights.controller.ts","webpack:///./src/guards/jwt-auth.guard.ts","webpack:///external \"@nestjs/passport\"","webpack:///./src/decorators/user.decorator.ts","webpack:///./src/decorators/roles.decorator.ts","webpack:///./src/decorators/course-role.decorator.ts","webpack:///./src/alerts/alerts.module.ts","webpack:///./src/alerts/alerts.controller.ts","webpack:///external \"lodash\"","webpack:///./src/alerts/alerts.service.ts","webpack:///./src/backfill/backfill.module.ts","webpack:///./src/notification/notification.module.ts","webpack:///./src/notification/desktop-notif-subscriber.ts","webpack:///./src/notification/notification.service.ts","webpack:///external \"web-push\"","webpack:///./src/notification/twilio/twilio.service.ts","webpack:///external \"twilio\"","webpack:///./src/notification/notification.controller.ts","webpack:///./src/backfill/backfill-course-timezones.ts","webpack:///./src/backfill/backfill-husky-emails-to-northeastern.ts","webpack:///./src/backfill/backfill-phone-notifs.command.ts","webpack:///./src/backfill/backfill-question-groupable.ts","webpack:///./src/backfill/backfill-user-insights.command.ts","webpack:///./src/backfill/make-empty-photourl-null.command.ts","webpack:///external \"nestjs-redis\"","webpack:///./src/release-notes/release-notes.module.ts","webpack:///./src/release-notes/release-notes.controller.ts","webpack:///./ormconfig.ts","webpack:///external \"dotenv\"","webpack:///./src/admin/admin-user.entity.ts","webpack:///external \"bcrypt\"","webpack:///./src/login/course-section-mapping.entity.ts","webpack:///./src/admin/admin.module.ts","webpack:///external \"nestjs-admin\"","webpack:///./src/admin/credentialValidator.ts","webpack:///./src/admin/admin-entities.ts","webpack:///./src/admin/admin.command.ts","webpack:///external \"readline-sync\"","webpack:///external \"express-session\"","webpack:///external \"connect-redis\"","webpack:///external \"redis\"","webpack:///./src/course/course.module.ts","webpack:///./src/queue/queue.module.ts","webpack:///./src/queue/queue.controller.ts","webpack:///./src/queue/queue-clean/queue-clean.service.ts","webpack:///external \"async\"","webpack:///external \"moment\"","webpack:///./src/decorators/queue-role.decorator.ts","webpack:///./src/guards/queue-role.guard.ts","webpack:///./src/guards/role.guard.ts","webpack:///./src/queue/queue-sse.service.ts","webpack:///./src/sse/sse.service.ts","webpack:///./src/queue/queue.service.ts","webpack:///./src/sse/sse.module.ts","webpack:///./src/queue/queue.subscriber.ts","webpack:///./src/course/course.controller.ts","webpack:///./src/guards/course-roles.guard.ts","webpack:///./src/course/course.service.ts","webpack:///./src/course/heatmap.service.ts","webpack:///./src/course/ical.service.ts","webpack:///external \"moment-timezone\"","webpack:///external \"node-ical\"","webpack:///external \"rrule\"","webpack:///external \"windows-iana/dist\"","webpack:///external \"redlock\"","webpack:///./src/course/ical.command.ts","webpack:///./src/healthcheck/healthcheck.module.ts","webpack:///./src/healthcheck/healthcheck.controller.ts","webpack:///external \"@nestjs/common/decorators\"","webpack:///./src/login/login.module.ts","webpack:///./src/login/login.controller.ts","webpack:///external \"@nestjs/jwt\"","webpack:///external \"http-signature\"","webpack:///./src/guards/non-production.guard.ts","webpack:///./src/login/login-course.service.ts","webpack:///./src/login/jwt.strategy.ts","webpack:///external \"passport-jwt\"","webpack:///./src/profile/profile.module.ts","webpack:///./src/profile/profile.controller.ts","webpack:///external \"@nestjs/platform-express\"","webpack:///external \"check-disk-space\"","webpack:///external \"fs\"","webpack:///external \"multer\"","webpack:///external \"path\"","webpack:///external \"sharp\"","webpack:///./src/question/question.module.ts","webpack:///./src/question/question.controller.ts","webpack:///./src/guards/question-role.guard.ts","webpack:///./src/question/question.service.ts","webpack:///./src/question/question.subscriber.ts","webpack:///./src/seed/seed.module.ts","webpack:///./src/seed/seed.controller.ts","webpack:///./test/util/factories.ts","webpack:///external \"typeorm-factory\"","webpack:///./src/seed/seed.service.ts","webpack:///./src/semester/semester.module.ts","webpack:///./src/semester/semester.controller.ts","webpack:///./src/stripUndefined.pipe.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {}).SENTRY_RELEASE={id:\"d6435da929c901d86b0f41785f5b82be4fa2a70d\"};","import { bootstrap } from './bootstrap';\n\ndeclare const module: any;\n\nbootstrap(module.hot);\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import { getEnv, isProd } from '@koh/common';\nimport { INestApplication, ValidationPipe } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { RewriteFrames } from '@sentry/integrations';\nimport * as Sentry from '@sentry/node';\nimport * as Tracing from '@sentry/tracing';\nimport * as cookieParser from 'cookie-parser';\nimport * as morgan from 'morgan';\nimport { AppModule } from './app.module';\nimport { StripUndefinedPipe } from './stripUndefined.pipe';\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport async function bootstrap(hot: any): Promise<void> {\n  const app = await NestFactory.create(AppModule, {\n    logger: ['error', 'warn', 'log', 'debug', 'verbose'],\n  });\n  if (process.env.NODE_ENV === 'production') {\n    setupAPM(app);\n  }\n  app.enableShutdownHooks(); // So we can clean up SSE.\n  addGlobalsToApp(app);\n  app.setGlobalPrefix('api/v1');\n\n  if (isProd()) {\n    console.log(`Running production at ${process.env.DOMAIN}.`);\n  } else {\n    console.log(\n      `Running non-production at ${process.env.DOMAIN}. THIS MSG SHOULD NOT APPEAR ON PROD VM`,\n    );\n  }\n\n  addGlobalsToApp(app);\n  app.setGlobalPrefix('api/v1');\n  app.use(morgan('dev'));\n  await app.listen(3002);\n\n  if (hot) {\n    hot.accept();\n    hot.dispose(() => app.close());\n  }\n}\n\nfunction setupAPM(app: INestApplication): void {\n  Sentry.init({\n    dsn: process.env.SENTRY_APM_DSN,\n    tracesSampleRate: 0.2,\n    integrations: [\n      // enable HTTP calls tracing\n      new Sentry.Integrations.Http({ tracing: true }),\n      new Tracing.Integrations.Postgres(),\n      new Tracing.Integrations.Express({\n        app: app.getHttpAdapter().getInstance(),\n      }),\n      new RewriteFrames(),\n    ],\n    // Service Version is the git hash, added by Webpack at build time.\n    release: process.env.SERVICE_VERSION,\n    environment: getEnv(),\n  });\n  app.use(Sentry.Handlers.requestHandler());\n  app.use(Sentry.Handlers.tracingHandler());\n}\n\n// Global settings that should be true in prod and in integration tests\nexport function addGlobalsToApp(app: INestApplication): void {\n  app.useGlobalPipes(\n    new ValidationPipe({\n      whitelist: true,\n      forbidNonWhitelisted: true,\n      transform: true,\n    }),\n  );\n  app.useGlobalPipes(new StripUndefinedPipe());\n  app.use(cookieParser());\n}\n","import { Type } from \"class-transformer\";\nimport {\n  IsArray,\n  IsBoolean,\n  IsDate,\n  IsDefined,\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsObject,\n  IsOptional,\n  IsString,\n  ValidateIf,\n} from \"class-validator\";\nimport \"reflect-metadata\";\n\nexport const PROD_URL = \"https://officehours.khoury.northeastern.edu\";\nexport const STAGING_URL = \"https://staging.khouryofficehours.com\";\n// Get domain. works on node and browser\nconst domain = (): string | false =>\n  process.env.DOMAIN ||\n  (typeof window !== \"undefined\" && window?.location?.origin);\nexport const getEnv = (): \"production\" | \"staging\" | \"dev\" => {\n  switch (domain()) {\n    case PROD_URL:\n      return \"production\";\n    case STAGING_URL:\n      return \"staging\";\n    default:\n      return \"dev\";\n  }\n};\nexport const isProd = (): boolean => domain() === PROD_URL;\n\n// TODO: Clean this up, move it somwhere else, use moment???\n// a - b, in minutes\nexport function timeDiffInMins(a: Date, b: Date): number {\n  return (a.getTime() - b.getTime()) / (1000 * 60);\n}\n\n/////////////////////////\n// API Base Data Types //\n/////////////////////////\n\n// NOTE: These are not the DB data types. They are only used for the api\n\n/**\n * Represents a user.\n * @param id - The unique id of the user in our db.\n * @param email - The email string of the user if they provide it (nullable)\n * @param name - The full name of this user: First Last.\n * @param photoURL - The URL string of this user photo. This is pulled from the admin site\n * @param courses - The list of courses that the user is accociated with (as either a 'student', 'ta' or 'professor')\n * @param desktopNotifs - list of endpoints so that frontend can figure out if device is enabled\n */\nexport class User {\n  id!: number;\n  email!: string;\n  firstName?: string;\n  lastName?: string;\n  name!: string;\n  photoURL!: string;\n  courses!: UserCourse[];\n  desktopNotifsEnabled!: boolean;\n  @Type(() => DesktopNotifPartial)\n  desktopNotifs!: DesktopNotifPartial[];\n  phoneNotifsEnabled!: boolean;\n  phoneNumber!: string;\n  insights!: string[];\n}\n\nexport class DesktopNotifPartial {\n  id!: number;\n  endpoint!: string;\n  name?: string;\n  @Type(() => Date)\n  createdAt!: Date;\n}\n\n/**\n * Contains the partial user info needed by the frontend when nested in a response\n * @param id - The unique id of the user in our db.\n * @param name - The full name of this user: First Last.\n * @param photoURL - The URL string of this user photo. This is pulled from the admin site\n */\nexport class UserPartial {\n  id!: number;\n  email?: string;\n  name?: string;\n  photoURL?: string;\n}\n\n/**\n * Represents a partial course data needed on the front end when nested in a response.\n * @param id - The id number of this Course.\n * @param name - The subject and course number of this course. Ex: \"CS 2500\"\n */\nexport type CoursePartial = {\n  id: number;\n  name: string;\n};\n\n/**\n * Represents a course that a user is accociated with and their role in that course\n * @param course - The course the user accociated with.\n * @param role - The user's role in the course.\n */\nexport type UserCourse = {\n  course: CoursePartial;\n  role: Role;\n};\n\n/**\n * Represents one of three possible user roles in a course.\n */\nexport enum Role {\n  STUDENT = \"student\",\n  TA = \"ta\",\n  PROFESSOR = \"professor\",\n}\n\nclass OfficeHourPartial {\n  id!: number;\n  title!: string;\n\n  @Type(() => Date)\n  startTime!: Date;\n\n  @Type(() => Date)\n  endTime!: Date;\n}\n\n/**\n * A Queue that students can join with thier tickets.\n * @param id - The unique id number for a Queue.\n * @param course - The course that this office hours queue is for.\n * @param room - The full name of the building + room # that the current office hours queue is in.\n * @param staffList - The list of TA user's that are currently helping at office hours.\n * @param questions - The list of the students questions assocaited with the queue.\n * @param startTime - The scheduled start time of this queue based on the parsed ical.\n * @param endTime - The scheduled end time of this queue.\n */\nexport interface Queue {\n  id: number;\n  course: CoursePartial;\n  room: string;\n  staffList: UserPartial[];\n  questions: Question[];\n  startTime?: Date;\n  endTime?: Date;\n  allowQuestions: boolean;\n}\n\n/**\n * A Queue partial to be shown on the today page.\n * @param id - The unique id number for a Queue.\n * @param room - The full name of the building + room # that the current office hours queue is in.\n * @param staffList - The list of TA user's that are currently helping at office hours.\n * @param startTime - The scheduled start time of this queue based on the parsed ical.\n * @param endTime - The scheduled end time of this queue.\n */\nexport class QueuePartial {\n  id!: number;\n  room!: string;\n\n  @Type(() => UserPartial)\n  staffList!: UserPartial[];\n\n  queueSize!: number;\n  notes?: string;\n  isOpen!: boolean;\n\n  @Type(() => Date)\n  startTime?: Date;\n\n  @Type(() => Date)\n  endTime?: Date;\n\n  allowQuestions!: boolean;\n\n  isProfessorQueue!: boolean;\n}\n\n// Represents a list of office hours wait times of each hour of the week.\n// The first element of the array is the wait time for the first hour of Sunday, UTC.\n//   Users of the heatmap should rotate it according to their timezone.\n// INVARIANT: Must have 24*7 elements\n//\n// Wait time = -1 represents no office hours data at that time.\nexport type Heatmap = Array<number>;\n\n/**\n * A Question is created when a student wants help from a TA.\n * @param id - The unique id number for a student question.\n * @param creator - The Student that has created the question.\n * @param text - The text descritipn of what he/she needs help with.\n * @param createdAt - The date string for the time that the Ticket was created. Ex: \"2020-09-12T12:00:00-04:00\"\n * @param helpedAt - The date string for the time that the TA began helping the Student.\n * @param closedAt - The date string for the time that the TA finished helping the Student.\n * @param questionType - The question type helps distinguish question for TA's and data insights.\n * @param status - The current status of the question in the queue.\n * @param position - The current position of this question in the queue.\n * @param location - The location of the particular student, to help TA's find them\n * @param isOnline - Wether or not the question will helped online or in-person\n */\nexport class Question {\n  id!: number;\n\n  @Type(() => UserPartial)\n  creator!: UserPartial;\n\n  text?: string;\n\n  @Type(() => UserPartial)\n  taHelped?: UserPartial;\n\n  @Type(() => Date)\n  createdAt!: Date;\n\n  @Type(() => Date)\n  helpedAt?: Date;\n\n  @Type(() => Date)\n  closedAt?: Date;\n  questionType?: QuestionType;\n  groupable!: boolean;\n  status!: QuestionStatus;\n  location?: string;\n  isOnline?: boolean;\n}\n\n// Question Types\nexport enum QuestionType {\n  Concept = \"Concept\",\n  Clarification = \"Clarification\",\n  Testing = \"Testing\",\n  Bug = \"Bug\",\n  Setup = \"Setup\",\n  Other = \"Other\",\n}\n\nexport enum OpenQuestionStatus {\n  Drafting = \"Drafting\",\n  Queued = \"Queued\",\n  Helping = \"Helping\",\n  PriorityQueued = \"PriorityQueued\",\n}\n\n/**\n * Limbo statuses are awaiting some confirmation from the student\n */\nexport enum LimboQuestionStatus {\n  CantFind = \"CantFind\", // represents when a student can't be found by a TA\n  ReQueueing = \"ReQueueing\", // represents when a TA wants to get back to a student later and give them the option to be put into the priority queue\n  TADeleted = \"TADeleted\", // When a TA deletes a question for a multitude of reasons\n}\n\nexport enum ClosedQuestionStatus {\n  Resolved = \"Resolved\",\n  DeletedDraft = \"DeletedDraft\",\n  ConfirmedDeleted = \"ConfirmedDeleted\",\n  Stale = \"Stale\",\n}\n\nexport const StatusInQueue = [\n  OpenQuestionStatus.Drafting,\n  OpenQuestionStatus.Queued,\n];\n\nexport const StatusInPriorityQueue = [OpenQuestionStatus.PriorityQueued];\n\nexport const StatusSentToCreator = [\n  ...StatusInPriorityQueue,\n  ...StatusInQueue,\n  OpenQuestionStatus.Helping,\n  LimboQuestionStatus.ReQueueing,\n  LimboQuestionStatus.CantFind,\n  LimboQuestionStatus.TADeleted,\n];\n\n// Ticket Status - Represents a given status of as student's ticket\nexport type QuestionStatus = keyof typeof QuestionStatusKeys;\n// an Enum-like constant that contains all the statuses for convenience.\nexport const QuestionStatusKeys = {\n  ...OpenQuestionStatus,\n  ...ClosedQuestionStatus,\n  ...LimboQuestionStatus,\n};\n\nexport class QuestionGroup {\n  @IsInt()\n  id!: number;\n\n  @Type(() => Question)\n  questions!: Array<Question>;\n\n  @Type(() => UserPartial)\n  creator!: UserPartial;\n\n  //Might want to add a list of students in group so they can be added without a question\n}\n\n// /**\n//  * A Semester object, representing a schedule semester term for the purposes of a course.\n//  * @param season - The season of this semester.\n//  * @param year - The year of this semester.\n//  */\n// interface Semester {\n//   season: Season;\n//   year: number;\n// }\n\n/**\n * Represents one of the seasons in which a course can take place.\n */\nexport type Season =\n  | \"Fall\"\n  | \"Spring\"\n  | \"Summer_1\"\n  | \"Summer_2\"\n  | \"Summer_Full\";\n\nexport type DesktopNotifBody = {\n  endpoint: string;\n  expirationTime?: number;\n  keys: {\n    p256dh: string;\n    auth: string;\n  };\n  name?: string;\n};\n\nexport type PhoneNotifBody = {\n  phoneNumber: string;\n};\n\n// =================== API Route Types ===========================\n// On backend, validated with https://docs.nestjs.com/techniques/validation\n// API route Params and Responses\n\n// Office Hours Response Types\nexport class GetProfileResponse extends User {}\n\nexport class KhouryDataParams {\n  @IsString()\n  email!: string;\n\n  @IsString()\n  first_name!: string;\n\n  @IsString()\n  last_name!: string;\n\n  @IsInt()\n  campus!: string;\n\n  @IsOptional()\n  @IsString()\n  photo_url!: string;\n\n  @IsOptional()\n  @IsDefined() // TODO: use ValidateNested instead, for some reason it's crunked\n  courses!: KhouryStudentCourse[];\n\n  @IsOptional()\n  @IsDefined() // TODO: use ValidateNested instead, for some reason it's crunked\n  ta_courses!: KhouryTACourse[];\n}\n\nexport class KhouryStudentCourse {\n  @IsInt()\n  crn!: number;\n\n  @IsString()\n  course!: string;\n\n  @IsBoolean()\n  accelerated!: boolean;\n\n  @IsInt()\n  section!: number;\n\n  @IsString()\n  semester!: string;\n\n  @IsString()\n  title!: string;\n\n  @IsString()\n  @IsOptional()\n  campus!: string;\n}\n\nexport class KhouryTACourse {\n  @IsString()\n  course!: string;\n\n  @IsString()\n  semester!: string;\n\n  @IsInt()\n  @IsOptional()\n  instructor!: number;\n}\n\nexport interface KhouryRedirectResponse {\n  redirect: string;\n}\n\nexport class UpdateProfileParams {\n  @IsBoolean()\n  @IsOptional()\n  desktopNotifsEnabled?: boolean;\n\n  @IsBoolean()\n  @IsOptional()\n  phoneNotifsEnabled?: boolean;\n\n  @ValidateIf((o) => o.phoneNotifsEnabled)\n  @IsString()\n  @IsNotEmpty()\n  phoneNumber?: string;\n\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n}\n\nexport class GetCourseResponse {\n  id!: number;\n  name!: string;\n\n  @Type(() => OfficeHourPartial)\n  officeHours!: Array<OfficeHourPartial>;\n\n  @Type(() => QueuePartial)\n  queues!: QueuePartial[];\n\n  heatmap!: Heatmap | false;\n\n  selfEnroll!: boolean;\n}\n\nexport class GetSelfEnrollResponse {\n  courses!: CoursePartial[];\n}\n\nexport class GetCourseOverridesRow {\n  id!: number;\n  role!: string;\n  name!: string;\n  email!: string;\n}\n\nexport class GetCourseOverridesResponse {\n  @Type(() => GetCourseOverridesRow)\n  data!: GetCourseOverridesRow[];\n}\n\nexport class UpdateCourseOverrideBody {\n  @IsString()\n  email!: string;\n\n  @IsString()\n  role!: Role;\n}\n\nexport class UpdateCourseOverrideResponse extends GetCourseOverridesRow {}\n\nexport class GetQueueResponse extends QueuePartial {}\n\nexport class GetCourseQueuesResponse extends Array<QueuePartial> {}\n\nexport class ListQuestionsResponse {\n  @Type(() => Question)\n  yourQuestion?: Question;\n\n  @Type(() => Question)\n  questionsGettingHelp!: Array<Question>;\n\n  @Type(() => Question)\n  queue!: Array<Question>;\n\n  @Type(() => Question)\n  priorityQueue!: Array<Question>;\n\n  @Type(() => QuestionGroup)\n  groups!: Array<QuestionGroup>;\n}\n\nexport class GetQuestionResponse extends Question {}\n\nexport class GetStudentQuestionResponse extends Question {\n  @IsInt()\n  queueId!: number;\n}\n\nexport class CreateQuestionParams {\n  @IsString()\n  text!: string;\n\n  @IsEnum(QuestionType)\n  @IsOptional()\n  questionType?: QuestionType;\n\n  @IsBoolean()\n  groupable!: boolean;\n\n  @IsInt()\n  queueId!: number;\n\n  @IsBoolean()\n  @IsOptional()\n  isOnline?: boolean;\n\n  @IsString()\n  @IsOptional()\n  location?: string;\n\n  @IsBoolean()\n  force!: boolean;\n}\nexport class CreateQuestionResponse extends Question {}\n\nexport class UpdateQuestionParams {\n  @IsString()\n  @IsOptional()\n  text?: string;\n\n  @IsEnum(QuestionType)\n  @IsOptional()\n  questionType?: QuestionType;\n\n  @IsBoolean()\n  @IsOptional()\n  groupable?: boolean;\n\n  @IsInt()\n  @IsOptional()\n  queueId?: number;\n\n  @IsEnum(QuestionStatusKeys)\n  @IsOptional()\n  status?: QuestionStatus;\n\n  @IsBoolean()\n  @IsOptional()\n  isOnline?: boolean;\n\n  @IsString()\n  @IsOptional()\n  location?: string;\n}\nexport class UpdateQuestionResponse extends Question {}\n\nexport class GroupQuestionsParams {\n  @IsArray()\n  @Type(() => Number)\n  questionIds!: number[];\n\n  @IsInt()\n  queueId!: number;\n}\n\nexport class ResolveGroupParams {\n  @IsInt()\n  queueId!: number;\n}\n\nexport type TAUpdateStatusResponse = QueuePartial;\nexport type QueueNotePayloadType = {\n  notes: string;\n};\n\nexport class TACheckoutResponse {\n  // The ID of the queue we checked out of\n  queueId!: number;\n  canClearQueue!: boolean;\n\n  @Type(() => Date)\n  nextOfficeHourTime?: Date;\n}\n\nexport class UpdateQueueParams {\n  @IsString()\n  @IsOptional()\n  notes?: string;\n\n  @IsBoolean()\n  allowQuestions?: boolean;\n}\n\nexport class TACheckinTimesResponse {\n  @Type(() => TACheckinPair)\n  taCheckinTimes!: TACheckinPair[];\n}\n\nexport class TACheckinPair {\n  @IsString()\n  name!: string;\n\n  @IsDate()\n  @Type(() => Date)\n  checkinTime!: Date;\n\n  @IsDate()\n  @Type(() => Date)\n  checkoutTime?: Date;\n\n  @IsBoolean()\n  forced!: boolean;\n\n  @IsBoolean()\n  inProgress!: boolean;\n\n  @IsNumber()\n  numHelped!: number;\n}\n\nexport enum AlertType {\n  REPHRASE_QUESTION = \"rephraseQuestion\",\n}\n\nexport class AlertPayload {}\n\nexport class Alert {\n  @IsEnum(AlertType)\n  alertType!: AlertType;\n\n  @IsDate()\n  sent!: Date;\n\n  @Type(() => AlertPayload)\n  payload!: AlertPayload;\n\n  @IsInt()\n  id!: number;\n}\n\nexport class RephraseQuestionPayload extends AlertPayload {\n  @IsInt()\n  questionId!: number;\n\n  @IsInt()\n  queueId!: number;\n\n  @IsInt()\n  courseId!: number;\n}\n\nexport class CreateAlertParams {\n  @IsEnum(AlertType)\n  alertType!: AlertType;\n\n  @IsInt()\n  courseId!: number;\n\n  @IsObject()\n  payload!: AlertPayload;\n\n  @IsInt()\n  targetUserId!: number;\n}\n\nexport class CreateAlertResponse extends Alert {}\n\nexport class GetAlertsResponse {\n  @Type(() => Alert)\n  alerts!: Alert[];\n}\n\nexport class SubmitCourseParams {\n  @IsString()\n  coordinator_email!: string;\n\n  @IsString()\n  name!: string;\n\n  @IsArray()\n  sections!: number[];\n\n  @IsString()\n  semester!: string;\n\n  @IsString()\n  timezone!: string;\n\n  @IsString()\n  icalURL!: string;\n\n  @IsString()\n  password!: string;\n}\n\nexport class SemesterPartial {\n  id!: number;\n  season!: string;\n  year!: number;\n}\n\nexport class SSEQueueResponse {\n  queue?: GetQueueResponse;\n  questions?: ListQuestionsResponse;\n}\n\nexport interface TwilioBody {\n  ToCountry: string;\n  ToState: string;\n  SmsMessageSid: string;\n  NumMedia: string;\n  ToCity: string;\n  FromZip: string;\n  SmsSid: string;\n  FromState: string;\n  SmsStatus: string;\n  FromCity: string;\n  Body: string;\n  FromCountry: string;\n  To: string;\n  ToZip: string;\n  NumSegments: string;\n  MessageSid: string;\n  AccountSid: string;\n  From: string;\n  ApiVersion: string;\n}\n\nexport interface GetReleaseNotesResponse {\n  releaseNotes: unknown;\n  lastUpdatedUnixTime: number;\n}\n\nexport type GetInsightOutputResponse = PossibleOutputTypes;\n\nexport type ListInsightsResponse = Record<string, InsightDisplayInfo>;\n\nexport type InsightDisplayInfo = {\n  displayName: string;\n  description: string;\n  component: InsightComponent;\n  size: \"small\" | \"default\";\n};\n\nexport interface InsightObject {\n  displayName: string;\n  description: string;\n  roles: Role[];\n  component: InsightComponent;\n  size: \"default\" | \"small\";\n  compute: (insightFilters: any) => Promise<PossibleOutputTypes>;\n}\n\nexport enum InsightComponent {\n  SimpleDisplay = \"SimpleDisplay\",\n  BarChart = \"BarChart\",\n  SimpleTable = \"SimpleTable\",\n}\n\nexport type PossibleOutputTypes =\n  | SimpleDisplayOutputType\n  | BarChartOutputType\n  | SimpleTableOutputType;\n\nexport type SimpleDisplayOutputType = number | string;\n\nexport type BarChartOutputType = {\n  data: StringMap<number>[];\n  xField: string;\n  yField: string;\n  seriesField: string;\n  xAxisName?: string;\n  yAxisName?: string;\n};\n\nexport type SimpleTableOutputType = {\n  dataSource: StringMap<string>[];\n  columns: StringMap<string>[];\n};\n\nexport type StringMap<T> = {\n  [key: string]: T;\n};\n\nexport type DateRangeType = {\n  start: string;\n  end: string;\n};\n\nexport const ERROR_MESSAGES = {\n  courseController: {\n    checkIn: {\n      cannotCreateNewQueueIfNotProfessor:\n        \"You can't create a new queue if you're not a professor\",\n      cannotCheckIntoMultipleQueues:\n        \"Cannot check into multiple queues at the same time\",\n    },\n    courseNotFound: \"The course was not found\",\n    courseOfficeHourError: \"Unable to find a course's office hours\",\n    courseHeatMapError: \"Unable to get course's cached heatmap\",\n    courseModelError: \"Course Model not found\",\n    noUserFound: \"No user found with given email\",\n    noSemesterFound: \"No semester exists for the submitted course\",\n    updatedQueueError: \"Error updating a course queue\",\n    queuesNotFound: \"Queues not found\",\n    queueNotFound: \"Queue not found\",\n    saveQueueError: \"Unable to save queue\",\n    clearQueueError: \"Unable to determine if queue can be cleared\",\n    createEventError: \"An error occurred while creating an event\",\n    icalCalendarUpdate: \"Unable to update calendar\",\n    checkInTime: \"Unable to get TA check in times\",\n    removeCourse: \"Error occurred while trying to remove a course\",\n    createCourse: \"Error occurred while trying to create a course\",\n    updateCourse: \"Error occurred while trying to update a course\",\n    createCourseMappings: \"Unable to create a course mappings\",\n    invalidApplyURL:\n      \"You are unauthorized to submit an application. Please email help@khouryofficehours.com for the correct URL.\",\n  },\n  questionController: {\n    createQuestion: {\n      invalidQueue: \"Posted to an invalid queue\",\n      noNewQuestions: \"Queue not allowing new questions\",\n      closedQueue: \"Queue is closed\",\n      oneQuestionAtATime: \"You can't create more than one question at a time.\",\n    },\n    updateQuestion: {\n      fsmViolation: (\n        role: string,\n        questionStatus: string,\n        bodyStatus: string\n      ): string =>\n        `${role} cannot change status from ${questionStatus} to ${bodyStatus}`,\n      taOnlyEditQuestionStatus: \"TA/Professors can only edit question status\",\n      otherTAHelping: \"Another TA is currently helping with this question\",\n      otherTAResolved: \"Another TA has already resolved this question\",\n      taHelpingOther: \"TA is already helping someone else\",\n      loginUserCantEdit: \"Logged-in user does not have edit access\",\n    },\n    groupQuestions: {\n      notGroupable: \"One or more of the questions is not groupable\",\n    },\n    saveQError: \"Unable to save a question\",\n    notFound: \"Question not found\",\n    unableToNotifyUser: \"Unable to notify user\",\n  },\n  loginController: {\n    receiveDataFromKhoury: \"Invalid request signature\",\n    invalidPayload: \"The decoded JWT payload is invalid\",\n    invalidTempJWTToken: \"Error occurred while signing a JWT token\",\n    addUserFromKhoury:\n      \"Error occurred while translating account from Khoury to Office Hours\",\n  },\n  notificationController: {\n    messageNotFromTwilio: \"Message not from Twilio\",\n  },\n  notificationService: {\n    registerPhone: \"phone number invalid\",\n  },\n  questionRoleGuard: {\n    questionNotFound: \"Question not found\",\n    queueOfQuestionNotFound: \"Cannot find queue of question\",\n    queueDoesNotExist: \"This queue does not exist!\",\n  },\n  queueController: {\n    getQueue: \"An error occurred while trying to retrieve a Queue\",\n    getQuestions: \"Unable to get questions from queue\",\n    saveQueue: \"Unable to save queue\",\n    cleanQueue: \"Unable to clean queue\",\n  },\n  queueRoleGuard: {\n    queueNotFound: \"Queue not found\",\n  },\n  releaseNotesController: {\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    releaseNotesTime: (e: any): string =>\n      \"Error Parsing release notes time: \" + e,\n  },\n  insightsController: {\n    insightUnathorized: \"User is not authorized to view this insight\",\n    insightNameNotFound: \"The insight requested was not found\",\n  },\n  roleGuard: {\n    notLoggedIn: \"Must be logged in\",\n    noCourseIdFound: \"No courseid found\",\n    notInCourse: \"Not In This Course\",\n    mustBeRoleToJoinCourse: (roles: string[]): string =>\n      `You must have one of roles [${roles.join(\", \")}] to access this course`,\n  },\n  profileController: {\n    accountNotAvailable: \"The user account is undefined\",\n    userResponseNotFound: \"The user response was not found\",\n    noDiskSpace:\n      \"There is no disk space left to store an image. Please immediately contact your course staff and let them know. They will contact the Khoury Office Hours team as soon as possible.\",\n  },\n  alertController: {\n    duplicateAlert: \"This alert has already been sent\",\n    notActiveAlert: \"This is not an alert that's open for the current user\",\n  },\n  sseService: {\n    getSubClient: \"Unable to get the redis subscriber client\",\n    getDBClient: \"Unable to get the redis database client\",\n    getPubClient: \"Unable to get publisher client\",\n    moduleDestroy: \"Unable to destroy the redis module\",\n    cleanupConnection: \"Unable to cleanup the connection\",\n    clientIdSubscribe: \"Client ID not found during subscribing to client\",\n    subscribe: \"Unable to subscribe to the client\",\n    unsubscribe: \"Unable to unsubscribe from the client\",\n    removeFromRoom: \"Error removing from redis room\",\n    directConnections: \"Unable to cleanup direct connections\",\n    roomMembers: \"Unable to get room members\",\n    serialize: \"Unable to serialize payload\",\n    publish: \"Publisher client is unable to publish\",\n    clientIdNotFound: \"Client ID not found during subscribing to client\",\n  },\n};\n","module.exports = require(\"class-transformer\");","module.exports = require(\"class-validator\");","module.exports = require(\"reflect-metadata\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@sentry/integrations\");","module.exports = require(\"@sentry/node\");","module.exports = require(\"@sentry/tracing\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"morgan\");","import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { InsightsModule } from 'insights/insights.module';\nimport { AlertsModule } from 'alerts/alerts.module';\nimport { BackfillModule } from 'backfill/backfill.module';\nimport { CommandModule } from 'nestjs-command';\nimport { RedisModule } from 'nestjs-redis';\nimport { ReleaseNotesModule } from 'release-notes/release-notes.module';\nimport * as typeormConfig from '../ormconfig';\nimport { AdminModule } from './admin/admin.module';\nimport { CourseModule } from './course/course.module';\nimport { HealthcheckModule } from './healthcheck/healthcheck.module';\nimport { LoginModule } from './login/login.module';\nimport { NotificationModule } from './notification/notification.module';\nimport { ProfileModule } from './profile/profile.module';\nimport { QuestionModule } from './question/question.module';\nimport { QueueModule } from './queue/queue.module';\nimport { SeedModule } from './seed/seed.module';\nimport { SSEModule } from './sse/sse.module';\nimport { SemesterModule } from 'semester/semester.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(typeormConfig),\n    ScheduleModule.forRoot(),\n    LoginModule,\n    ProfileModule,\n    CourseModule,\n    QueueModule,\n    NotificationModule,\n    QuestionModule,\n    SeedModule,\n    ConfigModule.forRoot({\n      envFilePath: [\n        '.env',\n        ...(process.env.NODE_ENV !== 'production' ? ['.env.development'] : []),\n      ],\n      isGlobal: true,\n    }),\n    AdminModule,\n    CommandModule,\n    SSEModule,\n    BackfillModule,\n    ReleaseNotesModule,\n    InsightsModule,\n    // Only use 'pub' for publishing events, 'sub' for subscribing, and 'db' for writing to key/value store\n    RedisModule.register([{ name: 'pub' }, { name: 'sub' }, { name: 'db' }]),\n    HealthcheckModule,\n    AlertsModule,\n    SemesterModule,\n  ],\n})\nexport class AppModule {}\n","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/schedule\");","module.exports = require(\"@nestjs/typeorm\");","import { Module } from '@nestjs/common';\nimport { InsightsCommand } from './insights.command';\nimport { InsightsService } from './insights.service';\nimport { InsightsController } from './insights.controller';\n\n@Module({\n  controllers: [InsightsController],\n  providers: [InsightsCommand, InsightsService],\n})\nexport class InsightsModule {}\n","import { Command, Positional } from 'nestjs-command';\nimport { Injectable } from '@nestjs/common';\nimport { Connection } from 'typeorm';\nimport { InsightsService } from './insights.service';\nimport { INSIGHTS_MAP } from './insight-objects';\n\n/**\n * Initial Product: Create a system to aggregate certain data within a certain time period for one course\n * or accross all courses\n *\n * Support courseIds and time intervals (no longer than a semester)\n */\n@Injectable()\nexport class InsightsCommand {\n  constructor(\n    private connection: Connection,\n    private insightsService: InsightsService,\n  ) {}\n\n  @Command({\n    command: 'semester_insights:generate <courseId>',\n    describe: 'aggregates semesterly analytics for a course',\n    autoExit: true,\n  })\n  private async generateSemesterInsights(\n    @Positional({\n      name: 'courseId',\n      describe: 'the id of the coure to aggregate data for',\n      type: 'number',\n    })\n    courseId: number,\n  ): Promise<any> {\n    const insights = await this.insightsService.generateAllInsights({\n      insights: [\n        INSIGHTS_MAP.TotalStudents,\n        INSIGHTS_MAP.QuestionTypeBreakdown,\n      ],\n      filters: [\n        {\n          type: 'courseId',\n          conditional: `\"courseId\" = ${courseId}`,\n        },\n      ],\n    });\n    for (const insight of Object.values(insights)) {\n      console.log('Name:   ', insight['displayName']);\n      console.log('Output: ', insight['output']);\n      console.log('-');\n    }\n  }\n}\n","module.exports = require(\"nestjs-command\");","module.exports = require(\"typeorm\");","import { Injectable } from '@nestjs/common';\nimport { Connection } from 'typeorm';\nimport { Filter, INSIGHTS_MAP } from './insight-objects';\nimport {\n  PossibleOutputTypes,\n  InsightObject,\n  ListInsightsResponse,\n} from '@koh/common';\nimport { UserModel } from 'profile/user.entity';\n\ntype ComputeOutputParams = {\n  insight: InsightObject;\n  filters: Filter[];\n};\n\ntype GenerateAllInsightParams = {\n  insights: InsightObject[];\n  filters: Filter[];\n};\n\n@Injectable()\nexport class InsightsService {\n  constructor(private connection: Connection) {}\n\n  // Compute the output data for an insight and add it to the insight response\n  async computeOutput({\n    insight,\n    filters,\n  }: ComputeOutputParams): Promise<PossibleOutputTypes> {\n    const output = await insight.compute(filters);\n    return output;\n  }\n\n  async generateAllInsights({\n    insights,\n    filters,\n  }: GenerateAllInsightParams): Promise<PossibleOutputTypes[]> {\n    return await Promise.all(\n      insights.map(\n        async (insight) => await this.computeOutput({ insight, filters }),\n      ),\n    );\n  }\n\n  convertToInsightsListResponse(insightNames: string[]): ListInsightsResponse {\n    return insightNames.reduce((obj, insightName) => {\n      const { displayName, description, component, size } =\n        INSIGHTS_MAP[insightName];\n      return {\n        ...obj,\n        [insightName]: {\n          displayName,\n          description,\n          component,\n          size,\n        },\n      };\n    }, {});\n  }\n\n  async toggleInsightOn(\n    user: UserModel,\n    insightName: string,\n  ): Promise<string[]> {\n    user.hideInsights = user.hideInsights?.filter(\n      (insight) => insight !== insightName,\n    );\n    await user.save();\n    return;\n  }\n\n  async toggleInsightOff(user: UserModel, insightName: string): Promise<void> {\n    if (user.hideInsights === null) {\n      user.hideInsights = [];\n    }\n    user.hideInsights = [insightName, ...user.hideInsights];\n    await user.save();\n    return;\n  }\n}\n","import {\n  BarChartOutputType,\n  InsightComponent,\n  InsightObject,\n  QuestionType,\n  Role,\n  SimpleDisplayOutputType,\n  SimpleTableOutputType,\n} from '@koh/common';\nimport { UserCourseModel } from '../profile/user-course.entity';\nimport { UserModel } from '../profile/user.entity';\nimport { QuestionModel } from '../question/question.entity';\nimport { createQueryBuilder, SelectQueryBuilder } from 'typeorm';\n\nexport type Filter = {\n  type: string;\n  [x: string]: any;\n};\n\ntype AddFiltersParams = {\n  query: SelectQueryBuilder<any>;\n  modelName: string;\n  allowedFilters: string[];\n  filters: Filter[];\n};\n\nfunction addFilters({\n  query,\n  modelName,\n  allowedFilters,\n  filters,\n}: AddFiltersParams): SelectQueryBuilder<QuestionModel> {\n  for (const filter of filters) {\n    if (allowedFilters.includes(filter.type)) {\n      APPLY_FILTER_MAP[modelName][filter.type]({ query, filter });\n    }\n  }\n  return query;\n}\n\ntype ApplyFilterParams = {\n  query: SelectQueryBuilder<any>;\n  filter: Filter;\n};\n\nconst APPLY_FILTER_MAP = {\n  QuestionModel: {\n    courseId: ({ query, filter }: ApplyFilterParams) => {\n      query\n        .innerJoin('QuestionModel.queue', 'queue')\n        .andWhere('queue.\"courseId\" = :courseId', {\n          courseId: filter.courseId,\n        });\n    },\n    timeframe: ({ query, filter }: ApplyFilterParams) => {\n      query.andWhere('QuestionModel.createdAt BETWEEN :start AND :end', {\n        start: filter.start,\n        end: filter.end,\n      });\n    },\n  },\n  UserCourseModel: {\n    courseId: ({ query, filter }: ApplyFilterParams) => {\n      query.andWhere('\"courseId\" = :courseId', {\n        courseId: filter.courseId,\n      });\n    },\n  },\n};\n\nexport const TotalStudents: InsightObject = {\n  displayName: 'Total Students',\n  description:\n    'What is the total number of students that are enrolled in the course?',\n  roles: [Role.PROFESSOR],\n  component: InsightComponent.SimpleDisplay,\n  size: 'small' as const,\n  async compute(filters): Promise<SimpleDisplayOutputType> {\n    return await addFilters({\n      query: createQueryBuilder(UserCourseModel).where(\"role = 'student'\"),\n      modelName: UserCourseModel.name,\n      allowedFilters: ['courseId', 'role'],\n      filters,\n    }).getCount();\n  },\n};\n\nexport const TotalQuestionsAsked: InsightObject = {\n  displayName: 'Total Questions',\n  description: 'How many questions have been asked in total?',\n  roles: [Role.PROFESSOR],\n  component: InsightComponent.SimpleDisplay,\n  size: 'small' as const,\n  async compute(filters): Promise<SimpleDisplayOutputType> {\n    return await addFilters({\n      query: createQueryBuilder(QuestionModel).select(),\n      modelName: QuestionModel.name,\n      allowedFilters: ['courseId', 'timeframe'],\n      filters,\n    }).getCount();\n  },\n};\n\nexport const MostActiveStudents: InsightObject = {\n  displayName: 'Most Active Students',\n  description:\n    'Who are the students who have asked the most questions in Office Hours? (limit 75)',\n  roles: [Role.PROFESSOR],\n  component: InsightComponent.SimpleTable,\n  size: 'default' as const,\n  async compute(filters): Promise<SimpleTableOutputType> {\n    const dataSource = await addFilters({\n      query: createQueryBuilder()\n        .select('\"QuestionModel\".\"creatorId\"', 'studentId')\n        .addSelect(\n          'concat(\"UserModel\".\"firstName\", \\' \\',\"UserModel\".\"lastName\")',\n          'name',\n        )\n        .addSelect('\"UserModel\".\"email\"', 'email')\n        .addSelect('COUNT(*)', 'questionsAsked')\n        .from(QuestionModel, 'QuestionModel')\n        .where('\"QuestionModel\".\"questionType\" IS NOT NULL'),\n      modelName: QuestionModel.name,\n      allowedFilters: ['courseId', 'timeframe'],\n      filters,\n    })\n      .innerJoin(\n        UserModel,\n        'UserModel',\n        '\"UserModel\".id = \"QuestionModel\".\"creatorId\"',\n      )\n      .groupBy('\"QuestionModel\".\"creatorId\"')\n      .addGroupBy('name')\n      .addGroupBy('\"UserModel\".email')\n      .orderBy('4', 'DESC')\n      .limit(75)\n      .getRawMany();\n\n    return {\n      columns: [\n        {\n          title: 'Name',\n          dataIndex: 'name',\n          key: 'name',\n        },\n        {\n          title: 'Questions Asked',\n          dataIndex: 'questionsAsked',\n          key: 'questionsAsked',\n        },\n      ],\n      dataSource,\n    };\n  },\n};\n\nexport const QuestionTypeBreakdown: InsightObject = {\n  displayName: 'Question Type Breakdown',\n  description:\n    'What is the distribution of student-selected question-types on the question form?',\n  roles: [Role.PROFESSOR],\n  component: InsightComponent.BarChart,\n  size: 'default' as const,\n  async compute(filters): Promise<BarChartOutputType> {\n    const info = await addFilters({\n      query: createQueryBuilder(QuestionModel)\n        .select('\"QuestionModel\".\"questionType\"', 'questionType')\n        .addSelect('COUNT(*)', 'totalQuestions')\n        .andWhere('\"QuestionModel\".\"questionType\" IS NOT NULL'),\n      modelName: QuestionModel.name,\n      allowedFilters: ['courseId', 'timeframe'],\n      filters,\n    })\n      .groupBy('\"QuestionModel\".\"questionType\"')\n      .having('\"QuestionModel\".\"questionType\" IS NOT NULL')\n      .getRawMany();\n\n    const typesFromInfo = info.map((obj) => obj['questionType']);\n\n    info.forEach((pair) => {\n      pair['totalQuestions'] = Number.parseInt(pair['totalQuestions']);\n    });\n\n    Object.values(QuestionType).forEach((v) => {\n      if (!typesFromInfo.includes(v)) {\n        info.push({ questionType: v, totalQuestions: 0 });\n      }\n    });\n\n    const insightObj = {\n      data: info.sort((a, b) =>\n        a.questionType === b.questionType\n          ? 0\n          : a.questionType > b.questionType\n          ? 1\n          : -1,\n      ),\n      xField: 'totalQuestions',\n      yField: 'questionType',\n      seriesField: 'questionType',\n      xAxisName: 'totalQuestions',\n      yAxisName: 'questionType',\n    };\n    return insightObj;\n  },\n};\n\nexport const MedianWaitTime: InsightObject = {\n  displayName: 'Median Wait Time',\n  description:\n    'What is the median wait time for a student to get help in the queue?',\n  roles: [Role.PROFESSOR],\n  component: InsightComponent.SimpleDisplay,\n  size: 'small' as const,\n  async compute(filters): Promise<SimpleDisplayOutputType> {\n    const questions = await addFilters({\n      query: createQueryBuilder(QuestionModel)\n        .select()\n        .where('QuestionModel.firstHelpedAt IS NOT NULL'),\n      modelName: QuestionModel.name,\n      allowedFilters: ['courseId', 'timeframe'],\n      filters,\n    }).getMany();\n\n    if (questions.length === 0) {\n      return `0 min`;\n    }\n\n    const waitTimes = questions.map(\n      (question) =>\n        Math.floor(\n          (question.firstHelpedAt.getTime() - question.createdAt.getTime()) /\n            1000,\n        ) / 60,\n    );\n\n    return `${Math.floor(Math.round(median(waitTimes)))} min`;\n  },\n};\n\nexport const MedianHelpingTime: InsightObject = {\n  displayName: 'Median Helping Time',\n  description:\n    'What is the median duration that a TA helps a student on a call?',\n  roles: [Role.PROFESSOR],\n  component: InsightComponent.SimpleDisplay,\n  size: 'small' as const,\n\n  async compute(filters): Promise<SimpleDisplayOutputType> {\n    const questions = await addFilters({\n      query: createQueryBuilder(QuestionModel)\n        .select()\n        .where(\n          'QuestionModel.helpedAt IS NOT NULL AND QuestionModel.closedAt IS NOT NULL',\n        ),\n      modelName: QuestionModel.name,\n      allowedFilters: ['courseId', 'timeframe'],\n      filters,\n    }).getMany();\n\n    if (questions.length === 0) {\n      return `0 min`;\n    }\n\n    const helpTimes = questions.map(\n      (question) =>\n        Math.floor(\n          (question.closedAt.getTime() - question.helpedAt.getTime()) / 1000,\n        ) / 60,\n    );\n\n    return `${Math.round(median(helpTimes))} min`;\n  },\n};\n\nconst median = (numbers: number[]) => {\n  const sorted = numbers.slice().sort((a, b) => a - b);\n  const middle = Math.floor(sorted.length / 2);\n\n  if (sorted.length % 2 === 0) {\n    return (sorted[middle - 1] + sorted[middle]) / 2;\n  }\n\n  return sorted[middle];\n};\n\nexport const QuestionToStudentRatio: InsightObject = {\n  displayName: 'Questions per Student',\n  description: 'How many questions were asked per student?',\n  roles: [Role.PROFESSOR],\n  component: InsightComponent.SimpleDisplay,\n  size: 'small' as const,\n  async compute(filters): Promise<SimpleDisplayOutputType> {\n    const totalQuestions = await TotalQuestionsAsked.compute(filters);\n    const totalStudents = await TotalStudents.compute(filters);\n    return totalStudents !== 0\n      ? ((totalQuestions as number) / (totalStudents as number)).toFixed(2)\n      : '0 students';\n  },\n};\n\nexport const INSIGHTS_MAP = {\n  TotalStudents,\n  TotalQuestionsAsked,\n  MedianWaitTime,\n  QuestionTypeBreakdown,\n  MostActiveStudents,\n  QuestionToStudentRatio,\n  MedianHelpingTime,\n};\n","import { Role } from '@koh/common';\nimport {\n  BaseEntity,\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { CourseModel } from '../course/course.entity';\nimport { UserModel } from './user.entity';\n\n@Entity('user_course_model')\nexport class UserCourseModel extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne((type) => UserModel, (user) => user.courses)\n  @JoinColumn({ name: 'userId' })\n  user: UserModel;\n\n  @Column({ nullable: true })\n  userId: number;\n\n  @ManyToOne((type) => CourseModel, (course) => course.userCourses)\n  @JoinColumn({ name: 'courseId' })\n  course: CourseModel;\n\n  @Column({ nullable: true })\n  courseId: number;\n\n  @Column({ type: 'enum', enum: Role, default: Role.STUDENT })\n  role: Role;\n\n  @Column({ default: false })\n  override: boolean;\n\n  // If this expires\n  @Column({ nullable: true, default: false })\n  expires: boolean;\n}\n","import { Heatmap } from '@koh/common';\nimport { Exclude } from 'class-transformer';\nimport {\n  BaseEntity,\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { AlertModel } from '../alerts/alerts.entity';\nimport { EventModel } from '../profile/event-model.entity';\nimport { UserCourseModel } from '../profile/user-course.entity';\nimport { QueueModel } from '../queue/queue.entity';\nimport { SemesterModel } from '../semester/semester.entity';\nimport { OfficeHourModel } from './office-hour.entity';\n\n@Entity('course_model')\nexport class CourseModel extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @OneToMany((type) => OfficeHourModel, (oh) => oh.course)\n  officeHours: OfficeHourModel[];\n\n  @OneToMany((type) => QueueModel, (q) => q.course)\n  queues: QueueModel[];\n\n  @Column('text')\n  name: string;\n\n  @Column('text', { nullable: true })\n  coordinator_email: string;\n\n  @Column('text', { nullable: true })\n  @Exclude()\n  icalURL: string;\n\n  @OneToMany((type) => UserCourseModel, (ucm) => ucm.course)\n  @Exclude()\n  userCourses: UserCourseModel;\n\n  @ManyToOne((type) => SemesterModel, (semester) => semester.courses)\n  @JoinColumn({ name: 'semesterId' })\n  @Exclude()\n  semester: SemesterModel;\n\n  @Column({ nullable: true })\n  @Exclude()\n  // TODO: can we make these not nullable and work with TypeORM\n  semesterId: number;\n\n  @Column('boolean', { nullable: true })\n  enabled: boolean; // Set to true if the given the course is using our app\n\n  // Set to true if the course is submitted via application and pending approval\n  @Column('boolean', { nullable: true })\n  pending: boolean;\n\n  // The heatmap is false when there havent been any questions asked yet or there havent been any office hours\n  heatmap: Heatmap | false;\n\n  // The IANA string representing the timezone the course is centered around. This is important for any time based events for a course\n  @Column('text', { nullable: true })\n  timezone: string;\n\n  @OneToMany((type) => EventModel, (event) => event.course)\n  @Exclude()\n  events: EventModel[];\n\n  @OneToMany((type) => AlertModel, (alert) => alert.course)\n  @Exclude()\n  alerts: AlertModel[];\n\n  // Whether or not students are allowed to self-enroll in the class\n  // WARNING: THIS SHOULD ONLY BE USED AS A TEMPORARY MEASURE WHEN THINGS LIKE BANNER ARE DOWN\n  @Column('boolean', { nullable: true, default: false })\n  selfEnroll: boolean;\n}\n","import { AlertPayload, AlertType } from '@koh/common';\nimport { Exclude } from 'class-transformer';\nimport {\n  BaseEntity,\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { CourseModel } from '../course/course.entity';\nimport { UserModel } from '../profile/user.entity';\n\n@Entity('alert_model')\nexport class AlertModel extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'enum', enum: AlertType })\n  alertType: AlertType;\n\n  @Column()\n  sent: Date;\n\n  @Column({ nullable: true })\n  resolved: Date;\n\n  @ManyToOne((type) => UserModel, (user) => user.alerts)\n  @JoinColumn({ name: 'userId' })\n  user: UserModel;\n\n  @Column({ nullable: true })\n  @Exclude()\n  userId: number;\n\n  @ManyToOne((type) => CourseModel, (course) => course.alerts)\n  @JoinColumn({ name: 'courseId' })\n  course: CourseModel;\n\n  @Column({ nullable: true })\n  @Exclude()\n  courseId: number;\n\n  @Column({ type: 'json' })\n  payload: AlertPayload;\n}\n","import { Exclude } from 'class-transformer';\nimport { INSIGHTS_MAP } from '../insights/insight-objects';\nimport {\n  AfterLoad,\n  BaseEntity,\n  Column,\n  Entity,\n  ManyToMany,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { DesktopNotifModel } from '../notification/desktop-notif.entity';\nimport { PhoneNotifModel } from '../notification/phone-notif.entity';\nimport { QueueModel } from '../queue/queue.entity';\nimport { EventModel } from './event-model.entity';\nimport { UserCourseModel } from './user-course.entity';\nimport { AlertModel } from '../alerts/alerts.entity';\n\n@Entity('user_model')\nexport class UserModel extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column('text')\n  email: string;\n\n  @Column('text', { nullable: true })\n  firstName: string;\n\n  @Column('text', { nullable: true })\n  lastName: string;\n\n  @Column('text', { nullable: true })\n  photoURL: string | null;\n\n  @OneToMany((type) => UserCourseModel, (ucm) => ucm.user)\n  @Exclude()\n  courses: UserCourseModel[];\n\n  @Column({ type: 'boolean', default: false })\n  @Exclude()\n  desktopNotifsEnabled: boolean; // Does user want notifications sent to their desktops?\n\n  @Column({ type: 'boolean', default: false })\n  @Exclude()\n  phoneNotifsEnabled: boolean; // Does user want notifications sent to their phone?\n\n  @OneToMany((type) => DesktopNotifModel, (notif) => notif.user)\n  @Exclude()\n  desktopNotifs: DesktopNotifModel[];\n\n  @OneToOne((type) => PhoneNotifModel, (notif) => notif.user)\n  @Exclude()\n  phoneNotif: PhoneNotifModel;\n\n  @Exclude()\n  @ManyToMany((type) => QueueModel, (queue) => queue.staffList)\n  queues: QueueModel[];\n\n  @Exclude()\n  @OneToMany((type) => EventModel, (event) => event.user)\n  events: EventModel[];\n\n  @OneToMany((type) => AlertModel, (alert) => alert.user)\n  alerts: AlertModel[];\n\n  @Exclude()\n  @Column({ type: 'simple-array', nullable: true })\n  hideInsights: string[];\n\n  insights: string[];\n\n  @AfterLoad()\n  computeInsights(): void {\n    let hideInsights = this.hideInsights;\n    if (!hideInsights) {\n      hideInsights = [];\n    }\n    const insightNames = Object.keys(INSIGHTS_MAP);\n    this.insights = insightNames.filter((name) => !hideInsights.includes(name));\n  }\n\n  name: string;\n\n  @AfterLoad()\n  setFullNames(): void {\n    this.name = this.firstName + ' ' + this.lastName;\n  }\n}\n","import {\n  BaseEntity,\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { UserModel } from '../profile/user.entity';\n\n@Entity('desktop_notif_model')\nexport class DesktopNotifModel extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column('text')\n  endpoint: string;\n\n  @Column({ nullable: true })\n  expirationTime: Date;\n\n  @Column('text')\n  p256dh: string;\n\n  @Column('text')\n  auth: string;\n\n  @ManyToOne((type) => UserModel, (user) => user.desktopNotifs)\n  @JoinColumn({ name: 'userId' })\n  user: UserModel;\n\n  @Column({ nullable: true })\n  userId: number;\n\n  @CreateDateColumn({ type: 'timestamp' })\n  createdAt: Date;\n\n  @Column({ type: 'text', nullable: true })\n  name: string;\n}\n","import {\n  BaseEntity,\n  Column,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { UserModel } from '../profile/user.entity';\n\n@Entity('phone_notif_model')\nexport class PhoneNotifModel extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column('text')\n  phoneNumber: string;\n\n  @OneToOne((type) => UserModel, (user) => user.phoneNotif)\n  @JoinColumn({ name: 'userId' })\n  user: UserModel;\n\n  @Column({ nullable: true })\n  userId: number;\n\n  @Column()\n  verified: boolean;\n}\n","import { Exclude } from 'class-transformer';\nimport { QuestionGroupModel } from '../question/question-group.entity';\nimport {\n  BaseEntity,\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  LessThanOrEqual,\n  ManyToMany,\n  ManyToOne,\n  MoreThanOrEqual,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { CourseModel } from '../course/course.entity';\nimport { OfficeHourModel } from '../course/office-hour.entity';\nimport { UserModel } from '../profile/user.entity';\nimport { QuestionModel } from '../question/question.entity';\n\ninterface TimeInterval {\n  startTime: Date;\n  endTime: Date;\n}\n\n@Entity('queue_model')\nexport class QueueModel extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne((type) => CourseModel, (course) => course.queues)\n  @JoinColumn({ name: 'courseId' })\n  course: CourseModel;\n\n  @Column({ nullable: true })\n  @Exclude()\n  courseId: number;\n\n  @Column('text')\n  room: string;\n\n  @OneToMany((type) => QuestionModel, (qm) => qm.queue)\n  @Exclude()\n  questions: QuestionModel[];\n\n  @OneToMany((type) => QuestionGroupModel, (qg) => qg.queue)\n  @Exclude()\n  groups: QuestionGroupModel[];\n\n  @Column('text', { nullable: true })\n  notes: string;\n\n  @ManyToMany((type) => UserModel, (user) => user.queues)\n  @JoinTable()\n  staffList: UserModel[];\n\n  @Column({ default: false })\n  allowQuestions: boolean;\n\n  @Exclude()\n  @OneToMany((type) => OfficeHourModel, (oh) => oh.queue)\n  @JoinTable()\n  officeHours: OfficeHourModel[];\n\n  @Column({ default: false })\n  isProfessorQueue: boolean;\n\n  startTime: Date;\n  endTime: Date;\n\n  isOpen: boolean;\n\n  async checkIsOpen(): Promise<boolean> {\n    if (this.staffList && this.staffList.length > 0) {\n      this.isOpen = true;\n      return true;\n    }\n\n    this.isOpen = await this.areThereOfficeHoursRightNow();\n    return this.isOpen;\n  }\n\n  async areThereOfficeHoursRightNow(now = new Date()): Promise<boolean> {\n    const MS_IN_MINUTE = 60000;\n    const ohs = await this.getOfficeHours(now);\n    return !!ohs.find(\n      (e) =>\n        e.startTime.getTime() - 10 * MS_IN_MINUTE < now.getTime() &&\n        e.endTime.getTime() + 1 * MS_IN_MINUTE > now.getTime(),\n    );\n  }\n\n  queueSize: number;\n\n  async addQueueSize(): Promise<void> {\n    this.queueSize = await QuestionModel.waitingInQueue(this.id).getCount();\n  }\n\n  public async addQueueTimes(): Promise<void> {\n    const now = new Date();\n\n    const officeHours = await this.getOfficeHours();\n    const timeIntervals = this.generateMergedTimeIntervals(officeHours);\n    const currTime = timeIntervals.find((group) => {\n      // Find a time interval within 15 minutes of bounds to account for TA edge cases\n      const lowerBound = group.startTime.getTime() - 15 * 60 * 1000;\n      const upperBound = group.endTime.getTime() + 15 * 60 * 1000;\n      return lowerBound <= now.getTime() && upperBound >= now.getTime();\n    });\n\n    if (currTime) {\n      this.startTime = currTime.startTime;\n      this.endTime = currTime.endTime;\n    }\n  }\n\n  // Get Office hours in a 72hr window around now, snapped to midnight\n  private async getOfficeHours(now = new Date()): Promise<OfficeHourModel[]> {\n    const lowerBound = new Date(now);\n    lowerBound.setUTCHours(now.getUTCHours() - 30);\n    lowerBound.setUTCHours(0, 0, 0, 0);\n\n    const upperBound = new Date(now);\n    upperBound.setUTCHours(now.getUTCHours() + 30);\n    upperBound.setUTCHours(0, 0, 0, 0);\n\n    return await OfficeHourModel.find({\n      where: [\n        {\n          queueId: this.id,\n          startTime: MoreThanOrEqual(lowerBound),\n          endTime: LessThanOrEqual(upperBound),\n        },\n      ],\n      order: {\n        startTime: 'ASC',\n      },\n    });\n  }\n\n  private generateMergedTimeIntervals(\n    officeHours: OfficeHourModel[],\n  ): TimeInterval[] {\n    const timeIntervals: TimeInterval[] = [];\n    officeHours.forEach((officeHour) => {\n      if (\n        timeIntervals.length == 0 ||\n        officeHour.startTime > timeIntervals[timeIntervals.length - 1].endTime\n      ) {\n        timeIntervals.push({\n          startTime: officeHour.startTime,\n          endTime: officeHour.endTime,\n        });\n        return;\n      }\n\n      const prevGroup = timeIntervals[timeIntervals.length - 1];\n      prevGroup.endTime =\n        officeHour.endTime > prevGroup.endTime\n          ? officeHour.endTime\n          : prevGroup.endTime;\n    });\n\n    return timeIntervals;\n  }\n\n  // TODO: eventually figure out how staff get sent to FE as well\n}\n","import {\n  BaseEntity,\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { UserCourseModel } from '../profile/user-course.entity';\nimport { QueueModel } from '../queue/queue.entity';\nimport { QuestionModel } from './question.entity';\n\n@Entity('question_group_model')\nexport class QuestionGroupModel extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @OneToMany((type) => QuestionModel, (q) => q.group)\n  questions: QuestionModel[];\n\n  @ManyToOne((type) => UserCourseModel)\n  @JoinColumn({ name: 'creatorId' })\n  creator: UserCourseModel;\n\n  @Column()\n  creatorId: number;\n\n  @ManyToOne((type) => QueueModel, (q) => q.groups)\n  @JoinColumn({ name: 'queueId' })\n  queue: QueueModel;\n\n  @Column({ nullable: true })\n  queueId: number;\n}\n","import { QuestionStatus, QuestionType, Role, StatusInQueue } from '@koh/common';\nimport { Exclude } from 'class-transformer';\nimport {\n  BaseEntity,\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  SelectQueryBuilder,\n} from 'typeorm';\nimport { UserModel } from '../profile/user.entity';\nimport { QueueModel } from '../queue/queue.entity';\nimport { canChangeQuestionStatus } from './question-fsm';\nimport { QuestionGroupModel } from './question-group.entity';\n\n@Entity('question_model')\nexport class QuestionModel extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne((type) => QueueModel, (q) => q.questions)\n  @JoinColumn({ name: 'queueId' })\n  @Exclude()\n  queue: QueueModel;\n\n  @Column({ nullable: true })\n  @Exclude()\n  queueId: number;\n\n  @Column('text')\n  text: string;\n\n  @ManyToOne((type) => UserModel)\n  @JoinColumn({ name: 'creatorId' })\n  creator: UserModel;\n\n  @Column({ nullable: true })\n  @Exclude()\n  creatorId: number;\n\n  @ManyToOne((type) => UserModel)\n  @JoinColumn({ name: 'taHelpedId' })\n  taHelped: UserModel;\n\n  @Column({ nullable: true })\n  @Exclude()\n  taHelpedId: number;\n\n  @Column()\n  createdAt: Date;\n\n  // When the question was first helped (doesn't overwrite)\n  @Column({ nullable: true })\n  @Exclude()\n  firstHelpedAt: Date;\n\n  // When the question was last helped (getting help again on priority queue overwrites)\n  @Column({ nullable: true })\n  helpedAt: Date;\n\n  // When the question leaves the queue\n  @Column({ nullable: true })\n  closedAt: Date;\n\n  @Column('text', { nullable: true })\n  questionType: QuestionType;\n\n  @Column('text')\n  status: QuestionStatus;\n\n  @Column({ nullable: true })\n  location: string;\n\n  @Column({ nullable: true })\n  isOnline: boolean;\n\n  @Column({ nullable: true }) //TODO: delete constraint after backfill\n  groupable: boolean;\n\n  @ManyToOne((type) => QuestionGroupModel, { nullable: true })\n  @JoinColumn({ name: 'groupId' })\n  group: QuestionGroupModel;\n\n  @Column({ nullable: true })\n  @Exclude()\n  groupId: number;\n\n  /**\n   * change the status of the question as the given role\n   *\n   * @returns whether status change succeeded\n   */\n  public changeStatus(newStatus: QuestionStatus, role: Role): boolean {\n    if (canChangeQuestionStatus(this.status, newStatus, role)) {\n      this.status = newStatus;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Scopes\n   */\n  static inQueueWithStatus(\n    queueId: number,\n    statuses: QuestionStatus[],\n  ): SelectQueryBuilder<QuestionModel> {\n    return this.createQueryBuilder('question')\n      .where('question.queueId = :queueId', { queueId })\n      .andWhere('question.status IN (:...statuses)', {\n        statuses,\n      })\n      .orderBy('question.createdAt', 'ASC');\n  }\n\n  /**\n   * Questions that are open in the queue (not in priority queue)\n   */\n  static waitingInQueue(queueId: number): SelectQueryBuilder<QuestionModel> {\n    return QuestionModel.inQueueWithStatus(queueId, StatusInQueue);\n  }\n}\n","import {\n  ClosedQuestionStatus,\n  LimboQuestionStatus,\n  OpenQuestionStatus,\n  QuestionStatus,\n  Role,\n} from '@koh/common';\n\ninterface AllowableTransitions {\n  student?: QuestionStatus[];\n  ta?: QuestionStatus[];\n}\n\nconst QUEUE_TRANSITIONS: AllowableTransitions = {\n  ta: [OpenQuestionStatus.Helping, LimboQuestionStatus.TADeleted],\n  student: [ClosedQuestionStatus.ConfirmedDeleted],\n};\n\nconst QUESTION_STATES: Record<QuestionStatus, AllowableTransitions> = {\n  [OpenQuestionStatus.Drafting]: {\n    student: [OpenQuestionStatus.Queued, ClosedQuestionStatus.ConfirmedDeleted],\n    ta: [OpenQuestionStatus.Helping, ClosedQuestionStatus.DeletedDraft],\n  },\n  [OpenQuestionStatus.Queued]: QUEUE_TRANSITIONS,\n  [OpenQuestionStatus.PriorityQueued]: QUEUE_TRANSITIONS,\n  [OpenQuestionStatus.Helping]: {\n    ta: [\n      LimboQuestionStatus.CantFind,\n      LimboQuestionStatus.ReQueueing,\n      ClosedQuestionStatus.Resolved,\n      LimboQuestionStatus.TADeleted,\n    ],\n    student: [ClosedQuestionStatus.ConfirmedDeleted],\n  },\n  [LimboQuestionStatus.CantFind]: {\n    student: [\n      OpenQuestionStatus.PriorityQueued,\n      ClosedQuestionStatus.ConfirmedDeleted,\n    ],\n  },\n  [LimboQuestionStatus.ReQueueing]: {\n    student: [\n      OpenQuestionStatus.PriorityQueued,\n      ClosedQuestionStatus.ConfirmedDeleted,\n    ],\n  },\n  [LimboQuestionStatus.TADeleted]: {\n    student: [ClosedQuestionStatus.ConfirmedDeleted],\n  },\n  [ClosedQuestionStatus.Resolved]: {},\n  [ClosedQuestionStatus.ConfirmedDeleted]: {},\n  [ClosedQuestionStatus.Stale]: {},\n  [ClosedQuestionStatus.DeletedDraft]: {},\n};\n\nexport function canChangeQuestionStatus(\n  oldStatus: QuestionStatus,\n  goalStatus: QuestionStatus,\n  role: Role,\n): boolean {\n  return (\n    oldStatus === goalStatus ||\n    QUESTION_STATES[oldStatus][role]?.includes(goalStatus)\n  );\n}\n","import { Exclude, Expose } from 'class-transformer';\nimport {\n  BaseEntity,\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { QueueModel } from '../queue/queue.entity';\nimport { CourseModel } from './course.entity';\n\n@Entity('office_hour')\nexport class OfficeHourModel extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne((type) => CourseModel, (course) => course.officeHours)\n  @JoinColumn({ name: 'courseId' })\n  @Exclude()\n  course: CourseModel;\n\n  @Column({ nullable: true })\n  @Exclude()\n  courseId: number;\n\n  @ManyToOne((type) => QueueModel, (queue) => queue.officeHours, {\n    eager: true,\n  })\n  @JoinColumn({ name: 'queueId' })\n  @Exclude()\n  queue: QueueModel;\n\n  @Column({ nullable: true })\n  @Exclude()\n  queueId: number;\n\n  @Column('text')\n  title: string;\n\n  @Column()\n  startTime: Date;\n\n  @Column()\n  endTime: Date;\n\n  @Expose()\n  get room(): string {\n    return this.queue?.room;\n  }\n}\n","import { Exclude } from 'class-transformer';\nimport {\n  BaseEntity,\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { CourseModel } from '../course/course.entity';\nimport { UserModel } from './user.entity';\nimport { QueueModel } from '../queue/queue.entity';\n\n/**\n * Represents an Event in the EventModel table, used for advanced metrics.\n */\nexport enum EventType {\n  TA_CHECKED_IN = 'taCheckedIn',\n  TA_CHECKED_OUT = 'taCheckedOut',\n  TA_CHECKED_OUT_FORCED = 'taCheckedOutForced',\n}\n\n@Entity('event_model')\nexport class EventModel extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  time: Date;\n\n  @Column({ type: 'enum', enum: EventType })\n  eventType: EventType;\n\n  @ManyToOne((type) => UserModel, (user) => user.events)\n  @JoinColumn({ name: 'userId' })\n  user: UserModel;\n\n  @Column({ nullable: true })\n  @Exclude()\n  userId: number;\n\n  @ManyToOne((type) => CourseModel, (course) => course.events)\n  @JoinColumn({ name: 'courseId' })\n  course: CourseModel;\n\n  @Column({ nullable: true })\n  @Exclude()\n  courseId: number;\n\n  @Column({ nullable: true })\n  @Exclude()\n  queueId: number;\n\n  @ManyToOne((type) => QueueModel, { onDelete: 'SET NULL' })\n  @JoinColumn({ name: 'queueId' })\n  queue: QueueModel;\n}\n","import { Season } from '@koh/common';\nimport {\n  BaseEntity,\n  Column,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { CourseModel } from '../course/course.entity';\n\n@Entity('semester_model')\nexport class SemesterModel extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column('text')\n  season: Season;\n\n  @Column()\n  year: number;\n\n  @OneToMany((type) => CourseModel, (course) => course.semester)\n  courses: CourseModel[];\n}\n","import { InsightsService } from './insights.service';\nimport {\n  Controller,\n  UseGuards,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n  Get,\n  Param,\n  Query,\n  BadRequestException,\n  Body,\n  Delete,\n  Patch,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from 'guards/jwt-auth.guard';\nimport { Connection } from 'typeorm';\nimport {\n  GetInsightOutputResponse,\n  ERROR_MESSAGES,\n  ListInsightsResponse,\n  Role,\n} from '@koh/common';\nimport { User } from '../decorators/user.decorator';\nimport { INSIGHTS_MAP } from './insight-objects';\nimport { UserModel } from 'profile/user.entity';\nimport { Roles } from 'decorators/roles.decorator';\nimport { CourseRole } from '../decorators/course-role.decorator';\nimport { Filter } from './insight-objects';\n\n@Controller('insights')\n@UseGuards(JwtAuthGuard)\n@UseInterceptors(ClassSerializerInterceptor)\nexport class InsightsController {\n  constructor(\n    private connection: Connection,\n    private insightsService: InsightsService,\n  ) {}\n\n  @Get(':courseId/:insightName')\n  async get(\n    @CourseRole() role: Role,\n    @Param('courseId') courseId: number,\n    @Param('insightName') insightName: string,\n    @Query('start') start: string,\n    @Query('end') end: string,\n  ): Promise<GetInsightOutputResponse> {\n    // Check that the insight name is valid\n    const insightNames = Object.keys(INSIGHTS_MAP);\n    if (!insightNames.includes(insightName)) {\n      throw new BadRequestException(\n        ERROR_MESSAGES.insightsController.insightNameNotFound,\n      );\n    }\n    // Check that the current user's role has access to the given insight\n    if (!INSIGHTS_MAP[insightName].roles.includes(role)) {\n      throw new BadRequestException(\n        ERROR_MESSAGES.insightsController.insightUnathorized,\n      );\n    }\n\n    // Initialize filters with a courseId filter since all insights are filtered by courseId\n    const filters: Filter[] = [\n      {\n        type: 'courseId',\n        courseId,\n      },\n    ];\n    // Check if the time range filters exist and add them if so\n    if (start && end) {\n      filters.push({\n        type: 'timeframe',\n        start: new Date(start),\n        end: new Date(end),\n      });\n    }\n\n    const insight = await this.insightsService.computeOutput({\n      insight: INSIGHTS_MAP[insightName],\n      filters,\n    });\n\n    return insight;\n  }\n\n  @Get('list')\n  @Roles(Role.PROFESSOR)\n  async getAllInsights(): Promise<ListInsightsResponse> {\n    return this.insightsService.convertToInsightsListResponse(\n      Object.keys(INSIGHTS_MAP),\n    );\n  }\n\n  @Patch('')\n  @Roles(Role.PROFESSOR)\n  async toggleInsightOn(\n    @Body() body: { insightName: string },\n    @User() user: UserModel,\n  ): Promise<void> {\n    await this.insightsService.toggleInsightOn(user, body.insightName);\n    return;\n  }\n\n  @Delete('')\n  @Roles(Role.PROFESSOR)\n  async toggleInsightOff(\n    @Body() body: { insightName: string },\n    @User() user: UserModel,\n  ): Promise<void> {\n    await this.insightsService.toggleInsightOff(user, body.insightName);\n    return;\n  }\n}\n","import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n","module.exports = require(\"@nestjs/passport\");","import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport { UserModel } from '../profile/user.entity';\n\nexport const User = createParamDecorator<string[]>(\n  async (relations: string[], ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return await UserModel.findOne(request.user.userId, { relations });\n  },\n);\n\nexport const UserId = createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return Number(request.user.userId);\n  },\n);\n","import { SetMetadata, CustomDecorator } from '@nestjs/common';\n\nexport const Roles = (...roles: string[]): CustomDecorator<string> =>\n  SetMetadata('roles', roles);\n","import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport { UserModel } from 'profile/user.entity';\n\nexport const CourseRole = createParamDecorator(\n  async (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const courseId = request.params.courseId;\n    const user = await UserModel.findOne(request.user.userId, {\n      relations: ['courses'],\n    });\n\n    const userCourse = user.courses.find((course) => {\n      return Number(course.courseId) === Number(courseId);\n    });\n    return userCourse.role;\n  },\n);\n","import { Module } from '@nestjs/common';\nimport { AlertsController } from './alerts.controller';\nimport { AlertsService } from './alerts.service';\n\n@Module({\n  controllers: [AlertsController],\n  providers: [AlertsService],\n})\nexport class AlertsModule {}\n","import {\n  CreateAlertParams,\n  CreateAlertResponse,\n  ERROR_MESSAGES,\n  GetAlertsResponse,\n  Role,\n} from '@koh/common';\nimport {\n  BadRequestException,\n  Body,\n  Controller,\n  Get,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { pick } from 'lodash';\nimport { JwtAuthGuard } from 'guards/jwt-auth.guard';\nimport { User } from 'decorators/user.decorator';\nimport { UserModel } from 'profile/user.entity';\nimport { Roles } from '../decorators/roles.decorator';\nimport { AlertModel } from './alerts.entity';\nimport { AlertsService } from './alerts.service';\n\n@Controller('alerts')\n@UseGuards(JwtAuthGuard)\nexport class AlertsController {\n  constructor(private alertsService: AlertsService) {}\n\n  @Get(':courseId')\n  async getAlerts(\n    @Param('courseId') courseId: number,\n    @User() user: UserModel,\n  ): Promise<GetAlertsResponse> {\n    const alerts = (\n      await AlertModel.find({\n        where: {\n          courseId,\n          user,\n          resolved: null,\n        },\n      })\n    ).map((alert) => pick(alert, ['sent', 'alertType', 'payload', 'id']));\n\n    return { alerts: await this.alertsService.removeStaleAlerts(alerts) };\n  }\n\n  @Post()\n  @Roles(Role.TA, Role.PROFESSOR)\n  async createAlert(\n    @Body() body: CreateAlertParams,\n  ): Promise<CreateAlertResponse> {\n    const { alertType, courseId, payload, targetUserId } = body;\n\n    const anotherAlert = await AlertModel.findOne({\n      where: {\n        alertType,\n        userId: targetUserId,\n        resolved: null,\n      },\n    });\n\n    // If the same user already has an alert for this then don't create a new one\n    if (anotherAlert) {\n      throw new BadRequestException(\n        ERROR_MESSAGES.alertController.duplicateAlert,\n      );\n    }\n\n    const alert = await AlertModel.create({\n      alertType,\n      sent: new Date(),\n      userId: targetUserId,\n      courseId,\n      payload,\n    }).save();\n\n    return alert;\n  }\n\n  @Patch(':alertId')\n  @Roles(Role.STUDENT, Role.TA, Role.PROFESSOR)\n  async closeAlert(@Param('alertId') alertId: number): Promise<void> {\n    const alert = await AlertModel.findOne({\n      where: {\n        id: alertId,\n      },\n    });\n\n    if (!alert) {\n      throw new BadRequestException(\n        ERROR_MESSAGES.alertController.notActiveAlert,\n      );\n    }\n\n    alert.resolved = new Date();\n    await alert.save();\n  }\n}\n","module.exports = require(\"lodash\");","import { Alert, AlertType, RephraseQuestionPayload } from '@koh/common';\nimport { Injectable } from '@nestjs/common';\nimport { QuestionModel } from 'question/question.entity';\nimport { Connection } from 'typeorm';\nimport { QueueModel } from '../queue/queue.entity';\n\n@Injectable()\nexport class AlertsService {\n  constructor(private connection: Connection) {}\n\n  async removeStaleAlerts(alerts: Alert[]): Promise<Alert[]> {\n    const nonStaleAlerts = [];\n\n    for (const alert of alerts) {\n      // Might be one of the few usecases for ReasonML\n\n      switch (alert.alertType) {\n        case AlertType.REPHRASE_QUESTION:\n          const payload = alert.payload as RephraseQuestionPayload;\n          const question = await QuestionModel.findOne(payload.questionId);\n\n          const queue = await QueueModel.findOne(payload.queueId);\n          if (question.closedAt || !(await queue.checkIsOpen())) {\n            console.log(`Rephrase Question alert with id ${alert.id} expired`);\n            if (!question.closedAt) {\n              question.closedAt = new Date();\n            }\n          } else {\n            nonStaleAlerts.push(alert);\n          }\n      }\n    }\n\n    return nonStaleAlerts;\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { NotificationModule } from 'notification/notification.module';\nimport { BackfillCourseTimezones } from './backfill-course-timezones';\nimport { BackfillHuskyEmailsAsNortheastern } from './backfill-husky-emails-to-northeastern';\nimport { BackfillPhoneNotifs } from './backfill-phone-notifs.command';\nimport { BackfillQuestionGroupable } from './backfill-question-groupable';\nimport { BackfillUserInsights } from './backfill-user-insights.command';\nimport { BackfillMakeEmptyPhotoURLNull } from './make-empty-photourl-null.command';\n\n@Module({\n  imports: [NotificationModule],\n  providers: [\n    BackfillPhoneNotifs,\n    BackfillMakeEmptyPhotoURLNull,\n    BackfillCourseTimezones,\n    BackfillHuskyEmailsAsNortheastern,\n    BackfillQuestionGroupable,\n    BackfillUserInsights,\n  ],\n})\nexport class BackfillModule {}\n","import { Module } from '@nestjs/common';\nimport { DesktopNotifSubscriber } from './desktop-notif-subscriber';\nimport { NotificationController } from './notification.controller';\nimport { NotificationService } from './notification.service';\nimport { TwilioService } from './twilio/twilio.service';\n\n@Module({\n  controllers: [NotificationController],\n  providers: [NotificationService, DesktopNotifSubscriber, TwilioService],\n  exports: [NotificationService, TwilioService],\n})\nexport class NotificationModule {}\n","import {\n  Connection,\n  EntitySubscriberInterface,\n  EventSubscriber,\n  InsertEvent,\n} from 'typeorm';\nimport { DesktopNotifModel } from './desktop-notif.entity';\nimport { NotificationService } from './notification.service';\n\n@EventSubscriber()\nexport class DesktopNotifSubscriber\n  implements EntitySubscriberInterface<DesktopNotifModel>\n{\n  notifService: NotificationService;\n  constructor(connection: Connection, notifService: NotificationService) {\n    this.notifService = notifService;\n    connection.subscribers.push(this);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  listenTo() {\n    return DesktopNotifModel;\n  }\n\n  async afterInsert(event: InsertEvent<DesktopNotifModel>): Promise<void> {\n    await this.notifService.notifyDesktop(\n      event.entity,\n      \"You've successfully signed up for desktop notifications!\",\n    );\n  }\n}\n","import { ERROR_MESSAGES } from '@koh/common';\nimport { BadRequestException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { DeepPartial } from 'typeorm';\nimport * as webPush from 'web-push';\nimport { UserModel } from '../profile/user.entity';\nimport { DesktopNotifModel } from './desktop-notif.entity';\nimport { PhoneNotifModel } from './phone-notif.entity';\nimport { TwilioService } from './twilio/twilio.service';\n\nexport const NotifMsgs = {\n  phone: {\n    WRONG_MESSAGE:\n      'Please respond with either YES or NO. Text STOP at any time to stop receiving text messages',\n    COULD_NOT_FIND_NUMBER:\n      'Could not find an Office Hours account with your phone number.',\n    UNREGISTER:\n      \"You've unregistered from text notifications for Khoury Office Hours. Feel free to re-register any time through the website\",\n    DUPLICATE:\n      \"You've already been verified to receive text notifications from Khoury Office Hours!\",\n    OK: 'Thank you for verifying your number with Khoury Office Hours! You are now signed up for text notifications!',\n  },\n  queue: {\n    ALERT_BUTTON:\n      \"The TA could't reach you, please have Microsoft Teams open and confirm you are back!\",\n    THIRD_PLACE: `You're 3rd in the queue. Be ready for a TA to call you soon!`,\n    TA_HIT_HELPED: (taName: string): string =>\n      `${taName} is coming to help you!`,\n    REMOVED: `You've been removed from the queue. Please return to the app for more information.`,\n  },\n  ta: {\n    STUDENT_JOINED_EMPTY_QUEUE:\n      'A student has joined your (previously empty) queue!',\n  },\n};\n\n//TODO test this service omg\n@Injectable()\nexport class NotificationService {\n  desktopPublicKey: string;\n\n  constructor(\n    private configService: ConfigService,\n    private twilioService: TwilioService,\n  ) {\n    webPush.setVapidDetails(\n      this.configService.get('EMAIL'),\n      this.configService.get('PUBLICKEY'),\n      this.configService.get('PRIVATEKEY'),\n    );\n    this.desktopPublicKey = this.configService.get('PUBLICKEY');\n  }\n\n  async registerDesktop(\n    info: DeepPartial<DesktopNotifModel>,\n  ): Promise<DesktopNotifModel> {\n    // create if not exist\n    let dn = await DesktopNotifModel.findOne({\n      where: { userId: info.userId, endpoint: info.endpoint },\n    });\n    if (!dn) {\n      dn = await DesktopNotifModel.create(info).save();\n      await dn.reload();\n    }\n    return dn;\n  }\n\n  async registerPhone(phoneNumber: string, user: UserModel): Promise<void> {\n    const fullNumber = await this.twilioService.getFullPhoneNumber(phoneNumber);\n    if (!fullNumber) {\n      throw new BadRequestException(\n        ERROR_MESSAGES.notificationService.registerPhone,\n      );\n    }\n\n    let phoneNotifModel = await PhoneNotifModel.findOne({\n      userId: user.id,\n    });\n\n    if (phoneNotifModel) {\n      // Phone number has not changed\n      if (phoneNotifModel.phoneNumber === fullNumber) {\n        return;\n      } else {\n        // Need to just change it\n        phoneNotifModel.phoneNumber = fullNumber;\n        phoneNotifModel.verified = false;\n        await phoneNotifModel.save();\n      }\n    } else {\n      phoneNotifModel = await PhoneNotifModel.create({\n        phoneNumber: fullNumber,\n        userId: user.id,\n        verified: false,\n      }).save();\n\n      // MUTATE so if user.save() is called later it doesn't dis-associate\n      user.phoneNotif = phoneNotifModel;\n    }\n\n    await this.notifyPhone(\n      phoneNotifModel,\n      \"You've signed up for phone notifications for Khoury Office Hours. To verify your number, please respond to this message with YES. To unsubscribe, respond to this message with NO or STOP\",\n      true,\n    );\n  }\n\n  // Notify user on all platforms\n  async notifyUser(userId: number, message: string): Promise<void> {\n    const notifModelsOfUser = await UserModel.findOne({\n      where: {\n        id: userId,\n      },\n      relations: ['desktopNotifs', 'phoneNotif'],\n    });\n\n    // run the promises concurrently\n    if (notifModelsOfUser.desktopNotifsEnabled) {\n      await Promise.all(\n        notifModelsOfUser.desktopNotifs.map(async (nm) =>\n          this.notifyDesktop(nm, message),\n        ),\n      );\n    }\n    if (notifModelsOfUser.phoneNotif && notifModelsOfUser.phoneNotifsEnabled) {\n      this.notifyPhone(notifModelsOfUser.phoneNotif, message, false);\n    }\n  }\n\n  // notifies a user via desktop notification\n  async notifyDesktop(nm: DesktopNotifModel, message: string): Promise<void> {\n    try {\n      await webPush.sendNotification(\n        {\n          endpoint: nm.endpoint,\n          keys: {\n            p256dh: nm.p256dh,\n            auth: nm.auth,\n          },\n        },\n        message,\n      );\n    } catch (error) {\n      await DesktopNotifModel.remove(nm);\n    }\n  }\n\n  // notifies a user via phone number\n  async notifyPhone(\n    pn: PhoneNotifModel,\n    message: string,\n    force: boolean,\n  ): Promise<void> {\n    if (force || pn.verified) {\n      try {\n        await this.twilioService.sendSMS(pn.phoneNumber, message);\n      } catch (error) {\n        console.error('problem sending message', error);\n      }\n    }\n  }\n\n  async verifyPhone(phoneNumber: string, message: string): Promise<string> {\n    const phoneNotif = await PhoneNotifModel.findOne({\n      where: { phoneNumber: phoneNumber },\n    });\n\n    if (!phoneNotif) {\n      return NotifMsgs.phone.COULD_NOT_FIND_NUMBER;\n    } else if (message !== 'YES' && message !== 'NO' && message !== 'STOP') {\n      return NotifMsgs.phone.WRONG_MESSAGE;\n    } else if (message === 'NO' || message === 'STOP') {\n      // did some more digging, STOP just stops messages completely, we'll never receive it\n      // so uh... there's probably a way to do that\n      await PhoneNotifModel.delete(phoneNotif);\n      return NotifMsgs.phone.UNREGISTER;\n    } else if (phoneNotif.verified) {\n      return NotifMsgs.phone.DUPLICATE;\n    } else {\n      phoneNotif.verified = true;\n      await phoneNotif.save();\n      return NotifMsgs.phone.OK;\n    }\n  }\n}\n","module.exports = require(\"web-push\");","import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as twilio from 'twilio';\n\n/**\n * A wrapper around twilio SDK to make testing easier.\n * Should NOT interact with DB models or do anything smart. Just wrap Twilio.\n */\n@Injectable()\nexport class TwilioService {\n  private twilioClient: twilio.Twilio;\n\n  constructor(private configService: ConfigService) {\n    this.twilioClient = twilio(\n      this.configService.get('TWILIOACCOUNTSID'),\n      this.configService.get('TWILIOAUTHTOKEN'),\n    );\n  }\n\n  /**\n   * Get full phone number or return false if phone number isn't real\n   */\n  public async getFullPhoneNumber(\n    phoneNumber: string,\n  ): Promise<string | false> {\n    try {\n      return (await this.twilioClient.lookups.phoneNumbers(phoneNumber).fetch())\n        .phoneNumber;\n    } catch (err) {\n      // if the phone number is not found, then endpoint should return invalid\n      return false;\n    }\n  }\n\n  /**\n   * Send SMS to phone number using our Twilio number\n   */\n  public async sendSMS(phoneNumber: string, message: string): Promise<void> {\n    await this.twilioClient.messages.create({\n      body: message,\n      from: this.configService.get('TWILIOPHONENUMBER'),\n      to: phoneNumber,\n    });\n  }\n}\n","module.exports = require(\"twilio\");","import {\n  DesktopNotifBody,\n  DesktopNotifPartial,\n  ERROR_MESSAGES,\n  TwilioBody,\n} from '@koh/common';\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Header,\n  Headers,\n  NotFoundException,\n  Param,\n  Post,\n  UnauthorizedException,\n  UseGuards,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as twilio from 'twilio';\nimport { JwtAuthGuard } from '../guards/jwt-auth.guard';\nimport { UserId } from '../decorators/user.decorator';\nimport { DesktopNotifModel } from './desktop-notif.entity';\nimport { NotificationService } from './notification.service';\n\n@Controller('notifications')\nexport class NotificationController {\n  constructor(\n    private notifService: NotificationService,\n    private configService: ConfigService,\n  ) {}\n\n  @Get('desktop/credentials')\n  @UseGuards(JwtAuthGuard)\n  getDesktopCredentials(): string {\n    return JSON.stringify(this.notifService.desktopPublicKey);\n  }\n\n  @Post('desktop/device')\n  @UseGuards(JwtAuthGuard)\n  async registerDesktopUser(\n    @Body() body: DesktopNotifBody,\n    @UserId() userId: number,\n  ): Promise<DesktopNotifPartial> {\n    const device = await this.notifService.registerDesktop({\n      endpoint: body.endpoint,\n      expirationTime: body.expirationTime && new Date(body.expirationTime),\n      p256dh: body.keys.p256dh,\n      auth: body.keys.auth,\n      name: body.name,\n      userId: userId,\n    });\n    return {\n      id: device.id,\n      endpoint: device.endpoint,\n      createdAt: device.createdAt,\n      name: device.name,\n    };\n  }\n\n  @Delete('desktop/device/:deviceId')\n  @UseGuards(JwtAuthGuard)\n  async deleteDesktopUser(\n    @Param('deviceId') deviceId: number,\n    @UserId() userId: number,\n  ): Promise<void> {\n    const dn = await DesktopNotifModel.find({ id: deviceId, userId });\n    if (dn.length > 0) {\n      await DesktopNotifModel.remove(dn);\n    } else {\n      throw new NotFoundException();\n    }\n  }\n\n  // Webhook from twilio\n  @Post('/phone/verify')\n  @Header('Content-Type', 'text/xml')\n  async verifyPhoneUser(\n    @Body() body: TwilioBody,\n    @Headers('x-twilio-signature') twilioSignature: string,\n  ): Promise<string> {\n    const message = body.Body.trim().toUpperCase();\n    const senderNumber = body.From;\n\n    const twilioAuthToken = this.configService.get('TWILIOAUTHTOKEN');\n\n    const isValidated = twilio.validateRequest(\n      twilioAuthToken,\n      twilioSignature.trim(),\n      `${this.configService.get('DOMAIN')}/api/v1/notifications/phone/verify`,\n      body,\n    );\n\n    if (!isValidated) {\n      throw new UnauthorizedException(\n        ERROR_MESSAGES.notificationController.messageNotFromTwilio,\n      );\n    }\n\n    const messageToUser = await this.notifService.verifyPhone(\n      senderNumber,\n      message,\n    );\n    const MessagingResponse = twilio.twiml.MessagingResponse;\n    const twiml = new MessagingResponse();\n    twiml.message(messageToUser);\n\n    return twiml.toString();\n  }\n}\n","import { Command } from 'nestjs-command';\nimport { Injectable } from '@nestjs/common';\nimport { CourseModel } from 'course/course.entity';\n\n@Injectable()\nexport class BackfillCourseTimezones {\n  @Command({\n    command: 'backfill:course-timezones',\n    describe: 'set all course timezones from null to \"America/New_York\"',\n    autoExit: true,\n  })\n  async copy(): Promise<void> {\n    await CourseModel.createQueryBuilder()\n      .update()\n      .set({ timezone: () => `'America/New_York'` })\n      .callListeners(false)\n      .execute();\n    console.log(`Updated ${await CourseModel.count()} courses`);\n  }\n}\n","import { Injectable } from '@nestjs/common';\nimport { Command } from 'nestjs-command';\nimport { UserModel } from 'profile/user.entity';\n\n@Injectable()\nexport class BackfillHuskyEmailsAsNortheastern {\n  @Command({\n    command: 'backfill:husky-emails-to-northeastern',\n    describe: 'Converts @husky.neu.edu emails to @northeastern.edu emails',\n    autoExit: true,\n  })\n  async fix(): Promise<void> {\n    const users = await UserModel.find();\n\n    const usersToBeUpdated = users.filter((user) =>\n      user.email.includes('@husky.neu.edu'),\n    );\n\n    users.forEach((user) => {\n      user.email = user.email.replace('@husky.neu.edu', '@northeastern.edu');\n    });\n\n    await UserModel.save(users);\n    console.log(`Updated the emails of ${usersToBeUpdated.length} users`);\n  }\n}\n","import { Injectable } from '@nestjs/common';\nimport { Command } from 'nestjs-command';\nimport { PhoneNotifModel } from 'notification/phone-notif.entity';\nimport { TwilioService } from 'notification/twilio/twilio.service';\nimport { UserModel } from 'profile/user.entity';\nimport { IsNull } from 'typeorm';\n\n@Injectable()\nexport class BackfillPhoneNotifs {\n  constructor(private twilioService: TwilioService) {}\n  @Command({\n    command: 'backfill:phone-notifs',\n    describe:\n      'delete phone notifs with no userids, delete duplicate phone notifs, and forcibly set verified on existing phonenotifs',\n    autoExit: true,\n  })\n  async fix(): Promise<void> {\n    // Delete those without userids associated\n    const noUser = await PhoneNotifModel.delete({ userId: IsNull() });\n    console.log(`deleted ${noUser.affected} desktopnotifmodels with no userid`);\n\n    // delete at once\n    const toDelete: PhoneNotifModel[] = [];\n\n    // Delete duplicates\n    const dups = await PhoneNotifModel.createQueryBuilder('pnotif')\n      .select([`\"phoneNumber\"`, 'COUNT(*)'])\n      .groupBy('pnotif.phoneNumber')\n      .having('COUNT(*) > 1')\n      .getRawMany();\n    console.log(`found ${dups.length} dups`);\n    toDelete.push(...dups);\n\n    const valid: PhoneNotifModel[] = [];\n    let changedNum = 0;\n    // change to real number\n    const all = await PhoneNotifModel.find({ relations: ['user'] });\n    for (const p of all) {\n      const number = await this.twilioService.getFullPhoneNumber(p.phoneNumber);\n      if (number) {\n        if (number !== p.phoneNumber) {\n          changedNum += 1;\n        }\n        p.phoneNumber = number;\n        p.verified = true;\n        valid.push(p);\n      } else {\n        toDelete.push(p);\n      }\n    }\n    console.log(`Twilio changed ${changedNum} phone numbers to full num`);\n    await PhoneNotifModel.save(valid);\n\n    // Delete and make sure to disable phonenotif for user\n    console.log(\n      'deleting phone notifs: ',\n      toDelete.map((d) => d.phoneNumber),\n    );\n    if (toDelete.length) {\n      await PhoneNotifModel.delete(toDelete.map((d) => d.id));\n    }\n\n    const usersToDisable = (\n      await UserModel.find({\n        where: { phoneNotifsEnabled: true },\n        relations: ['phoneNotif'],\n      })\n    ).filter((u) => !u.phoneNotif);\n    usersToDisable.forEach((u) => (u.phoneNotifsEnabled = false));\n\n    await UserModel.save(usersToDisable);\n    console.log(`disabled phonenotifs for ${usersToDisable.length} users`);\n  }\n}\n","import { Injectable } from '@nestjs/common';\nimport { Command } from 'nestjs-command';\nimport { QuestionModel } from 'question/question.entity';\n\n@Injectable()\nexport class BackfillQuestionGroupable {\n  @Command({\n    command: 'backfill:question-groupable',\n    describe: 'Fills in groupable column for old Questions',\n    autoExit: true,\n  })\n  async fix(): Promise<void> {\n    const questions = await QuestionModel.find();\n\n    const questionsToUpdate = questions.filter((q) => q.groupable === null);\n    questionsToUpdate.forEach((q) => (q.groupable = false));\n\n    await QuestionModel.save(questions);\n    console.log(\n      `Filled in groupable for ${questionsToUpdate.length} questions`,\n    );\n  }\n}\n","import { Injectable } from '@nestjs/common';\nimport { Command } from 'nestjs-command';\nimport { UserModel } from 'profile/user.entity';\n\n@Injectable()\nexport class BackfillUserInsights {\n  @Command({\n    command: 'backfill:user-insights',\n    describe: \"sets a user's hidden insights attribute to the empty list\",\n    autoExit: true,\n  })\n  async copy(): Promise<void> {\n    await UserModel.createQueryBuilder()\n      .update()\n      .set({ hideInsights: [] })\n      .callListeners(false)\n      .execute();\n    console.log(`Updated ${await UserModel.count()} users`);\n  }\n}\n","import { Injectable } from '@nestjs/common';\nimport { Command } from 'nestjs-command';\nimport { UserModel } from 'profile/user.entity';\n\n@Injectable()\nexport class BackfillMakeEmptyPhotoURLNull {\n  @Command({\n    command: 'backfill:make-empty-photoURL-null',\n    describe: 'changes empty string photoURLs to null',\n    autoExit: true,\n  })\n  async fix(): Promise<void> {\n    let countOfChanged = 0;\n\n    const users = await UserModel.find();\n    users.forEach((user) => {\n      if (user.photoURL === '') {\n        user.photoURL = null;\n        countOfChanged += 1;\n      }\n    });\n\n    await UserModel.save(users);\n\n    console.log(`Updated names for ${countOfChanged} users`);\n  }\n}\n","module.exports = require(\"nestjs-redis\");","import { Module, HttpModule } from '@nestjs/common';\nimport { ReleaseNotesController } from './release-notes.controller';\n\n@Module({\n  controllers: [ReleaseNotesController],\n  providers: [],\n  imports: [\n    HttpModule.registerAsync({\n      useFactory: () => ({\n        timeout: 5000,\n        maxRedirects: 5,\n      }),\n    }),\n  ],\n})\nexport class ReleaseNotesModule {}\n","import { ERROR_MESSAGES, GetReleaseNotesResponse } from '@koh/common';\nimport {\n  Controller,\n  Get,\n  HttpService,\n  InternalServerErrorException,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from 'guards/jwt-auth.guard';\nimport { Connection } from 'typeorm';\n\n@Controller('release_notes')\n@UseGuards(JwtAuthGuard)\nexport class ReleaseNotesController {\n  constructor(\n    private connection: Connection,\n    private httpService: HttpService,\n  ) {}\n\n  @Get()\n  async getReleaseNotes(): Promise<GetReleaseNotesResponse> {\n    const response: GetReleaseNotesResponse = {\n      lastUpdatedUnixTime: null,\n      releaseNotes: null,\n    };\n    const request = await this.httpService\n      .get(\n        'https://notion-api.splitbee.io/v1/page/abba246bfa0847baa2706ab30d0c6c7d',\n      )\n      .toPromise();\n    const data = request.data;\n    try {\n      const timeText =\n        data[process.env.RELEASE_NOTE_TIMESTAMP_ID]?.value?.properties\n          ?.title[0][0];\n      response.lastUpdatedUnixTime = timeText.split('Unix ')[1] * 1000;\n    } catch (e) {\n      throw new InternalServerErrorException(\n        ERROR_MESSAGES.releaseNotesController.releaseNotesTime(e),\n      );\n    }\n    // Remove the time block and page link block from page\n    data[process.env.RELEASE_NOTE_TIMESTAMP_ID].value.properties.title = [];\n    data[process.env.WANT_TO_SEE_MORE_ID].value.properties.title = [];\n    response.releaseNotes = data;\n    return response;\n  }\n}\n","import { config } from 'dotenv';\nimport { AdminUserModel } from './src/admin/admin-user.entity';\nimport { CourseModel } from './src/course/course.entity';\nimport { OfficeHourModel } from './src/course/office-hour.entity';\nimport { SemesterModel } from './src/semester/semester.entity';\nimport { CourseSectionMappingModel } from './src/login/course-section-mapping.entity';\nimport { DesktopNotifModel } from './src/notification/desktop-notif.entity';\nimport { PhoneNotifModel } from './src/notification/phone-notif.entity';\nimport { EventModel } from './src/profile/event-model.entity';\nimport { UserCourseModel } from './src/profile/user-course.entity';\nimport { UserModel } from './src/profile/user.entity';\nimport { QuestionModel } from './src/question/question.entity';\nimport { QuestionGroupModel } from './src/question/question-group.entity';\nimport { QueueModel } from './src/queue/queue.entity';\nimport { AlertModel } from './src/alerts/alerts.entity';\nconfig();\n\n// Options only used whe run via CLI\nconst inCLI = {\n  migrations: ['migration/*.ts'],\n  cli: {\n    migrationsDir: 'migration',\n  },\n};\n\nconst typeorm = {\n  type: 'postgres',\n  url: process.env.DB_URL || 'postgres://postgres@localhost:5432/dev',\n  synchronize: process.env.NODE_ENV !== 'production',\n  entities: [\n    CourseModel,\n    CourseSectionMappingModel,\n    OfficeHourModel,\n    SemesterModel,\n    UserModel,\n    UserCourseModel,\n    QuestionModel,\n    QueueModel,\n    DesktopNotifModel,\n    PhoneNotifModel,\n    AdminUserModel,\n    EventModel,\n    QuestionGroupModel,\n    AlertModel,\n  ],\n  keepConnectionAlive: true,\n  logging: !!process.env.TYPEORM_LOGGING,\n  ...(!!process.env.TYPEORM_CLI ? inCLI : {}),\n};\nmodule.exports = typeorm;\n","module.exports = require(\"dotenv\");","import { Entity, PrimaryGeneratedColumn, BaseEntity, Column } from 'typeorm';\nimport { hashSync } from 'bcrypt';\n\n/**\n * Admin users are totally separate from regular users and can only be created from command line.\n * `yarn cli admin:create`\n */\n@Entity('admin_user_model')\nexport class AdminUserModel extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  setPassword(password: string): void {\n    this.passwordHash = hashSync(password, 5);\n  }\n\n  @Column({ length: 128, unique: true, nullable: false })\n  username: string;\n\n  @Column({ length: 128, nullable: false })\n  passwordHash: string;\n}\n","module.exports = require(\"bcrypt\");","import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  BaseEntity,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { CourseModel } from '../course/course.entity';\n\n@Entity('course_section_mapping_model')\nexport class CourseSectionMappingModel extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  // This is the course name that is sent to us from the khoury amin backend\n  @Column()\n  genericCourseName: string;\n\n  @Column()\n  section: number;\n\n  // Represents the course that this maps to\n  @ManyToOne((type) => CourseModel)\n  @JoinColumn({ name: 'courseId' })\n  course: CourseModel;\n\n  @Column({ nullable: true })\n  courseId: number;\n}\n","import { Module } from '@nestjs/common';\nimport {\n  AdminCoreModuleFactory,\n  AdminAuthModuleFactory,\n  DefaultAdminSite,\n} from 'nestjs-admin';\nimport { adminCredentialValidator } from './credentialValidator';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AdminUserModel } from './admin-user.entity';\nimport {\n  CourseAdmin,\n  QueueAdmin,\n  UserAdmin,\n  UserCourseAdmin,\n  CourseSectionMappingAdmin,\n  SemesterAdmin,\n} from './admin-entities';\nimport { AdminCommand } from './admin.command';\nimport * as session from 'express-session';\nimport * as connectRedis from 'connect-redis';\nimport { createClient } from 'redis';\n\nconst redisClient = createClient();\nconst RedisStore = connectRedis(session);\n\n// This stops redisClient from causing jest tests to hang from an open handler\n// We only use redisClient in the admin module, which isn't needed for our tests\nif (process.env.NODE_ENV === 'test') {\n  redisClient.quit();\n}\n\nconst CoreModule = AdminCoreModuleFactory.createAdminCoreModule({\n  appConfig: {\n    session: {\n      store: new RedisStore({ client: redisClient }),\n    },\n  },\n});\nconst AuthModule = AdminAuthModuleFactory.createAdminAuthModule({\n  adminCoreModule: CoreModule,\n  credentialValidator: adminCredentialValidator, // how do you validate credentials\n  imports: [TypeOrmModule.forFeature([AdminUserModel])], // what modules export the dependencies of the credentialValidator available\n  providers: [],\n});\n\n@Module({\n  imports: [CoreModule, AuthModule],\n  exports: [CoreModule, AuthModule],\n  providers: [AdminCommand],\n})\nexport class AdminModule {\n  constructor(private readonly adminSite: DefaultAdminSite) {\n    adminSite.register('Course', CourseAdmin);\n    adminSite.register('User', UserAdmin);\n    adminSite.register('UserCourse', UserCourseAdmin);\n    adminSite.register('Queue', QueueAdmin);\n    adminSite.register('CourseSectionMapping', CourseSectionMappingAdmin);\n    adminSite.register('Semester', SemesterAdmin);\n  }\n}\n","module.exports = require(\"nestjs-admin\");","import { compare } from 'bcrypt';\nimport { AdminUserModel } from './admin-user.entity';\n\nexport const adminCredentialValidator = {\n  inject: [],\n  useFactory: () => {\n    return async function validateCredentials(\n      username: string,\n      password: string,\n    ): Promise<AdminUserModel | null> {\n      const user = await AdminUserModel.findOne({ username });\n      if (user) {\n        if (await compare(password, user.passwordHash)) {\n          return user;\n        }\n      }\n      return null;\n    };\n  },\n};\n","import { AdminEntity } from 'nestjs-admin';\nimport { CourseModel } from '../course/course.entity';\nimport { QueueModel } from '../queue/queue.entity';\nimport { UserModel } from '../profile/user.entity';\nimport { CourseSectionMappingModel } from '../login/course-section-mapping.entity';\nimport { UserCourseModel } from 'profile/user-course.entity';\nimport { SemesterModel } from 'semester/semester.entity';\n\nexport class CourseAdmin extends AdminEntity {\n  entity = CourseModel;\n  listDisplay = ['id', 'name'];\n  fields = ['id', 'name', 'icalURL', 'semesterId', 'enabled', 'timezone'];\n}\n\nexport class QueueAdmin extends AdminEntity {\n  entity = QueueModel;\n  listDisplay = ['id', 'room', 'courseId'];\n}\n\nexport class UserAdmin extends AdminEntity {\n  entity = UserModel;\n  listDisplay = ['id', 'email', 'name'];\n  searchFields = ['email', 'name'];\n  fields = [\n    'id',\n    'email',\n    'name',\n    'desktopNotifsEnabled',\n    'phoneNotifsEnabled',\n    'queues',\n  ];\n}\n\nexport class UserCourseAdmin extends AdminEntity {\n  entity = UserCourseModel;\n  listDisplay = ['id', 'userId', 'courseId'];\n}\n\nexport class CourseSectionMappingAdmin extends AdminEntity {\n  entity = CourseSectionMappingModel;\n  listDisplay = ['id', 'genericCourseName', 'section', 'courseId'];\n}\n\nexport class SemesterAdmin extends AdminEntity {\n  entity = SemesterModel;\n  listDisplay = ['id', 'season', 'year'];\n}\n","import { Command, Positional } from 'nestjs-command';\nimport { Injectable } from '@nestjs/common';\nimport { AdminUserModel } from './admin-user.entity';\nimport { question, keyInYN } from 'readline-sync';\n\n@Injectable()\nexport class AdminCommand {\n  @Command({\n    command: 'create:admin <username>',\n    describe: 'create an admin user',\n    autoExit: true,\n  })\n  async create(\n    @Positional({\n      name: 'username',\n      describe: 'the admin username',\n      type: 'string',\n    })\n    username: string,\n  ): Promise<void> {\n    let user = await AdminUserModel.findOne({ username });\n    if (user) {\n      const changePassword = keyInYN(\n        `User ${username} already exists. Do you want to change their password?`,\n      );\n      if (!changePassword) {\n        return;\n      }\n    } else {\n      user = AdminUserModel.create({ username });\n    }\n    const password: string = question('Password: ', {\n      hideEchoBack: true,\n    });\n    user.setPassword(password);\n    await user.save();\n    console.log(`Created user: ${user.username}`);\n  }\n}\n","module.exports = require(\"readline-sync\");","module.exports = require(\"express-session\");","module.exports = require(\"connect-redis\");","module.exports = require(\"redis\");","import { CacheModule, Module } from '@nestjs/common';\nimport { QueueModule } from '../queue/queue.module';\nimport { CourseController } from './course.controller';\nimport { CourseService } from './course.service';\nimport { HeatmapService } from './heatmap.service';\nimport { ICalCommand } from './ical.command';\nimport { IcalService } from './ical.service';\n\n@Module({\n  controllers: [CourseController],\n  imports: [QueueModule, CacheModule.register()],\n  providers: [ICalCommand, IcalService, HeatmapService, CourseService],\n})\nexport class CourseModule {}\n","import { Module } from '@nestjs/common';\nimport { QueueController } from './queue.controller';\nimport { QueueCleanService } from './queue-clean/queue-clean.service';\nimport { SSEModule } from 'sse/sse.module';\nimport { QueueService } from './queue.service';\nimport { QueueSSEService } from './queue-sse.service';\nimport { QueueSubscriber } from './queue.subscriber';\n\n@Module({\n  controllers: [QueueController],\n  providers: [\n    QueueCleanService,\n    QueueService,\n    QueueSSEService,\n    QueueSubscriber,\n  ],\n  exports: [QueueCleanService, QueueSSEService],\n  imports: [SSEModule],\n})\nexport class QueueModule {}\n","import {\n  ERROR_MESSAGES,\n  GetQueueResponse,\n  ListQuestionsResponse,\n  Role,\n  UpdateQueueParams,\n} from '@koh/common';\nimport {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Get,\n  HttpException,\n  HttpStatus,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n  Res,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { Response } from 'express';\nimport { UserId } from 'decorators/user.decorator';\nimport { Connection } from 'typeorm';\nimport { JwtAuthGuard } from '../guards/jwt-auth.guard';\nimport { Roles } from '../decorators/roles.decorator';\nimport { QueueCleanService } from './queue-clean/queue-clean.service';\nimport { QueueRole } from '../decorators/queue-role.decorator';\nimport { QueueRolesGuard } from '../guards/queue-role.guard';\nimport { QueueSSEService } from './queue-sse.service';\nimport { QueueModel } from './queue.entity';\nimport { QueueService } from './queue.service';\n\n@Controller('queues')\n@UseGuards(JwtAuthGuard, QueueRolesGuard)\n@UseInterceptors(ClassSerializerInterceptor)\nexport class QueueController {\n  constructor(\n    private connection: Connection,\n    private queueSSEService: QueueSSEService,\n    private queueCleanService: QueueCleanService,\n    private queueService: QueueService,\n  ) {}\n\n  @Get(':queueId')\n  @Roles(Role.TA, Role.PROFESSOR, Role.STUDENT)\n  async getQueue(@Param('queueId') queueId: number): Promise<GetQueueResponse> {\n    try {\n      return this.queueService.getQueue(queueId);\n    } catch (err) {\n      console.error(err);\n      throw new HttpException(\n        ERROR_MESSAGES.queueController.getQueue,\n        HttpStatus.NOT_FOUND,\n      );\n    }\n  }\n\n  @Get(':queueId/questions')\n  @Roles(Role.TA, Role.PROFESSOR, Role.STUDENT)\n  async getQuestions(\n    @Param('queueId') queueId: number,\n    @QueueRole() role: Role,\n    @UserId() userId: number,\n  ): Promise<ListQuestionsResponse> {\n    try {\n      const questions = await this.queueService.getQuestions(queueId);\n      return await this.queueService.personalizeQuestions(\n        queueId,\n        questions,\n        userId,\n        role,\n      );\n    } catch (err) {\n      console.error(err);\n      throw new HttpException(\n        ERROR_MESSAGES.queueController.getQuestions,\n        HttpStatus.NOT_FOUND,\n      );\n    }\n  }\n\n  @Patch(':queueId')\n  @Roles(Role.TA, Role.PROFESSOR)\n  async updateQueue(\n    @Param('queueId') queueId: number,\n    @Body() body: UpdateQueueParams,\n  ): Promise<QueueModel> {\n    const queue = await this.queueService.getQueue(queueId);\n    if (queue === undefined) {\n      throw new NotFoundException();\n    }\n    queue.notes = body.notes;\n    queue.allowQuestions = body.allowQuestions;\n    try {\n      await queue.save();\n    } catch (err) {\n      console.error(err);\n      throw new HttpException(\n        ERROR_MESSAGES.queueController.saveQueue,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n    return queue;\n  }\n\n  @Post(':queueId/clean')\n  @Roles(Role.TA, Role.PROFESSOR)\n  async cleanQueue(@Param('queueId') queueId: number): Promise<void> {\n    // Clean up queue if necessary\n    try {\n      setTimeout(async () => {\n        await this.queueCleanService.cleanQueue(queueId, true);\n        await this.queueSSEService.updateQueue(queueId);\n      });\n    } catch (err) {\n      console.error(err);\n      throw new HttpException(\n        ERROR_MESSAGES.queueController.cleanQueue,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  // Endpoint to send frontend receive server-sent events when queue changes\n  @Get(':queueId/sse')\n  sendEvent(\n    @Param('queueId') queueId: number,\n    @QueueRole() role: Role,\n    @UserId() userId: number,\n    @Res() res: Response,\n  ): void {\n    res.set({\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      'X-Accel-Buffering': 'no',\n      Connection: 'keep-alive',\n    });\n\n    try {\n      this.queueSSEService.subscribeClient(queueId, res, { role, userId });\n    } catch (err) {\n      console.error(err);\n    }\n  }\n}\n","import {\n  ClosedQuestionStatus,\n  LimboQuestionStatus,\n  OpenQuestionStatus,\n} from '@koh/common';\nimport { Injectable } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport async from 'async';\nimport { OfficeHourModel } from 'course/office-hour.entity';\nimport { EventModel, EventType } from 'profile/event-model.entity';\nimport { UserCourseModel } from 'profile/user-course.entity';\nimport { Connection, LessThanOrEqual, MoreThanOrEqual } from 'typeorm';\nimport { QuestionModel } from '../../question/question.entity';\nimport { QueueModel } from '../queue.entity';\nimport moment = require('moment');\n\n/**\n * Clean the queue and mark stale\n */\n@Injectable()\nexport class QueueCleanService {\n  constructor(private connection: Connection) {}\n\n  @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\n  async cleanAllQueues(): Promise<void> {\n    const queuesWithOpenQuestions: QueueModel[] =\n      await QueueModel.getRepository()\n        .createQueryBuilder('queue_model')\n        .leftJoinAndSelect('queue_model.questions', 'question')\n        .where('question.status IN (:...status)', {\n          status: [\n            ...Object.values(OpenQuestionStatus),\n            ...Object.values(LimboQuestionStatus),\n          ],\n        })\n        .getMany();\n\n    // Clean 1 queue at a time\n    await async.mapLimit(\n      queuesWithOpenQuestions,\n      1,\n      async (queue) => await this.cleanQueue(queue.id),\n    );\n  }\n\n  @Cron(CronExpression.EVERY_DAY_AT_3AM)\n  public async checkoutAllStaff(): Promise<void> {\n    const queuesWithCheckedInStaff: QueueModel[] =\n      await QueueModel.getRepository().find({ relations: ['staffList'] });\n\n    queuesWithCheckedInStaff.forEach(async (queue) => {\n      if (!(await queue.areThereOfficeHoursRightNow())) {\n        await queue.staffList.forEach(async (ta) => {\n          await EventModel.create({\n            time: new Date(),\n            eventType: EventType.TA_CHECKED_OUT_FORCED,\n            userId: ta.id,\n            courseId: queue.courseId,\n            queueId: queue.id,\n          }).save();\n        });\n        queue.staffList = [];\n      }\n    });\n    await QueueModel.save(queuesWithCheckedInStaff);\n  }\n\n  // TODO: move this to a course-clean service or something. This is just here because\n  // this feature was pushed out in a time crunch.\n  @Cron(CronExpression.EVERY_DAY_AT_3AM)\n  public async cleanSelfEnrollOverrides(): Promise<void> {\n    await UserCourseModel.delete({\n      expires: true,\n    });\n  }\n\n  public async cleanQueue(queueId: number, force?: boolean): Promise<void> {\n    const queue = await QueueModel.findOne(queueId, {\n      relations: ['staffList'],\n    });\n\n    if (force || !(await queue.checkIsOpen())) {\n      await this.unsafeClean(queue.id);\n    }\n  }\n\n  // Should we consider cleaning the queue?\n  //  Checks if there are no staff, open questions and that there aren't any office hours soon\n  public async shouldCleanQueue(queue: QueueModel): Promise<boolean> {\n    if (queue.staffList.length === 0) {\n      // Last TA to checkout, so check if we might want to clear the queue\n      const areAnyQuestionsOpen =\n        (await QuestionModel.inQueueWithStatus(\n          queue.id,\n          Object.values(OpenQuestionStatus),\n        ).getCount()) > 0;\n      if (areAnyQuestionsOpen) {\n        const soon = moment().add(15, 'minutes').toDate();\n        const areOfficeHourSoon =\n          (await OfficeHourModel.count({\n            where: {\n              startTime: LessThanOrEqual(soon),\n              endTime: MoreThanOrEqual(soon),\n            },\n          })) > 0;\n        if (!areOfficeHourSoon) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private async unsafeClean(queueId: number): Promise<void> {\n    const questions = await QuestionModel.inQueueWithStatus(queueId, [\n      ...Object.values(OpenQuestionStatus),\n      ...Object.values(LimboQuestionStatus),\n    ]).getMany();\n\n    questions.forEach((q: QuestionModel) => {\n      q.status = ClosedQuestionStatus.Stale;\n      q.closedAt = new Date();\n    });\n\n    await QuestionModel.save(questions);\n  }\n}\n","module.exports = require(\"async\");","module.exports = require(\"moment\");","import {\n  createParamDecorator,\n  ExecutionContext,\n  NotFoundException,\n} from '@nestjs/common';\nimport { UserModel } from 'profile/user.entity';\nimport { QueueModel } from '../queue/queue.entity';\n\nexport const QueueRole = createParamDecorator(\n  async (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const queue = await QueueModel.findOne(request.params.queueId);\n    const courseId = queue?.courseId;\n    const user = await UserModel.findOne(request.user.userId, {\n      relations: ['courses'],\n    });\n\n    const userCourse = user.courses.find((course) => {\n      return Number(course.courseId) === Number(courseId);\n    });\n\n    if (!userCourse) {\n      throw new NotFoundException(\n        \"cannot read propery 'role ' of undefined on user: \" + user.id + user,\n      );\n    }\n    return userCourse.role;\n  },\n);\n","import { ERROR_MESSAGES } from '@koh/common';\nimport { Injectable, NotFoundException } from '@nestjs/common';\nimport { RolesGuard } from './role.guard';\nimport { UserModel } from '../profile/user.entity';\nimport { QueueModel } from '../queue/queue.entity';\n\n@Injectable()\nexport class QueueRolesGuard extends RolesGuard {\n  async setupData(\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    request: any,\n  ): Promise<{ courseId: number; user: UserModel }> {\n    const queue = await QueueModel.findOne(request.params.queueId);\n    if (!queue) {\n      throw new NotFoundException(ERROR_MESSAGES.queueRoleGuard.queueNotFound);\n    }\n    const courseId = queue.courseId;\n    const user = await UserModel.findOne(request.user.userId, {\n      relations: ['courses'],\n    });\n\n    return { courseId, user };\n  }\n}\n","import { ERROR_MESSAGES } from '@koh/common';\nimport {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { UserModel } from '../profile/user.entity';\n\nexport interface RolesGuard {\n  canActivate(context: ExecutionContext): Promise<boolean>;\n\n  matchRoles(roles: string[], user: UserModel, courseId: number): boolean;\n\n  setupData(request: any): Promise<{ courseId: number; user: UserModel }>;\n}\n\n@Injectable()\nexport abstract class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const roles = this.reflector.get<string[]>('roles', context.getHandler());\n    if (!roles) {\n      return true;\n    }\n    const request = context.switchToHttp().getRequest();\n    const { courseId, user } = await this.setupData(request);\n\n    if (!user) {\n      throw new UnauthorizedException(ERROR_MESSAGES.roleGuard.notLoggedIn);\n    }\n\n    if (!courseId) {\n      throw new NotFoundException(ERROR_MESSAGES.roleGuard.noCourseIdFound);\n    }\n\n    return this.matchRoles(roles, user, courseId);\n  }\n\n  matchRoles(roles: string[], user: UserModel, courseId: number): boolean {\n    const userCourse = user.courses.find((course) => {\n      return Number(course.courseId) === Number(courseId);\n    });\n\n    if (!userCourse) {\n      throw new NotFoundException(ERROR_MESSAGES.roleGuard.notInCourse);\n    }\n\n    const remaining = roles.filter((role) => {\n      return userCourse.role.toString() === role;\n    });\n\n    if (remaining.length <= 0) {\n      throw new UnauthorizedException(\n        ERROR_MESSAGES.roleGuard.mustBeRoleToJoinCourse(roles),\n      );\n    }\n\n    return remaining.length > 0;\n  }\n}\n","import { Role, SSEQueueResponse } from '@koh/common';\nimport { Injectable } from '@nestjs/common';\nimport { Response } from 'express';\nimport { throttle } from 'lodash';\nimport { SSEService } from 'sse/sse.service';\nimport { QueueService } from './queue.service';\n\ntype QueueClientMetadata = { userId: number; role: Role };\n\nconst idToRoom = (queueId: number) => `q-${queueId}`;\n/**\n * Handle sending queue sse events\n */\n@Injectable()\nexport class QueueSSEService {\n  constructor(\n    private queueService: QueueService,\n    private sseService: SSEService<QueueClientMetadata>,\n  ) {}\n\n  subscribeClient(\n    queueId: number,\n    res: Response,\n    metadata: QueueClientMetadata,\n  ): void {\n    this.sseService.subscribeClient(idToRoom(queueId), res, metadata);\n  }\n\n  // Send event with new questions, but no more than once a second\n  updateQuestions = this.throttleUpdate(async (queueId) => {\n    const questions = await this.queueService.getQuestions(queueId);\n    if (questions) {\n      this.sendToRoom(queueId, async ({ role, userId }) => ({\n        questions: await this.queueService.personalizeQuestions(\n          queueId,\n          questions,\n          userId,\n          role,\n        ),\n      }));\n    }\n  });\n\n  updateQueue = this.throttleUpdate(async (queueId) => {\n    const queue = await this.queueService.getQueue(queueId);\n    if (queue) {\n      await this.sendToRoom(queueId, async () => ({ queue }));\n    }\n  });\n\n  private async sendToRoom(\n    queueId: number,\n    data: (metadata: QueueClientMetadata) => Promise<SSEQueueResponse>,\n  ) {\n    await this.sseService.sendEvent(idToRoom(queueId), data);\n  }\n\n  private throttleUpdate(updateFunction: (queueId: number) => Promise<void>) {\n    return throttle(\n      async (queueId: number) => {\n        try {\n          await updateFunction(queueId);\n        } catch (e) {}\n      },\n      1000,\n      {\n        leading: false,\n        trailing: true,\n      },\n    );\n  }\n}\n","import { Injectable, OnModuleDestroy } from '@nestjs/common';\nimport { each } from 'async';\nimport { serialize } from 'class-transformer';\nimport { Response } from 'express';\nimport { RedisService } from 'nestjs-redis';\nimport { ERROR_MESSAGES } from '@koh/common';\nimport * as Sentry from '@sentry/node';\n\n/**\n * A connection to a particular frontend client\n */\ninterface Connection {\n  res: Response;\n  cleanup: () => Promise<void>;\n}\n\ninterface RedisClientInfo<T> {\n  clientId: number;\n  metadata: T;\n}\n/**\n * T is metadata associated with each Client\n *\n * Low level abstraction for sending SSE to \"rooms\" of clients.\n * Probably don't use this directly, and wrap it in a service specific to that event source\n *\n * This handles when there's multiple backend instances by assigning unique client ids to each connection.\n * When one instance wants to send to a client, it publishes to a Redis channel for the client.\n * All instances listen to Redis, and if they are the one managing that client, they send the msg.\n *\n * Rooms with client metadata are also maintained in Redis key/value store.\n */\n@Injectable()\nexport class SSEService<T> implements OnModuleDestroy {\n  // Clients connected to this instance of the backend\n  private directConnnections: Record<string, Connection> = {};\n\n  constructor(private readonly redisService: RedisService) {\n    const redisSub = this.redisService.getClient('sub');\n\n    if (!redisSub) {\n      Sentry.captureException(ERROR_MESSAGES.sseService.getSubClient);\n      throw new Error(ERROR_MESSAGES.sseService.getSubClient);\n    }\n\n    // If channel is managed by this instance, send the message to the Response object.\n    redisSub.on('message', (channel, message) => {\n      const id = /sse::client-(\\d+)/.exec(channel);\n      if (id && id[1] in this.directConnnections) {\n        this.directConnnections[id[1]].res.write(`data: ${message}\\n\\n`);\n      }\n    });\n  }\n\n  async onModuleDestroy(): Promise<void> {\n    // Cleanup all direct connections by removing them from the rooms in redis.\n    await each(Object.values(this.directConnnections), async (conn) => {\n      await conn.cleanup().catch((err) => {\n        console.error(ERROR_MESSAGES.sseService.cleanupConnection);\n        console.error(err);\n        Sentry.captureException(err);\n      });\n    }).catch((err) => {\n      console.error(ERROR_MESSAGES.sseService.moduleDestroy);\n      console.error(err);\n      Sentry.captureException(err);\n    });\n  }\n\n  /**\n   * Get redis channel name from client id\n   */\n  private idToChannel(clientId: number) {\n    return `sse::client-${clientId}`;\n  }\n\n  /** Add a client to a room */\n  async subscribeClient(\n    room: string,\n    res: Response,\n    metadata: T,\n  ): Promise<void> {\n    const redisSub = this.redisService.getClient('sub');\n    const redis = this.redisService.getClient('db');\n\n    if (!redisSub) {\n      Sentry.captureException(ERROR_MESSAGES.sseService.getSubClient);\n      throw new Error(ERROR_MESSAGES.sseService.getSubClient);\n    }\n    if (!redis) {\n      Sentry.captureException(ERROR_MESSAGES.sseService.getDBClient);\n      throw new Error(ERROR_MESSAGES.sseService.getDBClient);\n    }\n\n    // Keep track of responses so we can send sse through them\n    const clientId = await redis.incr('sse::client::id').catch((err) => {\n      console.error(ERROR_MESSAGES.sseService.clientIdSubscribe);\n      console.error(err);\n      Sentry.captureException(err);\n    });\n    // Subscribe to the redis channel for this client\n\n    if (!clientId) {\n      Sentry.captureException(ERROR_MESSAGES.sseService.clientIdNotFound);\n      throw new Error(ERROR_MESSAGES.sseService.clientIdNotFound);\n    }\n\n    await redisSub.subscribe(this.idToChannel(clientId)).catch((err) => {\n      console.error(ERROR_MESSAGES.sseService.subscribe);\n      console.error(err);\n      Sentry.captureException(err);\n    });\n\n    // Add to room\n    const clientInfo = JSON.stringify({\n      clientId,\n      metadata: metadata,\n    } as RedisClientInfo<T>);\n    await redis.sadd(room, clientInfo).catch((err) => {\n      console.error(err);\n      Sentry.captureException(err);\n    });\n\n    // Keep track of response object in direct connections\n    this.directConnnections[clientId] = {\n      res,\n      cleanup: async () => {\n        // Remove from the redis room\n        await redis.srem(room, clientInfo).catch((err) => {\n          console.error(ERROR_MESSAGES.sseService.removeFromRoom);\n          console.error(err);\n        });\n        await redisSub.unsubscribe(this.idToChannel(clientId)).catch((err) => {\n          console.error(ERROR_MESSAGES.sseService.unsubscribe);\n          console.error(err);\n          Sentry.captureException(err);\n        });\n        res.end();\n      },\n    };\n\n    // Ack so frontend knows we're connected\n    res.write('\\n');\n\n    // Remove dead connections!\n    res.socket.on('end', async () => {\n      await this.directConnnections[clientId].cleanup().catch((err) => {\n        console.error(ERROR_MESSAGES.sseService.directConnections);\n        console.error(err);\n        Sentry.captureException(err);\n      });\n      delete this.directConnnections[clientId];\n    });\n  }\n\n  /** Send some data to everyone in a room */\n  async sendEvent<D>(\n    room: string,\n    payload: (metadata: T) => Promise<D>,\n  ): Promise<void> {\n    const redisPub = this.redisService.getClient('pub');\n    const redis = this.redisService.getClient('db');\n\n    if (!redisPub) {\n      Sentry.captureException(ERROR_MESSAGES.sseService.getPubClient);\n      throw new Error(ERROR_MESSAGES.sseService.getPubClient);\n    }\n\n    if (!redis) {\n      Sentry.captureException(ERROR_MESSAGES.sseService.getDBClient);\n      throw new Error(ERROR_MESSAGES.sseService.getDBClient);\n    }\n\n    const roomInfo = await redis.smembers(room).catch((err) => {\n      console.error(ERROR_MESSAGES.sseService.roomMembers);\n      console.error(err);\n      Sentry.captureException(err);\n    });\n    if (room && roomInfo) {\n      const clients: RedisClientInfo<T>[] = roomInfo.map((s) => JSON.parse(s));\n      console.log(`sending sse to ${clients.length} clients in ${room}`);\n      console.time(`sending sse time: `);\n      await each(clients, async ({ clientId, metadata }) => {\n        const toSend = serialize(\n          await payload(metadata).catch((err) => {\n            console.error(ERROR_MESSAGES.sseService.serialize);\n            console.error(err);\n            Sentry.captureException(err);\n          }),\n        );\n        await redisPub\n          .publish(this.idToChannel(clientId), toSend)\n          .catch((err) => {\n            console.error(ERROR_MESSAGES.sseService.publish);\n            console.error(err);\n            Sentry.captureException(err);\n          });\n      });\n      console.timeEnd(`sending sse time: `);\n    }\n  }\n}\n","import {\n  ListQuestionsResponse,\n  OpenQuestionStatus,\n  Question,\n  QuestionGroup,\n  Role,\n  StatusInPriorityQueue,\n  StatusInQueue,\n  StatusSentToCreator,\n} from '@koh/common';\nimport { Injectable, NotFoundException } from '@nestjs/common';\nimport { classToClass } from 'class-transformer';\nimport { pick } from 'lodash';\nimport { QuestionModel } from 'question/question.entity';\nimport { Connection, In } from 'typeorm';\nimport { QueueModel } from './queue.entity';\n\n/**\n * Get data in service of the queue controller and SSE\n * WHY? To ensure data returned by endpoints is *exactly* equal to data sent by SSE\n */\n@Injectable()\nexport class QueueService {\n  constructor(private connection: Connection) {}\n\n  async getQueue(queueId: number): Promise<QueueModel> {\n    const queue = await QueueModel.findOne(queueId, {\n      relations: ['staffList'],\n    });\n    await queue.addQueueTimes();\n    await queue.checkIsOpen();\n    await queue.addQueueSize();\n\n    return queue;\n  }\n\n  async getQuestions(queueId: number): Promise<ListQuestionsResponse> {\n    // todo: Make a student and a TA version of this function, and switch which one to use in the controller\n    // for now, just return the student response\n    const queueSize = await QueueModel.count({\n      where: { id: queueId },\n    });\n    // Check that the queue exists\n    if (queueSize === 0) {\n      throw new NotFoundException();\n    }\n\n    const questionsFromDb = await QuestionModel.inQueueWithStatus(queueId, [\n      ...StatusInPriorityQueue,\n      ...StatusInQueue,\n      OpenQuestionStatus.Helping,\n    ])\n      .leftJoinAndSelect('question.creator', 'creator')\n      .leftJoinAndSelect('question.taHelped', 'taHelped')\n      .getMany();\n\n    const groupMap: Record<number, QuestionGroup> = {};\n\n    questionsFromDb.forEach((question) => {\n      if (question.groupId) {\n        if (!groupMap[question.groupId]) {\n          groupMap[question.groupId] = {\n            id: question.groupId,\n            creator: question.taHelped,\n            questions: [question],\n          };\n        } else {\n          groupMap[question.groupId].questions.push(question);\n        }\n      }\n    });\n\n    const questions = new ListQuestionsResponse();\n\n    questions.queue = questionsFromDb.filter((question) =>\n      StatusInQueue.includes(question.status as OpenQuestionStatus),\n    );\n\n    questions.questionsGettingHelp = questionsFromDb.filter(\n      (question) =>\n        question.status === OpenQuestionStatus.Helping && !question.groupId,\n    );\n\n    questions.priorityQueue = questionsFromDb.filter((question) =>\n      StatusInPriorityQueue.includes(question.status as OpenQuestionStatus),\n    );\n\n    questions.groups = Object.values(groupMap);\n\n    return questions;\n  }\n\n  /** Hide sensitive data to other students */\n  async personalizeQuestions(\n    queueId: number,\n    questions: ListQuestionsResponse,\n    userId: number,\n    role: Role,\n  ): Promise<ListQuestionsResponse> {\n    if (role === Role.STUDENT) {\n      const newLQR = new ListQuestionsResponse();\n      Object.assign(newLQR, questions);\n\n      newLQR.queue = questions.queue.map((question) => {\n        const creator =\n          question.creator.id === userId\n            ? question.creator\n            : pick(question.creator, ['id']);\n        // classToClass transformer will apply the @Excludes\n        return classToClass<Question>(\n          QuestionModel.create({ ...question, creator }),\n        );\n      });\n\n      newLQR.questionsGettingHelp = questions.questionsGettingHelp.map(\n        (question) => {\n          const creator =\n            question.creator.id === userId\n              ? question.creator\n              : pick(question.creator, ['id']);\n          // classToClass transformer will apply the @Excludes\n          return classToClass<Question>(\n            QuestionModel.create({ ...question, creator }),\n          );\n        },\n      );\n\n      newLQR.yourQuestion = await QuestionModel.findOne({\n        relations: ['creator', 'taHelped'],\n        where: {\n          creatorId: userId,\n          queueId: queueId,\n          status: In(StatusSentToCreator),\n        },\n      });\n      newLQR.priorityQueue = [];\n\n      return newLQR;\n    }\n    return questions;\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { SSEService } from './sse.service';\n\n@Module({ providers: [SSEService], exports: [SSEService] })\nexport class SSEModule {}\n","import { QueueSSEService } from '../queue/queue-sse.service';\nimport {\n  Connection,\n  EntitySubscriberInterface,\n  EventSubscriber,\n  UpdateEvent,\n} from 'typeorm';\nimport { QueueModel } from './queue.entity';\n\n@EventSubscriber()\nexport class QueueSubscriber implements EntitySubscriberInterface<QueueModel> {\n  private queueSSEService: QueueSSEService;\n  constructor(connection: Connection, queueSSEService: QueueSSEService) {\n    this.queueSSEService = queueSSEService;\n    connection.subscribers.push(this);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  listenTo() {\n    return QueueModel;\n  }\n\n  async afterUpdate(event: UpdateEvent<QueueModel>): Promise<void> {\n    if (event.entity) {\n      // Send all listening clients an update\n      await this.queueSSEService.updateQueue(event.entity.id);\n    }\n  }\n}\n","import {\n  ERROR_MESSAGES,\n  GetCourseOverridesResponse,\n  GetCourseResponse,\n  QueuePartial,\n  Role,\n  SubmitCourseParams,\n  TACheckinTimesResponse,\n  TACheckoutResponse,\n  UpdateCourseOverrideBody,\n  UpdateCourseOverrideResponse,\n} from '@koh/common';\nimport {\n  BadRequestException,\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Delete,\n  ForbiddenException,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport async from 'async';\nimport { CourseSectionMappingModel } from 'login/course-section-mapping.entity';\nimport { EventModel, EventType } from 'profile/event-model.entity';\nimport { UserCourseModel } from 'profile/user-course.entity';\nimport { Connection, getRepository, MoreThanOrEqual } from 'typeorm';\nimport { Roles } from '../decorators/roles.decorator';\nimport { User } from '../decorators/user.decorator';\nimport { CourseRolesGuard } from '../guards/course-roles.guard';\nimport { JwtAuthGuard } from '../guards/jwt-auth.guard';\nimport { UserModel } from '../profile/user.entity';\nimport { QueueCleanService } from '../queue/queue-clean/queue-clean.service';\nimport { QueueSSEService } from '../queue/queue-sse.service';\nimport { QueueModel } from '../queue/queue.entity';\nimport { SemesterModel } from '../semester/semester.entity';\nimport { CourseModel } from './course.entity';\nimport { CourseService } from './course.service';\nimport { HeatmapService } from './heatmap.service';\nimport { IcalService } from './ical.service';\nimport { OfficeHourModel } from './office-hour.entity';\nimport moment = require('moment');\n\n@Controller('courses')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class CourseController {\n  constructor(\n    private connection: Connection,\n    private queueCleanService: QueueCleanService,\n    private queueSSEService: QueueSSEService,\n    private heatmapService: HeatmapService,\n    private icalService: IcalService,\n    private courseService: CourseService,\n  ) {}\n\n  @Get(':id')\n  @UseGuards(JwtAuthGuard, CourseRolesGuard)\n  @Roles(Role.PROFESSOR, Role.STUDENT, Role.TA)\n  async get(\n    @Param('id') id: number,\n    @User() user: UserModel,\n  ): Promise<GetCourseResponse> {\n    // TODO: for all course endpoint, check if they're a student or a TA\n    const course = await CourseModel.findOne(id, {\n      relations: ['queues', 'queues.staffList'],\n    });\n\n    if (course === null || course === undefined) {\n      console.error(\n        ERROR_MESSAGES.courseController.courseNotFound + 'Course ID: ' + id,\n      );\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.courseNotFound,\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    // Use raw query for performance (avoid entity instantiation and serialization)\n\n    try {\n      course.officeHours = await getRepository(OfficeHourModel)\n        .createQueryBuilder('oh')\n        .select(['id', 'title', `\"startTime\"`, `\"endTime\"`])\n        .where('oh.courseId = :courseId', { courseId: course.id })\n        .getRawMany();\n    } catch (err) {\n      console.error(\n        ERROR_MESSAGES.courseController.courseOfficeHourError +\n          '\\n' +\n          'Error message: ' +\n          err,\n      );\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.courseOfficeHourError,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n\n    try {\n      course.heatmap = await this.heatmapService.getCachedHeatmapFor(id);\n    } catch (err) {\n      console.error(\n        ERROR_MESSAGES.courseController.courseOfficeHourError +\n          '\\n' +\n          'Error message: ' +\n          err,\n      );\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.courseHeatMapError,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n\n    const userCourseModel = await UserCourseModel.findOne({\n      where: {\n        user,\n        courseId: id,\n      },\n    });\n\n    if (userCourseModel === undefined || userCourseModel === null) {\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.courseModelError,\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (userCourseModel.role === Role.PROFESSOR) {\n      course.queues = await async.filter(\n        course.queues,\n        async (q) => (await q.checkIsOpen()) || q.isProfessorQueue,\n      );\n    } else {\n      course.queues = await async.filter(\n        course.queues,\n        async (q) => await q.checkIsOpen(),\n      );\n    }\n\n    try {\n      await async.each(course.queues, async (q) => {\n        await q.addQueueTimes();\n        await q.addQueueSize();\n      });\n    } catch (err) {\n      console.error(\n        ERROR_MESSAGES.courseController.updatedQueueError +\n          '\\n' +\n          'Error message: ' +\n          err,\n      );\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.updatedQueueError,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n\n    return course;\n  }\n\n  @Post(':id/ta_location/:room')\n  @UseGuards(JwtAuthGuard, CourseRolesGuard)\n  @Roles(Role.PROFESSOR, Role.TA)\n  async checkIn(\n    @Param('id') courseId: number,\n    @Param('room') room: string,\n    @User() user: UserModel,\n  ): Promise<QueuePartial> {\n    // First ensure user is not checked into another queue\n    const queues = await QueueModel.find({\n      where: {\n        courseId: courseId,\n      },\n      relations: ['staffList'],\n    });\n\n    if (\n      queues &&\n      queues.some((q) => q.staffList.some((staff) => staff.id === user.id))\n    ) {\n      throw new UnauthorizedException(\n        ERROR_MESSAGES.courseController.checkIn.cannotCheckIntoMultipleQueues,\n      );\n    }\n\n    let queue = await QueueModel.findOne(\n      {\n        room,\n        courseId,\n      },\n      { relations: ['staffList'] },\n    );\n\n    if (!queue) {\n      const userCourseModel = await UserCourseModel.findOne({\n        where: {\n          user,\n          courseId,\n        },\n      });\n\n      if (userCourseModel === null || userCourseModel === undefined) {\n        throw new HttpException(\n          ERROR_MESSAGES.courseController.courseModelError,\n          HttpStatus.NOT_FOUND,\n        );\n      }\n\n      if (userCourseModel.role === Role.PROFESSOR) {\n        queue = await QueueModel.create({\n          room,\n          courseId,\n          staffList: [],\n          questions: [],\n          allowQuestions: true,\n          isProfessorQueue: true, // only professors should be able to make queues\n        }).save();\n      } else {\n        throw new ForbiddenException(\n          ERROR_MESSAGES.courseController.checkIn.cannotCreateNewQueueIfNotProfessor,\n        );\n      }\n    }\n\n    if (queue.staffList.length === 0) {\n      queue.allowQuestions = true;\n    }\n\n    queue.staffList.push(user);\n    try {\n      await queue.save();\n    } catch (err) {\n      console.error(\n        ERROR_MESSAGES.courseController.saveQueueError +\n          '\\nError message: ' +\n          err,\n      );\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.saveQueueError,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n\n    try {\n      await EventModel.create({\n        time: new Date(),\n        eventType: EventType.TA_CHECKED_IN,\n        user,\n        courseId,\n        queueId: queue.id,\n      }).save();\n    } catch (err) {\n      console.error(\n        ERROR_MESSAGES.courseController.createEventError +\n          '\\nError message: ' +\n          err,\n      );\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.createEventError,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n\n    try {\n      await this.queueSSEService.updateQueue(queue.id);\n    } catch (err) {\n      console.error(\n        ERROR_MESSAGES.courseController.createEventError +\n          '\\nError message: ' +\n          err,\n      );\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.updatedQueueError,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n    return queue;\n  }\n\n  @Delete(':id/ta_location/:room')\n  @UseGuards(JwtAuthGuard, CourseRolesGuard)\n  @Roles(Role.PROFESSOR, Role.TA)\n  async checkOut(\n    @Param('id') courseId: number,\n    @Param('room') room: string,\n    @User() user: UserModel,\n  ): Promise<TACheckoutResponse> {\n    const queue = await QueueModel.findOne(\n      {\n        room,\n        courseId,\n      },\n      { relations: ['staffList'] },\n    );\n\n    if (queue === undefined || queue === null) {\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.queueNotFound,\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    queue.staffList = queue.staffList.filter((e) => e.id !== user.id);\n    if (queue.staffList.length === 0) {\n      queue.allowQuestions = false;\n    }\n    try {\n      await queue.save();\n    } catch (err) {\n      console.error(\n        ERROR_MESSAGES.courseController.saveQueueError +\n          '\\nError Message: ' +\n          err,\n      );\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.saveQueueError,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n\n    try {\n      await EventModel.create({\n        time: new Date(),\n        eventType: EventType.TA_CHECKED_OUT,\n        user,\n        courseId,\n        queueId: queue.id,\n      }).save();\n    } catch (err) {\n      console.error(\n        ERROR_MESSAGES.courseController.createEventError +\n          '\\nError message: ' +\n          err,\n      );\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.createEventError,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n    let canClearQueue = null;\n\n    try {\n      canClearQueue = await this.queueCleanService.shouldCleanQueue(queue);\n    } catch (err) {\n      console.error(err);\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.clearQueueError,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n\n    let nextOfficeHourTime = null;\n\n    // find out how long until next office hour\n    if (canClearQueue) {\n      const soon = moment().add(15, 'minutes').toDate();\n      const nextOfficeHour = await OfficeHourModel.findOne({\n        where: { startTime: MoreThanOrEqual(soon) },\n        order: {\n          startTime: 'ASC',\n        },\n      });\n      nextOfficeHourTime = nextOfficeHour?.startTime;\n    }\n    try {\n      await this.queueSSEService.updateQueue(queue.id);\n    } catch (err) {\n      console.error(\n        ERROR_MESSAGES.courseController.createEventError +\n          '\\nError message: ' +\n          err,\n      );\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.updatedQueueError,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n    return { queueId: queue.id, canClearQueue, nextOfficeHourTime };\n  }\n\n  @Post(':id/update_calendar')\n  @UseGuards(JwtAuthGuard, CourseRolesGuard)\n  @Roles(Role.PROFESSOR)\n  async updateCalendar(@Param('id') courseId: number): Promise<void> {\n    const course = await CourseModel.findOne(courseId);\n    if (course === null || course === undefined) {\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.courseNotFound,\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    try {\n      await this.icalService.updateCalendarForCourse(course);\n    } catch (err) {\n      console.error(err);\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.icalCalendarUpdate,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get(':id/course_override')\n  @UseGuards(JwtAuthGuard, CourseRolesGuard)\n  @Roles(Role.PROFESSOR)\n  async getCourseOverrides(\n    @Param('id') courseId: number,\n  ): Promise<GetCourseOverridesResponse> {\n    const resp = await UserCourseModel.find({\n      where: { courseId, override: true },\n      relations: ['user'],\n    });\n\n    if (resp === null || resp === undefined) {\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.courseModelError,\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    return {\n      data: resp.map((row) => ({\n        id: row.id,\n        role: row.role,\n        name: row.user.name,\n        email: row.user.email,\n      })),\n    };\n  }\n\n  @Post(':id/update_override')\n  @UseGuards(JwtAuthGuard, CourseRolesGuard)\n  @Roles(Role.PROFESSOR)\n  async addOverride(\n    @Param('id') courseId: number,\n    @Body() overrideInfo: UpdateCourseOverrideBody,\n  ): Promise<UpdateCourseOverrideResponse> {\n    const user = await UserModel.findOne({\n      where: { email: overrideInfo.email },\n    });\n    if (!user)\n      throw new BadRequestException(\n        ERROR_MESSAGES.courseController.noUserFound,\n      );\n    const userId = user.id;\n    let userCourse = await UserCourseModel.findOne({\n      where: { courseId, userId },\n    });\n    if (!userCourse) {\n      try {\n        userCourse = await UserCourseModel.create({\n          userId,\n          courseId,\n          role: overrideInfo.role,\n          override: true,\n        }).save();\n      } catch (err) {\n        console.error(err);\n        throw new HttpException(\n          ERROR_MESSAGES.courseController.createCourse,\n          HttpStatus.INTERNAL_SERVER_ERROR,\n        );\n      }\n    } else {\n      userCourse.override = true;\n      userCourse.role = overrideInfo.role;\n      try {\n        await userCourse.save();\n      } catch (err) {\n        console.error(err);\n        throw new HttpException(\n          ERROR_MESSAGES.courseController.updateCourse,\n          HttpStatus.INTERNAL_SERVER_ERROR,\n        );\n      }\n    }\n    return {\n      id: userCourse.id,\n      role: userCourse.role,\n      name: user.name,\n      email: user.email,\n    };\n  }\n\n  @Delete(':id/update_override')\n  @UseGuards(JwtAuthGuard, CourseRolesGuard)\n  @Roles(Role.PROFESSOR)\n  async deleteOverride(\n    @Param('id') courseId: number,\n    @Body() overrideInfo: UpdateCourseOverrideBody,\n  ): Promise<void> {\n    const user = await UserModel.findOne({\n      where: { email: overrideInfo.email },\n    });\n    if (!user)\n      throw new BadRequestException(\n        ERROR_MESSAGES.courseController.noUserFound,\n      );\n    const userId = user.id;\n    const userCourse = await UserCourseModel.findOne({\n      where: { courseId, userId, override: true },\n    });\n    if (!userCourse) {\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.courseNotFound,\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    try {\n      await UserCourseModel.remove(userCourse);\n    } catch (err) {\n      console.error(err);\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.removeCourse,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Post('submit_course')\n  async submitCourse(@Body() body: SubmitCourseParams): Promise<void> {\n    if (body.password !== process.env.APPLY_PASSWORD) {\n      throw new UnauthorizedException(\n        ERROR_MESSAGES.courseController.invalidApplyURL,\n      );\n    }\n\n    const season = body.semester.split(' ')[0];\n    const year = parseInt(body.semester.split(' ')[1]);\n\n    const semester = await SemesterModel.findOne({\n      where: { season, year },\n    });\n    if (!semester)\n      throw new BadRequestException(\n        ERROR_MESSAGES.courseController.noSemesterFound,\n      );\n\n    let course = null;\n    try {\n      // create the submitted course\n      course = await CourseModel.create({\n        name: body.name,\n        coordinator_email: body.coordinator_email,\n        icalURL: body.icalURL,\n        semesterId: semester.id,\n        enabled: false,\n        pending: true,\n        timezone: body.timezone,\n      }).save();\n    } catch (err) {\n      console.error(err);\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.createCourse,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n\n    try {\n      // create CourseSectionMappings for each unique submitted section number\n      new Set(body.sections).forEach(async (section) => {\n        await CourseSectionMappingModel.create({\n          genericCourseName: body.name,\n          section,\n          courseId: course.id,\n        }).save();\n      });\n    } catch (err) {\n      console.error(err);\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.createCourseMappings,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get(':id/ta_check_in_times')\n  @UseGuards(JwtAuthGuard, CourseRolesGuard)\n  @Roles(Role.PROFESSOR)\n  async taCheckinTimes(\n    @Param('id') courseId: number,\n    @Query('startDate') startDate: string,\n    @Query('endDate') endDate: string,\n  ): Promise<TACheckinTimesResponse> {\n    try {\n      return await this.courseService.getTACheckInCheckOutTimes(\n        courseId,\n        startDate,\n        endDate,\n      );\n    } catch (err) {\n      console.error(err);\n      throw new HttpException(\n        ERROR_MESSAGES.courseController.checkInTime,\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  @Post(':id/self_enroll')\n  @UseGuards(JwtAuthGuard, CourseRolesGuard)\n  @Roles(Role.PROFESSOR)\n  async toggleSelfEnroll(@Param('id') courseId: number): Promise<void> {\n    const course = await CourseModel.findOne(courseId);\n    course.selfEnroll = !course.selfEnroll;\n    await course.save();\n  }\n}\n","import { Injectable } from '@nestjs/common';\nimport { RolesGuard } from './role.guard';\nimport { UserModel } from '../profile/user.entity';\n\n@Injectable()\nexport class CourseRolesGuard extends RolesGuard {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  async setupData(\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    request: any,\n  ): Promise<{ courseId: number; user: UserModel }> {\n    const user = await UserModel.findOne(request.user.userId, {\n      relations: ['courses'],\n    });\n\n    const courseId = request.params.id;\n    return { courseId, user };\n  }\n}\n","import { TACheckinPair, TACheckinTimesResponse } from '@koh/common';\nimport { Injectable } from '@nestjs/common';\nimport { partition } from 'lodash';\nimport { EventModel, EventType } from 'profile/event-model.entity';\nimport { QuestionModel } from 'question/question.entity';\nimport { Between, Connection, In } from 'typeorm';\n\n@Injectable()\nexport class CourseService {\n  constructor(private connection: Connection) {}\n\n  async getTACheckInCheckOutTimes(\n    courseId: number,\n    startDate: string,\n    endDate: string,\n  ): Promise<TACheckinTimesResponse> {\n    const startDateAsDate = new Date(startDate);\n    const endDateAsDate = new Date(endDate);\n    if (startDateAsDate.getUTCDate() === endDateAsDate.getUTCDate()) {\n      endDateAsDate.setUTCDate(endDateAsDate.getUTCDate() + 1);\n    }\n\n    const taEvents = await EventModel.find({\n      where: {\n        eventType: In([\n          EventType.TA_CHECKED_IN,\n          EventType.TA_CHECKED_OUT,\n          EventType.TA_CHECKED_OUT_FORCED,\n        ]),\n        time: Between(startDateAsDate, endDateAsDate),\n        courseId,\n      },\n      relations: ['user'],\n    });\n\n    const [checkinEvents, otherEvents] = partition(\n      taEvents,\n      (e) => e.eventType === EventType.TA_CHECKED_IN,\n    );\n\n    const taCheckinTimes: TACheckinPair[] = [];\n\n    for (const checkinEvent of checkinEvents) {\n      let closestEvent: EventModel = null;\n      let mostRecentTime = new Date();\n      const originalDate = mostRecentTime;\n\n      for (const checkoutEvent of otherEvents) {\n        if (\n          checkoutEvent.userId === checkinEvent.userId &&\n          checkoutEvent.time > checkinEvent.time &&\n          checkoutEvent.time.getTime() - checkinEvent.time.getTime() <\n            mostRecentTime.getTime() - checkinEvent.time.getTime()\n        ) {\n          closestEvent = checkoutEvent;\n          mostRecentTime = checkoutEvent.time;\n        }\n      }\n\n      const numHelped = await QuestionModel.count({\n        where: {\n          taHelpedId: checkinEvent.userId,\n          helpedAt: Between(\n            checkinEvent.time,\n            closestEvent?.time || new Date(),\n          ),\n        },\n      });\n\n      taCheckinTimes.push({\n        name: checkinEvent.user.name,\n        checkinTime: checkinEvent.time,\n        checkoutTime: closestEvent?.time,\n        inProgress: mostRecentTime === originalDate,\n        forced: closestEvent?.eventType === EventType.TA_CHECKED_OUT_FORCED,\n        numHelped,\n      });\n    }\n\n    return { taCheckinTimes };\n  }\n}\n","import { ClosedQuestionStatus, Heatmap, timeDiffInMins } from '@koh/common';\nimport { CACHE_MANAGER, Inject, Injectable } from '@nestjs/common';\nimport { inRange, mean, range } from 'lodash';\nimport moment = require('moment');\nimport { Command, Positional } from 'nestjs-command';\nimport { QuestionModel } from 'question/question.entity';\nimport { MoreThan } from 'typeorm';\nimport { OfficeHourModel } from './office-hour.entity';\nimport { Cache } from 'cache-manager';\nimport { CourseModel } from './course.entity';\n\nfunction arrayRotate(arr, count) {\n  count -= arr.length * Math.floor(count / arr.length);\n  const spliced = arr.splice(0, count);\n  return [...arr, ...spliced];\n}\n\n@Injectable()\nexport class HeatmapService {\n  constructor(@Inject(CACHE_MANAGER) private cacheManager: Cache) {}\n\n  async getCachedHeatmapFor(courseId: number): Promise<Heatmap | false> {\n    //One week\n    const cacheLengthInSeconds = 604800;\n    return this.cacheManager.wrap(\n      `heatmap/${courseId}`,\n      () => this._getHeatmapFor(courseId),\n      { ttl: cacheLengthInSeconds },\n    );\n  }\n\n  // Do not use this externally plz\n  async _getHeatmapFor(courseId: number): Promise<Heatmap | false> {\n    // The number of minutes to average across\n    const BUCKET_SIZE_IN_MINS = 15;\n    // Number of samples to gather per bucket\n    const SAMPLES_PER_BUCKET = 3;\n    console.time('heatmap');\n    const recent = moment().subtract(8, 'weeks').toISOString();\n    const questions = await QuestionModel.createQueryBuilder('question')\n      .leftJoinAndSelect('question.queue', 'queue')\n      .where('queue.courseId = :courseId', { courseId })\n      .andWhere('question.status = :status', {\n        status: ClosedQuestionStatus.Resolved,\n      })\n      .andWhere('question.helpedAt IS NOT NULL')\n      .andWhere('question.createdAt > :recent', { recent })\n      .orderBy('question.createdAt', 'ASC')\n      .getMany();\n    if (questions.length === 0) {\n      return false;\n    }\n\n    const officeHours = await OfficeHourModel.find({\n      where: { startTime: MoreThan(recent), courseId },\n    });\n\n    if (officeHours.length === 0) {\n      return false;\n    }\n\n    const tz = (await CourseModel.findOne({ id: courseId })).timezone;\n    let heatmap = this._generateHeatMapWithReplay(\n      // Ignore questions that cross midnight (usually a fluke)\n      questions.filter((q) => q.helpedAt.getDate() === q.createdAt.getDate()),\n      officeHours,\n      tz,\n      BUCKET_SIZE_IN_MINS,\n      SAMPLES_PER_BUCKET,\n    );\n    heatmap = arrayRotate(\n      heatmap,\n      -moment.tz.zone(tz).utcOffset(Date.now()) / BUCKET_SIZE_IN_MINS,\n    );\n    console.timeEnd('heatmap');\n    return heatmap;\n  }\n\n  // PRIVATE function that is public for testing purposes\n  // Rewind through the last few weeks and for each time interval,\n  // figure out how long wait time would have been if you had joined the queue at that time\n  // Timezone should be IANA\n  // Returns heatmap in the timezone (ie 3rd bucket is 3am in that timezone)\n  _generateHeatMapWithReplay(\n    questions: QuestionModel[],\n    hours: OfficeHourModel[],\n    timezone: string,\n    bucketSize: number,\n    samplesPerBucket: number,\n  ): Heatmap {\n    const sampleInterval = bucketSize / samplesPerBucket;\n    /*\n    TEST: Question1 is  3:05 - 3:25\n    // The next question is 3:21 - 3:49\n    THe following question is 4:05 - 4:10\n    \n    Bucket = 60, Samples = 3, so timepoints are: 3:00, 3:20, 3:40.\n\n    3:20 sample gets waittime of 5 minutes\n    3:40 samples get waittimes of 9 minutes\n    4:00 sample gets waittime of 0 minutes\n\n\n    If i entered the queue at that time when should I have gotten help?\n    Every interval of minutes for the past 5 weeks are aggregated (by taking the avg)\n    \n    analyze the buckets to find the closest time approximation\n\n    look at question Q1 and the next question Q2\n    for all sample timepoints between Q1.createdAt and Q2.createdAt:\n       - sample = Q1.helpedAt - timepoint (if negative, then it's 0)\n    */\n\n    const hourTimestamps: [number, number][] = hours.map((hours) => [\n      hours.startTime.getTime(),\n      hours.endTime.getTime(),\n    ]);\n\n    function dateToBucket(date: Date | number): number {\n      // parse in zone to handle daylight savings by getting day/hour/minute within that IANA zone\n      const cInZone = moment.tz(date, timezone);\n      return Math.floor(\n        (cInZone.day() * 24 * 60 + cInZone.hour() * 60 + cInZone.minute()) /\n          bucketSize,\n      );\n    }\n    const timepointBuckets: number[][] = [\n      ...Array((24 * 7 * 60) / bucketSize),\n    ].map(() => []);\n\n    if (questions.length) {\n      const startDate = questions[0].createdAt;\n      const sunday = moment.tz(startDate, timezone).startOf('week').toDate();\n\n      function getNextTimepointIndex(date: Date): number {\n        return Math.floor(timeDiffInMins(date, sunday) / sampleInterval) + 1;\n      }\n\n      // Get the date of the sample timepoint immediately after the given date\n      function getNextSampleTimepoint(date: Date): Date {\n        const timepointIndex = getNextTimepointIndex(date);\n        return new Date(\n          sunday.getTime() + timepointIndex * sampleInterval * 60 * 1000,\n        );\n      }\n\n      // Get all timepoints between the two dates\n      function getSampleTimepointsInDateRange(\n        date1: Date,\n        date2: Date,\n      ): Date[] {\n        const ret = [];\n        let curr = getNextSampleTimepoint(date1);\n        while (curr.getTime() < date2.getTime()) {\n          ret.push(curr);\n          curr = getNextSampleTimepoint(curr);\n        }\n        return ret;\n      }\n\n      // Get the start time of the current bucket\n      function lastBucketBoundary(date: Date): moment.Moment {\n        const startOfWeek = moment.tz(date, timezone).startOf('week');\n        const m = moment(date);\n        return m.subtract(m.diff(startOfWeek, 'm') % bucketSize, 'm');\n      }\n\n      // go two questions at a time\n      let isFirst = true;\n      for (let i = 0; i < questions.length; i++) {\n        const curr = questions[i];\n        const next = questions[i + 1];\n        const isLast = i === questions.length - 1;\n\n        // get the timepoints in between\n        let sampledTimepoints = getSampleTimepointsInDateRange(\n          isFirst\n            ? lastBucketBoundary(curr.createdAt)\n                .subtract(1, 's') // so that we get the first timepoint\n                .toDate()\n            : curr.createdAt,\n          isLast\n            ? lastBucketBoundary(curr.helpedAt)\n                .add(bucketSize, 'm') // to get the nextBucketBoundary\n                .toDate()\n            : next.createdAt,\n        );\n        sampledTimepoints = sampledTimepoints.filter((time) =>\n          hourTimestamps.some(([start, end]) =>\n            inRange(time.getTime(), start, end),\n          ),\n        );\n\n        // Pad the first bucket with zeros to account for timepoints before the first\n        if (sampledTimepoints.length > 0 && isFirst) {\n          isFirst = false;\n        }\n        // When we would have hypothetically gotten help at this timepoint\n        for (const c of sampledTimepoints) {\n          let wait = 0;\n          if (\n            inRange(\n              c.getTime(),\n              curr.createdAt.getTime(),\n              curr.helpedAt.getTime(),\n            )\n          ) {\n            wait = (curr.helpedAt.getTime() - c.getTime()) / 60000;\n          }\n\n          const bucketIndex = dateToBucket(c);\n          timepointBuckets[bucketIndex].push(wait);\n        }\n      }\n    }\n\n    // Were there ever office hours in this bucket?\n    const wereHoursDuringBucket: boolean[] = [\n      ...Array((24 * 7 * 60) / bucketSize),\n    ];\n    for (const [start, end] of hourTimestamps) {\n      //prevents an office hour from [N, M] to register in multiple buckets\n      for (const i of range(dateToBucket(start), dateToBucket(end - 1) + 1)) {\n        wereHoursDuringBucket[i] = true;\n      }\n    }\n\n    const h: Heatmap = timepointBuckets.map((samples, i) => {\n      if (samples.length > 0) {\n        return mean(samples);\n      } else if (wereHoursDuringBucket[i]) {\n        return 0;\n      } else {\n        return -1;\n      }\n    });\n    return h;\n  }\n\n  @Command({\n    command: 'heatmap:generate <courseId>',\n    describe: 'generate heatmap for a course',\n    autoExit: true,\n  })\n  async create(\n    @Positional({\n      name: 'courseId',\n      describe: 'which course the heatmap will be generated for',\n      type: 'number',\n    })\n    courseId: number,\n  ): Promise<void> {\n    console.log(await this._getHeatmapFor(courseId));\n  }\n}\n","import { Injectable } from '@nestjs/common';\nimport 'moment-timezone';\nimport {\n  CalendarComponent,\n  CalendarResponse,\n  fromURL,\n  VEvent,\n} from 'node-ical';\nimport { RRule } from 'rrule';\nimport { Connection, DeepPartial } from 'typeorm';\nimport { findOneIana } from 'windows-iana/dist';\nimport { QueueModel } from '../queue/queue.entity';\nimport { CourseModel } from './course.entity';\nimport { OfficeHourModel } from './office-hour.entity';\nimport moment = require('moment');\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { Cron } from '@nestjs/schedule';\nimport { RedisService } from 'nestjs-redis';\nimport * as Redlock from 'redlock';\n\ntype Moment = moment.Moment;\n\ntype CreateOfficeHour = DeepPartial<OfficeHourModel>[];\n\n@Injectable()\nexport class IcalService {\n  constructor(\n    private connection: Connection,\n    private readonly redisService: RedisService,\n  ) {}\n\n  // tz should not be preconverted by findOneIana\n  private fixOutlookTZ(date: Moment, tz: string): Moment {\n    const iana = findOneIana(tz); // Get IANA timezone from windows timezone\n    if (iana) {\n      // Move to the timezone because node-ical didn't do it for us, since it does not recognize windows timezone\n      return moment(date).tz(iana, true);\n    } else {\n      return date;\n    }\n  }\n\n  // Generate date of occurences for an rrule in the given timezone, excluding the list of dates\n  private rruleToDates(rrule: any, eventTZ: string, exdateRaw: Date[]): Date[] {\n    const { options } = rrule;\n    const dtstart: Moment = this.fixOutlookTZ(moment(options.dtstart), eventTZ);\n    const until: Moment =\n      options.until && this.fixOutlookTZ(moment(options.until), eventTZ);\n    const eventTZMoment = moment.tz.zone(findOneIana(eventTZ) || eventTZ);\n\n    // Get the UTC Offset in this event's timezone, at this time. Accounts for Daylight Savings and other oddities\n    const tzUTCOffsetOnDate = (date: Moment) =>\n      eventTZMoment.utcOffset(date.valueOf());\n    const dtstartUTCOffset = tzUTCOffsetOnDate(dtstart);\n\n    // Apply a UTC offset in minutes to the given Moment\n    const applyOffset = (date: Moment, utcOffset: number): Moment =>\n      moment(date).subtract(utcOffset, 'm');\n    // apply the UTC adjustment required by the rrule lib\n    const preRRule = (date: Moment) => applyOffset(date, dtstartUTCOffset);\n    // Revert the UTC adjustment required by the rrule lib\n    const postRRule = (date: Moment) => applyOffset(date, -dtstartUTCOffset);\n\n    // Adjust for rrule not taking into account DST in locale\n    //   ie. \"8pm every friday\" means having to push back 60 minutes after Fall Backwards\n    const fixDST = (date: Moment): Moment =>\n      // Get the difference in UTC offset between dtstart and this date (so if we crossed DST switch, this will be nonzero)\n      moment(date).subtract(dtstartUTCOffset - tzUTCOffsetOnDate(date), 'm');\n\n    const rule = new RRule({\n      freq: options.freq,\n      interval: options.interval,\n      wkst: options.wkst,\n      count: options.count,\n      byweekday: options.byweekday,\n      dtstart: preRRule(dtstart).toDate(),\n      until: until && preRRule(until).toDate(),\n    });\n\n    // Dates to exclude from recurrence, separate exdate timestamp for filtering\n    const exdates: number[] = Object.values(exdateRaw || {})\n      .map((d) => this.fixOutlookTZ(moment(d), eventTZ))\n      .map((d) => applyOffset(d, tzUTCOffsetOnDate(d)).valueOf());\n\n    // Doing math here because moment.add changes behavior based on server timezone\n    const in10Weeks = new Date(\n      dtstart.valueOf() + 1000 * 60 * 60 * 24 * 7 * 10,\n    );\n    return rule\n      .all((d) => !!until || d < in10Weeks)\n      .filter((date) => !exdates.includes(date.getTime()))\n      .map((d) => fixDST(postRRule(moment(d))).toDate());\n  }\n\n  parseIcal(\n    icalData: CalendarResponse,\n    courseId: number,\n    testRegex = /\\b^(Online OH)\\b/,\n  ): CreateOfficeHour {\n    const icalDataValues: Array<CalendarComponent> = Object.values(icalData);\n\n    const officeHours = icalDataValues.filter(\n      (iCalElement): iCalElement is VEvent =>\n        iCalElement.type === 'VEVENT' &&\n        iCalElement.start !== undefined &&\n        iCalElement.end !== undefined,\n    );\n\n    const filteredOfficeHours = officeHours.filter((event) =>\n      testRegex.test(event.summary),\n    );\n\n    let resultOfficeHours = [];\n\n    filteredOfficeHours.forEach((oh: VEvent) => {\n      // This office hour timezone. ASSUMING every date field has same timezone as oh.start\n      const eventTZ = oh.start.tz;\n      const { rrule } = oh as any;\n      if (rrule) {\n        const duration = oh.end.getTime() - oh.start.getTime();\n\n        const allDates = this.rruleToDates(rrule, eventTZ, oh.exdate);\n        const generatedOfficeHours = allDates.map((date) => ({\n          title: oh.summary,\n          courseId: courseId,\n          room: oh.location,\n          startTime: date,\n          endTime: new Date(date.getTime() + duration),\n        }));\n        resultOfficeHours = resultOfficeHours.concat(generatedOfficeHours);\n      } else {\n        resultOfficeHours.push({\n          title: oh.summary,\n          courseId: courseId,\n          room: oh.location,\n          startTime: this.fixOutlookTZ(moment(oh.start), eventTZ).toDate(),\n          endTime: this.fixOutlookTZ(moment(oh.end), eventTZ).toDate(),\n        });\n      }\n    });\n    return resultOfficeHours;\n  }\n\n  /**\n   * Updates the OfficeHours for a given Course by rescraping ical\n   * @param course to parse\n   */\n  public async updateCalendarForCourse(course: CourseModel): Promise<void> {\n    console.log(\n      `scraping ical for course \"${course.name}\"(${course.id} at url: ${course.icalURL}...`,\n    );\n    console.time(`scrape course ${course.id}`);\n    let queue = await QueueModel.findOne({\n      where: { courseId: course.id, room: 'Online' },\n    });\n    if (!queue) {\n      queue = await QueueModel.create({\n        room: 'Online',\n        courseId: course.id,\n        staffList: [],\n        questions: [],\n        allowQuestions: false,\n      }).save();\n    }\n\n    const icalURL = await fromURL(course.icalURL);\n\n    const officeHours = this.parseIcal(icalURL, course.id);\n    await OfficeHourModel.delete({ courseId: course.id });\n    await OfficeHourModel.save(\n      officeHours.map((e) => {\n        e.queueId = queue.id;\n        return OfficeHourModel.create(e);\n      }),\n    );\n\n    const professorHoursRegex = /\\b^(Prof|Professor)/;\n    const professorOfficeHours = this.parseIcal(\n      icalURL,\n      course.id,\n      professorHoursRegex,\n    );\n\n    // TODO: make professor queues instead of this bullshit lmao\n    const professorQueues = await QueueModel.find({\n      where: {\n        isProfessorQueue: true,\n      },\n    });\n\n    const processedProfessorOfficeHours = [];\n\n    for (const poh of professorOfficeHours) {\n      const professorLocation = poh.title;\n      if (\n        !professorQueues.some(\n          (q) => q.room === professorLocation && q.courseId === course.id,\n        )\n      ) {\n        const newProfQ = QueueModel.create({\n          room: professorLocation,\n          courseId: course.id,\n          staffList: [],\n          questions: [],\n          allowQuestions: false,\n          isProfessorQueue: true,\n        });\n        await newProfQ.save();\n        professorQueues.push(newProfQ);\n      }\n\n      const professorQueue = professorQueues.find(\n        (q) => q.room === professorLocation,\n      );\n      processedProfessorOfficeHours.push(\n        OfficeHourModel.create({\n          queueId: professorQueue.id,\n          ...poh,\n        }),\n      );\n    }\n\n    await OfficeHourModel.save(processedProfessorOfficeHours);\n    await QueueModel.save(professorQueues);\n\n    console.timeEnd(`scrape course ${course.id}`);\n    console.log('done scraping!');\n  }\n\n  @Cron('51 0 * * *')\n  public async updateAllCourses(): Promise<void> {\n    const resource = 'locks:icalcron';\n    const ttl = 60000;\n\n    const redisDB = await this.redisService.getClient('db');\n\n    const redlock = new Redlock([redisDB]);\n\n    redlock.on('clientError', function (err) {\n      console.error('A redis error has occurred:', err);\n    });\n\n    try {\n      await redlock.lock(resource, ttl).then(async (lock) => {\n        console.log('updating course icals');\n        const courses = await CourseModel.find({\n          where: { enabled: true },\n        });\n        await Promise.all(courses.map((c) => this.updateCalendarForCourse(c)));\n\n        return lock.unlock().catch(function (err) {\n          console.error(err);\n        });\n      });\n    } catch (error) {\n      console.error('A problem locking Redlock has occurred:', error);\n    }\n  }\n}\n","module.exports = require(\"moment-timezone\");","module.exports = require(\"node-ical\");","module.exports = require(\"rrule\");","module.exports = require(\"windows-iana/dist\");","module.exports = require(\"redlock\");","import { Command } from 'nestjs-command';\nimport { Injectable } from '@nestjs/common';\nimport { IcalService } from './ical.service';\n\n@Injectable()\nexport class ICalCommand {\n  constructor(private readonly icalService: IcalService) {}\n  @Command({\n    command: 'ical:scrape',\n    describe: 'scrape ical for a course',\n    autoExit: true,\n  })\n  async create(): Promise<void> {\n    await this.icalService.updateAllCourses();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { HealthcheckController } from './healthcheck.controller';\n\n@Module({\n  controllers: [HealthcheckController],\n})\nexport class HealthcheckModule {}\n","import { Controller } from '@nestjs/common';\nimport { Get } from '@nestjs/common/decorators';\n\n@Controller('healthcheck')\nexport class HealthcheckController {\n  @Get('/')\n  health(): string {\n    return 'healthy';\n  }\n}\n","module.exports = require(\"@nestjs/common/decorators\");","import { Module } from '@nestjs/common';\nimport { LoginController } from './login.controller';\nimport { JwtStrategy } from '../login/jwt.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { LoginCourseService } from './login-course.service';\n\n@Module({\n  imports: [\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n      }),\n    }),\n  ],\n  controllers: [LoginController],\n  providers: [JwtStrategy, LoginCourseService],\n})\nexport class LoginModule {}\n","import {\n  ERROR_MESSAGES,\n  GetSelfEnrollResponse,\n  KhouryDataParams,\n  KhouryRedirectResponse,\n  Role,\n} from '@koh/common';\nimport {\n  BadRequestException,\n  Body,\n  Controller,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  Post,\n  Query,\n  Req,\n  Res,\n  UnauthorizedException,\n  UseGuards,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport * as Sentry from '@sentry/node';\nimport { CourseModel } from 'course/course.entity';\nimport { User } from 'decorators/user.decorator';\nimport { Request, Response } from 'express';\nimport { JwtAuthGuard } from 'guards/jwt-auth.guard';\nimport * as httpSignature from 'http-signature';\nimport { UserCourseModel } from 'profile/user-course.entity';\nimport { UserModel } from 'profile/user.entity';\nimport { Connection } from 'typeorm';\nimport { NonProductionGuard } from '../guards/non-production.guard';\nimport { LoginCourseService } from './login-course.service';\n\n@Controller()\nexport class LoginController {\n  constructor(\n    private connection: Connection,\n    private loginCourseService: LoginCourseService,\n    private jwtService: JwtService,\n    private configService: ConfigService,\n  ) {}\n\n  @Post('/khoury_login')\n  async recieveDataFromKhoury(\n    @Req() req: Request,\n    @Body() body: KhouryDataParams,\n  ): Promise<KhouryRedirectResponse> {\n    if (process.env.NODE_ENV === 'production') {\n      // Check that request has come from Khoury\n      const parsedRequest = httpSignature.parseRequest(req);\n      const verifySignature = httpSignature.verifyHMAC(\n        parsedRequest,\n        this.configService.get('KHOURY_PRIVATE_KEY'),\n      );\n      if (!verifySignature) {\n        Sentry.captureMessage('Invalid request signature: ' + parsedRequest);\n        throw new UnauthorizedException('Invalid request signature');\n      }\n    }\n\n    let user;\n    try {\n      user = await this.loginCourseService.addUserFromKhoury(body);\n    } catch (e) {\n      Sentry.captureException(e);\n      console.error('Khoury login threw an exception, the body was ', body);\n      console.error(e);\n      throw new HttpException(\n        ERROR_MESSAGES.loginController.addUserFromKhoury,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n    // Create temporary login token to send user to.\n    const token = await this.jwtService.signAsync(\n      { userId: user.id },\n      { expiresIn: 60 },\n    );\n\n    if (token === null || token === undefined) {\n      console.error('Temporary JWT is invalid');\n      throw new HttpException(\n        ERROR_MESSAGES.loginController.invalidTempJWTToken,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n\n    return {\n      redirect:\n        this.configService.get('DOMAIN') + `/api/v1/login/entry?token=${token}`,\n    };\n  }\n\n  // NOTE: Although the two routes below are on the backend,\n  // they are meant to be visited by the browser so a cookie can be set\n\n  // This is the real admin entry point\n  @Get('/login/entry')\n  async enterFromKhoury(\n    @Res() res: Response,\n    @Query('token') token: string,\n  ): Promise<void> {\n    const isVerified = await this.jwtService.verifyAsync(token);\n\n    if (!isVerified) {\n      throw new UnauthorizedException();\n    }\n\n    const payload = this.jwtService.decode(token) as { userId: number };\n\n    if (payload === null || payload === undefined) {\n      console.error('Decoded JWT is invalid');\n      throw new HttpException(\n        ERROR_MESSAGES.loginController.invalidPayload,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n\n    this.enter(res, payload.userId);\n  }\n\n  // This is for login on development only\n  @Get('/login/dev')\n  @UseGuards(NonProductionGuard)\n  async enterFromDev(\n    @Res() res: Response,\n    @Query('userId') userId: number,\n  ): Promise<void> {\n    this.enter(res, userId);\n  }\n\n  // Set cookie and redirect to proper page\n  private async enter(res: Response, userId: number) {\n    // Expires in 30 days\n    const authToken = await this.jwtService.signAsync({\n      userId,\n      expiresIn: 60 * 60 * 24 * 30,\n    });\n\n    if (authToken === null || authToken === undefined) {\n      console.error('Authroziation JWT is invalid');\n      throw new HttpException(\n        ERROR_MESSAGES.loginController.invalidTempJWTToken,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n\n    const isSecure = this.configService\n      .get<string>('DOMAIN')\n      .startsWith('https://');\n    res\n      .cookie('auth_token', authToken, { httpOnly: true, secure: isSecure })\n      .redirect(302, '/');\n  }\n\n  @Get('/logout')\n  async logout(@Res() res: Response): Promise<void> {\n    const isSecure = this.configService\n      .get<string>('DOMAIN')\n      .startsWith('https://');\n    res\n      .clearCookie('auth_token', { httpOnly: true, secure: isSecure })\n      .redirect(302, '/login');\n  }\n\n  @Get('self_enroll_courses')\n  async selfEnrollEnabledAnywhere(): Promise<GetSelfEnrollResponse> {\n    const courses = await CourseModel.find();\n    return { courses: courses.filter((course) => course.selfEnroll) };\n  }\n\n  @Post('create_self_enroll_override/:id')\n  @UseGuards(JwtAuthGuard)\n  async createSelfEnrollOverride(\n    @Param('id') courseId: number,\n    @User() user: UserModel,\n  ): Promise<void> {\n    const course = await CourseModel.findOne(courseId);\n\n    if (!course.selfEnroll) {\n      throw new UnauthorizedException(\n        'Cannot self-enroll to this course currently',\n      );\n    }\n\n    const prevUCM = await UserCourseModel.findOne({\n      where: {\n        courseId,\n        userId: user.id,\n      },\n    });\n\n    if (prevUCM) {\n      throw new BadRequestException(\n        'User already has an override for this course',\n      );\n    }\n\n    await UserCourseModel.create({\n      userId: user.id,\n      courseId: courseId,\n      role: Role.STUDENT,\n      override: true,\n      expires: true,\n    }).save();\n  }\n}\n","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"http-signature\");","import { Injectable, CanActivate } from '@nestjs/common';\nimport { isProd } from '@koh/common';\n\n@Injectable()\nexport class NonProductionGuard implements CanActivate {\n  canActivate(): boolean {\n    return !isProd();\n  }\n}\n","import { KhouryDataParams, Role } from '@koh/common';\nimport { Injectable } from '@nestjs/common';\nimport { CourseModel } from 'course/course.entity';\nimport { CourseSectionMappingModel } from 'login/course-section-mapping.entity';\nimport { UserCourseModel } from 'profile/user-course.entity';\nimport { UserModel } from 'profile/user.entity';\nimport { Connection } from 'typeorm';\n\n@Injectable()\nexport class LoginCourseService {\n  constructor(private connection: Connection) {}\n\n  public async addUserFromKhoury(info: KhouryDataParams): Promise<UserModel> {\n    let user: UserModel;\n    const neuEmail = info.email.replace('@husky.neu.edu', '@northeastern.edu');\n    user = await UserModel.findOne({\n      where: { email: neuEmail },\n      relations: ['courses', 'courses.course'],\n    });\n\n    if (!user) {\n      user = UserModel.create({\n        courses: [],\n        email: neuEmail,\n        firstName: info.first_name,\n        lastName: info.last_name,\n        hideInsights: [],\n      });\n    }\n\n    const userCourses = [];\n\n    for (const c of info.courses) {\n      const course: CourseModel = await this.courseSectionToCourse(\n        c.course,\n        c.section,\n      );\n\n      if (course) {\n        const userCourse = await this.courseToUserCourse(\n          user.id,\n          course.id,\n          Role.STUDENT,\n        );\n        userCourses.push(userCourse);\n      }\n    }\n\n    if (info.ta_courses) {\n      for (const c of info.ta_courses) {\n        // Query for all the courses which match the name of the generic course from Khoury\n        const courseMappings = (\n          await CourseSectionMappingModel.find({\n            where: { genericCourseName: c.course }, // TODO: Add semester support\n            relations: ['course'],\n          })\n        ).filter((cm) => cm.course.enabled);\n\n        for (const courseMapping of courseMappings) {\n          const taCourse = await this.courseToUserCourse(\n            user.id,\n            courseMapping.courseId,\n            c.instructor === 1 ? Role.PROFESSOR : Role.TA,\n          );\n          userCourses.push(taCourse);\n        }\n      }\n    }\n\n    // Delete \"stale\" user courses\n    for (const previousCourse of user.courses) {\n      if (\n        !this.hasUserCourse(userCourses, previousCourse) &&\n        previousCourse.course.enabled\n      ) {\n        if (!previousCourse.override) {\n          previousCourse.remove();\n        } else {\n          userCourses.push(previousCourse);\n        }\n      }\n    }\n\n    user.courses = userCourses;\n    await user.save();\n    return user;\n  }\n\n  public async courseSectionToCourse(\n    courseName: string,\n    courseSection: number,\n  ): Promise<CourseModel> {\n    const courseSectionModel = (\n      await CourseSectionMappingModel.find({\n        where: { genericCourseName: courseName, section: courseSection },\n        relations: ['course'],\n      })\n    ).find((cm) => cm.course.enabled);\n\n    return courseSectionModel?.course;\n  }\n\n  public async courseToUserCourse(\n    userId: number,\n    courseId: number,\n    role: Role,\n  ): Promise<UserCourseModel> {\n    let userCourse: UserCourseModel;\n    userCourse = await UserCourseModel.findOne({\n      where: { userId, courseId },\n    });\n    if (userCourse && userCourse.override && userCourse.role === role) {\n      userCourse.override = false;\n      await userCourse.save();\n    }\n    if (!userCourse) {\n      userCourse = await UserCourseModel.create({\n        userId,\n        courseId,\n        role,\n      }).save();\n    }\n    return userCourse;\n  }\n\n  private hasUserCourse(\n    userCourses: UserCourseModel[],\n    previousCourse: UserCourseModel,\n  ): boolean {\n    return userCourses.some(\n      (uc) =>\n        uc.courseId === previousCourse.courseId &&\n        uc.userId === previousCourse.userId &&\n        uc.role === previousCourse.role,\n    );\n  }\n}\n","import { Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(configService: ConfigService) {\n    super({\n      jwtFromRequest: (req: Request) => req.cookies['auth_token'],\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  validate(payload: { userId: number }): any {\n    return { ...payload };\n  }\n}\n","module.exports = require(\"passport-jwt\");","import { Module } from '@nestjs/common';\nimport { ProfileController } from './profile.controller';\nimport { NotificationModule } from '../notification/notification.module';\n\n@Module({\n  imports: [NotificationModule],\n  controllers: [ProfileController],\n})\nexport class ProfileModule {}\n","import {\n  DesktopNotifPartial,\n  ERROR_MESSAGES,\n  GetProfileResponse,\n  UpdateProfileParams,\n} from '@koh/common';\nimport {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  HttpStatus,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n  Res,\n  ServiceUnavailableException,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport * as checkDiskSpace from 'check-disk-space';\nimport { Response } from 'express';\nimport * as fs from 'fs';\nimport { pick } from 'lodash';\nimport { memoryStorage } from 'multer';\nimport * as path from 'path';\nimport * as sharp from 'sharp';\nimport { Connection } from 'typeorm';\nimport { JwtAuthGuard } from '../guards/jwt-auth.guard';\nimport { NotificationService } from '../notification/notification.service';\nimport { User } from '../decorators/user.decorator';\nimport { UserModel } from './user.entity';\n\n@Controller('profile')\n@UseGuards(JwtAuthGuard)\nexport class ProfileController {\n  constructor(\n    private connection: Connection,\n    private notifService: NotificationService,\n  ) {}\n\n  @Get()\n  async get(\n    @User(['courses', 'courses.course', 'phoneNotif', 'desktopNotifs'])\n    user: UserModel,\n  ): Promise<GetProfileResponse> {\n    if (user === null || user === undefined) {\n      console.error(ERROR_MESSAGES.profileController.accountNotAvailable);\n      throw new HttpException(\n        ERROR_MESSAGES.profileController.accountNotAvailable,\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const courses = user.courses\n      .filter((userCourse) => userCourse.course.enabled)\n      .map((userCourse) => {\n        return {\n          course: {\n            id: userCourse.courseId,\n            name: userCourse.course.name,\n          },\n          role: userCourse.role,\n        };\n      });\n\n    const desktopNotifs: DesktopNotifPartial[] = user.desktopNotifs.map(\n      (d) => ({\n        endpoint: d.endpoint,\n        id: d.id,\n        createdAt: d.createdAt,\n        name: d.name,\n      }),\n    );\n\n    const userResponse = pick(user, [\n      'id',\n      'email',\n      'name',\n      'firstName',\n      'lastName',\n      'photoURL',\n      'desktopNotifsEnabled',\n      'phoneNotifsEnabled',\n      'insights',\n    ]);\n\n    if (userResponse === null || userResponse === undefined) {\n      console.error(ERROR_MESSAGES.profileController.userResponseNotFound);\n      throw new HttpException(\n        ERROR_MESSAGES.profileController.userResponseNotFound,\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    return {\n      ...userResponse,\n      courses,\n      phoneNumber: user.phoneNotif?.phoneNumber,\n      desktopNotifs,\n    };\n  }\n\n  @Patch()\n  async patch(\n    @Body() userPatch: UpdateProfileParams,\n    @User(['courses', 'courses.course', 'phoneNotif', 'desktopNotifs'])\n    user: UserModel,\n  ): Promise<GetProfileResponse> {\n    user = Object.assign(user, userPatch);\n\n    // check that the user is trying to update the phone notifs\n    if (userPatch.phoneNotifsEnabled && userPatch.phoneNumber) {\n      // only register new phone if the notifs are enables and the phone number is new\n      if (\n        user.phoneNotifsEnabled &&\n        userPatch.phoneNumber !== user.phoneNotif?.phoneNumber\n      ) {\n        await this.notifService.registerPhone(userPatch.phoneNumber, user);\n      }\n    }\n\n    await user.save();\n\n    return this.get(user);\n  }\n\n  @Post('/upload_picture')\n  @UseInterceptors(\n    FileInterceptor('file', {\n      storage: memoryStorage(),\n    }),\n  )\n  async uploadImage(\n    @UploadedFile() file: Express.Multer.File,\n    @User() user: UserModel,\n  ): Promise<void> {\n    if (user.photoURL) {\n      fs.unlink(process.env.UPLOAD_LOCATION + '/' + user.photoURL, (err) => {\n        console.error(\n          'Error deleting previous picture at: ',\n          user.photoURL,\n          err,\n          'the previous image was at an invalid location?',\n        );\n      });\n    }\n\n    const spaceLeft = await checkDiskSpace(path.parse(process.cwd()).root);\n\n    if (spaceLeft.free < 1000000000) {\n      // if less than a gigabyte left\n      throw new ServiceUnavailableException(\n        ERROR_MESSAGES.profileController.noDiskSpace,\n      );\n    }\n\n    const fileName =\n      user.id +\n      '-' +\n      Math.random().toString(36).substring(2, 15) +\n      Math.random().toString(36).substring(2, 15);\n\n    await sharp(file.buffer)\n      .resize(256)\n      .toFile(path.join(process.env.UPLOAD_LOCATION, fileName));\n\n    user.photoURL = fileName;\n    await user.save();\n  }\n\n  @Get('/get_picture/:photoURL')\n  async getImage(\n    @Param('photoURL') photoURL: string,\n    @Res() res: Response,\n  ): Promise<void> {\n    fs.stat(\n      path.join(process.env.UPLOAD_LOCATION, photoURL),\n      async (err, stats) => {\n        if (stats) {\n          res.sendFile(photoURL, { root: process.env.UPLOAD_LOCATION });\n        } else {\n          const user = await UserModel.findOne({\n            where: {\n              photoURL,\n            },\n          });\n          user.photoURL = null;\n          await user.save();\n          throw new NotFoundException();\n        }\n      },\n    );\n  }\n\n  @Delete('/delete_profile_picture')\n  async deleteProfilePicture(@User() user: UserModel): Promise<void> {\n    if (user.photoURL) {\n      fs.unlink(\n        process.env.UPLOAD_LOCATION + '/' + user.photoURL,\n        async (err) => {\n          if (err) {\n            const errMessage =\n              'Error deleting previous picture at : ' +\n              user.photoURL +\n              'the previous image was at an invalid location?';\n            console.error(errMessage, err);\n            throw new BadRequestException(errMessage);\n          } else {\n            user.photoURL = null;\n            await user.save();\n            return;\n          }\n        },\n      );\n    }\n  }\n}\n","module.exports = require(\"@nestjs/platform-express\");","module.exports = require(\"check-disk-space\");","module.exports = require(\"fs\");","module.exports = require(\"multer\");","module.exports = require(\"path\");","module.exports = require(\"sharp\");","import { Module } from '@nestjs/common';\nimport { NotificationModule } from '../notification/notification.module';\nimport { QueueModule } from '../queue/queue.module';\nimport { QuestionController } from './question.controller';\nimport { QuestionService } from './question.service';\nimport { QuestionSubscriber } from './question.subscriber';\n\n@Module({\n  controllers: [QuestionController],\n  providers: [QuestionSubscriber, QuestionService],\n  imports: [NotificationModule, QueueModule],\n  exports: [QuestionService],\n})\nexport class QuestionModule {}\n","import {\n  ClosedQuestionStatus,\n  CreateQuestionParams,\n  CreateQuestionResponse,\n  ERROR_MESSAGES,\n  GetQuestionResponse,\n  GroupQuestionsParams,\n  LimboQuestionStatus,\n  OpenQuestionStatus,\n  QuestionStatusKeys,\n  Role,\n  UpdateQuestionParams,\n  UpdateQuestionResponse,\n} from '@koh/common';\nimport {\n  BadRequestException,\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Get,\n  HttpException,\n  HttpStatus,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n  UnauthorizedException,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { Connection, In } from 'typeorm';\nimport { JwtAuthGuard } from '../guards/jwt-auth.guard';\nimport {\n  NotificationService,\n  NotifMsgs,\n} from '../notification/notification.service';\nimport { Roles } from '../decorators/roles.decorator';\nimport { UserCourseModel } from '../profile/user-course.entity';\nimport { User, UserId } from '../decorators/user.decorator';\nimport { UserModel } from '../profile/user.entity';\nimport { QueueModel } from '../queue/queue.entity';\nimport { QuestionGroupModel } from './question-group.entity';\nimport { QuestionRolesGuard } from '../guards/question-role.guard';\nimport { QuestionModel } from './question.entity';\nimport { QuestionService } from './question.service';\n\n// NOTE: FIXME: EVERY REQUEST INTO QUESTIONCONTROLLER REQUIRES THE BODY TO HAVE A\n// FIELD questionId OR queueId! If not, stupid weird untraceable bugs will happen\n// and you will lose a lot of development time\n@Controller('questions')\n@UseGuards(JwtAuthGuard, QuestionRolesGuard)\n@UseInterceptors(ClassSerializerInterceptor)\nexport class QuestionController {\n  constructor(\n    private connection: Connection,\n    private notifService: NotificationService,\n    private questionService: QuestionService,\n  ) {}\n\n  @Get(':questionId')\n  async getQuestion(\n    @Param('questionId') questionId: number,\n  ): Promise<GetQuestionResponse> {\n    const question = await QuestionModel.findOne(questionId, {\n      relations: ['creator', 'taHelped'],\n    });\n\n    if (question === undefined) {\n      throw new NotFoundException();\n    }\n    return question;\n  }\n\n  @Post()\n  @Roles(Role.STUDENT)\n  async createQuestion(\n    @Body() body: CreateQuestionParams,\n    @User() user: UserModel,\n  ): Promise<CreateQuestionResponse> {\n    const { text, questionType, groupable, queueId, force } = body;\n\n    const queue = await QueueModel.findOne({\n      where: { id: queueId },\n      relations: ['staffList'],\n    });\n\n    if (!queue) {\n      throw new NotFoundException(\n        ERROR_MESSAGES.questionController.createQuestion.invalidQueue,\n      );\n    }\n\n    if (!queue.allowQuestions) {\n      throw new BadRequestException(\n        ERROR_MESSAGES.questionController.createQuestion.noNewQuestions,\n      );\n    }\n    if (!(await queue.checkIsOpen())) {\n      throw new BadRequestException(\n        ERROR_MESSAGES.questionController.createQuestion.closedQueue,\n      );\n    }\n\n    const previousUserQuestion = await QuestionModel.findOne({\n      where: {\n        creatorId: user.id,\n        status: In(Object.values(OpenQuestionStatus)),\n      },\n    });\n\n    if (!!previousUserQuestion) {\n      if (force) {\n        previousUserQuestion.status = ClosedQuestionStatus.ConfirmedDeleted;\n        await previousUserQuestion.save();\n      } else {\n        throw new BadRequestException(\n          ERROR_MESSAGES.questionController.createQuestion.oneQuestionAtATime,\n        );\n      }\n    }\n\n    try {\n      const question = await QuestionModel.create({\n        queueId: queueId,\n        creator: user,\n        text,\n        questionType,\n        groupable,\n        status: QuestionStatusKeys.Drafting,\n        createdAt: new Date(),\n        isOnline: true,\n      }).save();\n      return question;\n    } catch (err) {\n      console.error(err);\n      throw new HttpException(\n        ERROR_MESSAGES.questionController.saveQError,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Patch(':questionId')\n  @Roles(Role.STUDENT, Role.TA, Role.PROFESSOR)\n  // TODO: Use queueRole decorator, but we need to fix its performance first\n  async updateQuestion(\n    @Param('questionId') questionId: number,\n    @Body() body: UpdateQuestionParams,\n    @UserId() userId: number,\n  ): Promise<UpdateQuestionResponse> {\n    let question = await QuestionModel.findOne({\n      where: { id: questionId },\n      relations: ['creator', 'queue', 'taHelped'],\n    });\n    if (question === undefined) {\n      throw new NotFoundException();\n    }\n\n    const isCreator = userId === question.creatorId;\n\n    if (isCreator) {\n      // Fail if student tries an invalid status change\n      if (body.status && !question.changeStatus(body.status, Role.STUDENT)) {\n        throw new UnauthorizedException(\n          ERROR_MESSAGES.questionController.updateQuestion.fsmViolation(\n            'Student',\n            question.status,\n            body.status,\n          ),\n        );\n      }\n      question = Object.assign(question, body);\n      try {\n        await question.save();\n      } catch (err) {\n        console.error(err);\n        throw new HttpException(\n          ERROR_MESSAGES.questionController.saveQError,\n          HttpStatus.INTERNAL_SERVER_ERROR,\n        );\n      }\n      return question;\n    }\n\n    // If not creator, check if user is TA/PROF of course of question\n    const isTaOrProf =\n      (await UserCourseModel.count({\n        where: {\n          userId,\n          courseId: question.queue.courseId,\n          role: In([Role.TA, Role.PROFESSOR]),\n        },\n      })) > 0;\n\n    if (isTaOrProf) {\n      if (Object.keys(body).length !== 1 || Object.keys(body)[0] !== 'status') {\n        throw new UnauthorizedException(\n          ERROR_MESSAGES.questionController.updateQuestion.taOnlyEditQuestionStatus,\n        );\n      }\n      await this.questionService.validateNotHelpingOther(body.status, userId);\n      return await this.questionService.changeStatus(\n        body.status,\n        question,\n        userId,\n      );\n    } else {\n      throw new UnauthorizedException(\n        ERROR_MESSAGES.questionController.updateQuestion.loginUserCantEdit,\n      );\n    }\n  }\n\n  @Post(':questionId/notify')\n  @Roles(Role.TA, Role.PROFESSOR)\n  async notify(@Param('questionId') questionId: number): Promise<void> {\n    const question = await QuestionModel.findOne(questionId, {\n      relations: ['queue'],\n    });\n\n    if (question === undefined || question === null) {\n      throw new HttpException(\n        ERROR_MESSAGES.questionController.notFound,\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (question.status === LimboQuestionStatus.CantFind) {\n      try {\n        await this.notifService.notifyUser(\n          question.creatorId,\n          NotifMsgs.queue.ALERT_BUTTON,\n        );\n      } catch (err) {\n        console.error(err);\n        throw new HttpException(\n          ERROR_MESSAGES.questionController.unableToNotifyUser,\n          HttpStatus.INTERNAL_SERVER_ERROR,\n        );\n      }\n    } else if (question.status === LimboQuestionStatus.TADeleted) {\n      try {\n        await this.notifService.notifyUser(\n          question.creatorId,\n          NotifMsgs.queue.REMOVED,\n        );\n      } catch (err) {\n        console.error(err);\n        throw new HttpException(\n          ERROR_MESSAGES.questionController.unableToNotifyUser,\n          HttpStatus.INTERNAL_SERVER_ERROR,\n        );\n      }\n    }\n  }\n\n  @Post('group')\n  @Roles(Role.TA, Role.PROFESSOR)\n  async groupQuestions(\n    @Body() body: GroupQuestionsParams,\n    @UserId() instructorId: number,\n  ): Promise<void> {\n    const questions = await QuestionModel.find({\n      where: {\n        id: In(body.questionIds),\n      },\n      relations: ['taHelped', 'creator'],\n    });\n\n    if (!questions.every((q) => q.groupable)) {\n      throw new BadRequestException(\n        ERROR_MESSAGES.questionController.groupQuestions.notGroupable,\n      );\n    }\n\n    await this.questionService.validateNotHelpingOther(\n      QuestionStatusKeys.Helping,\n      instructorId,\n    );\n\n    for (const question of questions) {\n      await this.questionService.changeStatus(\n        QuestionStatusKeys.Helping,\n        question,\n        instructorId,\n      );\n    }\n\n    const queue = await QueueModel.findOne({\n      where: {\n        id: body.queueId,\n      },\n    });\n\n    const creatorUserCourse = await UserCourseModel.findOne({\n      where: {\n        courseId: queue.courseId,\n        userId: instructorId,\n      },\n    });\n\n    await QuestionGroupModel.create({\n      creatorId: creatorUserCourse.id, // this should be usercourse id\n      queueId: body.queueId,\n      questions: questions,\n    }).save();\n\n    return;\n  }\n\n  @Patch('resolveGroup/:group_id')\n  @Roles(Role.TA, Role.PROFESSOR)\n  async resolveGroup(\n    @Param('group_id') groupId: number,\n    @UserId() instructorId: number,\n  ): Promise<void> {\n    const group = await QuestionGroupModel.findOne({\n      where: {\n        id: groupId,\n      },\n      relations: ['questions', 'questions.taHelped', 'questions.creator'],\n    });\n\n    for (const question of group.questions) {\n      // only resolve q's that weren't requeued/can't find\n      if (question.status === OpenQuestionStatus.Helping) {\n        await this.questionService.changeStatus(\n          QuestionStatusKeys.Resolved,\n          question,\n          instructorId,\n        );\n      }\n    }\n\n    return;\n  }\n}\n","import { ERROR_MESSAGES } from '@koh/common';\nimport {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { RolesGuard } from './role.guard';\nimport { UserModel } from '../profile/user.entity';\nimport { QueueModel } from '../queue/queue.entity';\nimport { QuestionModel } from '../question/question.entity';\n\n@Injectable()\nexport class QuestionRolesGuard extends RolesGuard {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  async setupData(\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    request: any,\n  ): Promise<{ courseId: number; user: UserModel }> {\n    let queueId;\n\n    if (request.params.questionId) {\n      const question = await QuestionModel.findOne(request.params.questionId);\n      if (!question) {\n        throw new NotFoundException(\n          ERROR_MESSAGES.questionRoleGuard.questionNotFound,\n        );\n      }\n      queueId = question.queueId;\n    } else if (request.body.queueId) {\n      // If you are creating a new question\n      queueId = request.body.queueId;\n    } else {\n      throw new BadRequestException(\n        ERROR_MESSAGES.questionRoleGuard.queueOfQuestionNotFound,\n      );\n    }\n\n    const queue = await QueueModel.findOne(queueId);\n\n    // You cannot interact with a question in a nonexistent queue\n    if (!queue) {\n      throw new NotFoundException(\n        ERROR_MESSAGES.questionRoleGuard.queueDoesNotExist,\n      );\n    }\n    const courseId = queue.courseId;\n    const user = await UserModel.findOne(request.user.userId, {\n      relations: ['courses'],\n    });\n\n    return { courseId, user };\n  }\n}\n","import {\n  ClosedQuestionStatus,\n  ERROR_MESSAGES,\n  LimboQuestionStatus,\n  OpenQuestionStatus,\n  QuestionStatus,\n  Role,\n} from '@koh/common';\nimport {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport {\n  NotificationService,\n  NotifMsgs,\n} from 'notification/notification.service';\nimport { UserModel } from 'profile/user.entity';\nimport { Connection } from 'typeorm';\nimport { QuestionModel } from './question.entity';\n\n@Injectable()\nexport class QuestionService {\n  constructor(\n    private connection: Connection,\n    private notifService: NotificationService,\n  ) {}\n\n  async changeStatus(\n    status: QuestionStatus,\n    question: QuestionModel,\n    userId: number,\n  ): Promise<QuestionModel> {\n    const oldStatus = question.status;\n    const newStatus = status;\n    // If the taHelped is already set, make sure the same ta updates the status\n    if (question.taHelped?.id !== userId) {\n      if (oldStatus === OpenQuestionStatus.Helping) {\n        throw new UnauthorizedException(\n          ERROR_MESSAGES.questionController.updateQuestion.otherTAHelping,\n        );\n      }\n      if (oldStatus === ClosedQuestionStatus.Resolved) {\n        throw new UnauthorizedException(\n          ERROR_MESSAGES.questionController.updateQuestion.otherTAResolved,\n        );\n      }\n    }\n\n    const validTransition = question.changeStatus(newStatus, Role.TA);\n    if (!validTransition) {\n      throw new UnauthorizedException(\n        ERROR_MESSAGES.questionController.updateQuestion.fsmViolation(\n          'TA',\n          question.status,\n          status,\n        ),\n      );\n    }\n\n    // Set TA as taHelped when the TA starts helping the student\n    if (\n      oldStatus !== OpenQuestionStatus.Helping &&\n      newStatus === OpenQuestionStatus.Helping\n    ) {\n      question.taHelped = await UserModel.findOne(userId);\n      question.helpedAt = new Date();\n\n      // Set firstHelpedAt if it hasn't already\n      if (!question.firstHelpedAt) {\n        question.firstHelpedAt = question.helpedAt;\n      }\n      await this.notifService.notifyUser(\n        question.creator.id,\n        NotifMsgs.queue.TA_HIT_HELPED(question.taHelped.name),\n      );\n    }\n    if (newStatus in ClosedQuestionStatus) {\n      question.closedAt = new Date();\n    }\n    if (newStatus in LimboQuestionStatus) {\n      // depends on if the question was passed in with its group preloaded\n      if (question.group) question.group = null;\n      else question.groupId = null;\n    }\n    try {\n      await question.save();\n    } catch (err) {\n      console.error(err);\n      throw new HttpException(\n        ERROR_MESSAGES.questionController.saveQError,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n    return question;\n  }\n\n  async validateNotHelpingOther(\n    newStatus: QuestionStatus,\n    userId: number,\n  ): Promise<void> {\n    const isAlreadyHelpingOne =\n      (await QuestionModel.count({\n        where: {\n          taHelpedId: userId,\n          status: OpenQuestionStatus.Helping,\n        },\n      })) === 1;\n    if (isAlreadyHelpingOne && newStatus === OpenQuestionStatus.Helping) {\n      throw new BadRequestException(\n        ERROR_MESSAGES.questionController.updateQuestion.taHelpingOther,\n      );\n    }\n  }\n}\n","import { ClosedQuestionStatus } from '@koh/common';\nimport {\n  Connection,\n  EntitySubscriberInterface,\n  EventSubscriber,\n  InsertEvent,\n  RemoveEvent,\n  UpdateEvent,\n} from 'typeorm';\nimport {\n  NotificationService,\n  NotifMsgs,\n} from '../notification/notification.service';\nimport { QueueSSEService } from '../queue/queue-sse.service';\nimport { QueueModel } from '../queue/queue.entity';\nimport { QuestionModel } from './question.entity';\n\n@EventSubscriber()\nexport class QuestionSubscriber\n  implements EntitySubscriberInterface<QuestionModel>\n{\n  private notifService: NotificationService;\n  private queueSSEService: QueueSSEService;\n  constructor(\n    connection: Connection,\n    notifService: NotificationService,\n    queueSSEService: QueueSSEService,\n  ) {\n    this.notifService = notifService;\n    this.queueSSEService = queueSSEService;\n    connection.subscribers.push(this);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  listenTo() {\n    return QuestionModel;\n  }\n\n  async afterUpdate(event: UpdateEvent<QuestionModel>): Promise<void> {\n    if (!event.entity) {\n      // TODO: this is kinda janky maybe fix\n      return;\n    }\n\n    await this.queueSSEService.updateQuestions(event.entity.queueId);\n    // Send push notification to students when they are hit 3rd in line\n    // if status updated to closed\n    if (\n      event.updatedColumns.find((c) => c.propertyName === 'status') &&\n      event.entity.status in ClosedQuestionStatus\n    ) {\n      // get 3rd in queue before and after this update\n      const previousThird = await QuestionModel.waitingInQueue(\n        event.entity.queueId,\n      )\n        .offset(2)\n        .getOne();\n      const third = await QuestionModel.waitingInQueue(event.entity.queueId)\n        .setQueryRunner(event.queryRunner) // Run in same transaction as the update\n        .offset(2)\n        .getOne();\n      if (third && previousThird?.id !== third?.id) {\n        const { creatorId } = third;\n        this.notifService.notifyUser(creatorId, NotifMsgs.queue.THIRD_PLACE);\n      }\n    }\n  }\n\n  async afterInsert(event: InsertEvent<QuestionModel>): Promise<void> {\n    const numberOfQuestions = await QuestionModel.waitingInQueue(\n      event.entity.queueId,\n    ).getCount();\n\n    if (numberOfQuestions === 0) {\n      const staff = (\n        await QueueModel.findOne(event.entity.queueId, {\n          relations: ['staffList'],\n        })\n      ).staffList;\n\n      staff.forEach((staff) => {\n        this.notifService.notifyUser(\n          staff.id,\n          NotifMsgs.ta.STUDENT_JOINED_EMPTY_QUEUE,\n        );\n      });\n    }\n\n    // Send all listening clients an update\n    await this.queueSSEService.updateQuestions(event.entity.queueId);\n  }\n\n  async beforeRemove(event: RemoveEvent<QuestionModel>): Promise<void> {\n    // due to cascades entity is not guaranteed to be loaded\n    if (event.entity) {\n      // Send all listening clients an update\n      await this.queueSSEService.updateQuestions(event.entity.queueId);\n    }\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { SeedController } from './seed.controller';\nimport { SeedService } from './seed.service';\n\n@Module({\n  controllers: [SeedController],\n  providers: [SeedService],\n})\nexport class SeedModule {}\n","import { CreateQuestionParams, Role } from '@koh/common';\nimport { Body, Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { AlertModel } from 'alerts/alerts.entity';\nimport { CourseSectionMappingModel } from 'login/course-section-mapping.entity';\nimport { DesktopNotifModel } from 'notification/desktop-notif.entity';\nimport { PhoneNotifModel } from 'notification/phone-notif.entity';\nimport { EventModel, EventType } from 'profile/event-model.entity';\nimport { UserCourseModel } from 'profile/user-course.entity';\nimport { UserModel } from 'profile/user.entity';\nimport { QuestionGroupModel } from 'question/question-group.entity';\nimport { Connection, getManager } from 'typeorm';\nimport {\n  CourseFactory,\n  EventFactory,\n  OfficeHourFactory,\n  QuestionFactory,\n  QueueFactory,\n  SemesterFactory,\n  UserCourseFactory,\n  UserFactory,\n} from '../../test/util/factories';\nimport { CourseModel } from '../course/course.entity';\nimport { OfficeHourModel } from '../course/office-hour.entity';\nimport { NonProductionGuard } from '../guards/non-production.guard';\nimport { QuestionModel } from '../question/question.entity';\nimport { QueueModel } from '../queue/queue.entity';\nimport { SeedService } from './seed.service';\n\n@Controller('seeds')\n@UseGuards(NonProductionGuard)\nexport class SeedController {\n  constructor(\n    private connection: Connection,\n    private seedService: SeedService,\n  ) {}\n\n  @Get('delete')\n  async deleteAll(): Promise<string> {\n    await this.seedService.deleteAll(OfficeHourModel);\n    await this.seedService.deleteAll(QuestionModel);\n    await this.seedService.deleteAll(QuestionGroupModel);\n    await this.seedService.deleteAll(QueueModel);\n    await this.seedService.deleteAll(UserCourseModel);\n    await this.seedService.deleteAll(EventModel);\n    await this.seedService.deleteAll(DesktopNotifModel);\n    await this.seedService.deleteAll(PhoneNotifModel);\n    await this.seedService.deleteAll(AlertModel);\n    await this.seedService.deleteAll(UserModel);\n    await this.seedService.deleteAll(CourseSectionMappingModel);\n    await this.seedService.deleteAll(CourseModel);\n    const manager = getManager();\n    manager.query('ALTER SEQUENCE user_model_id_seq RESTART WITH 1;');\n\n    return 'Data successfully reset';\n  }\n\n  @Get('create')\n  async createSeeds(): Promise<string> {\n    // First delete the old data\n    await this.deleteAll();\n\n    // Then add the new seed data\n    const now = new Date();\n\n    const yesterday = new Date();\n    yesterday.setUTCHours(now.getUTCHours() - 24);\n\n    const tomorrow = new Date();\n    tomorrow.setUTCHours(now.getUTCHours() + 19);\n\n    const officeHoursToday = await OfficeHourFactory.create({\n      startTime: now,\n      endTime: new Date(now.valueOf() + 4500000),\n    });\n    const officeHoursTodayOverlap = await OfficeHourFactory.create({\n      startTime: new Date(now.valueOf() - 4500000),\n      endTime: new Date(now.valueOf() + 1000000),\n    });\n    const officeHoursYesterday = await OfficeHourFactory.create({\n      startTime: yesterday,\n      endTime: new Date(yesterday.valueOf() + 4500000),\n    });\n    const officeHoursTomorrow = await OfficeHourFactory.create({\n      startTime: tomorrow,\n      endTime: new Date(tomorrow.valueOf() + 4500000),\n    });\n    const professorOfficeHours = await OfficeHourFactory.create({\n      startTime: now,\n      endTime: new Date(now.valueOf() + 4500000),\n    });\n\n    const courseExists = await CourseModel.findOne({\n      where: { name: 'CS 2500' },\n    });\n    if (!courseExists) {\n      await SemesterFactory.create({ season: 'Fall', year: 2020 });\n      await CourseFactory.create({ timezone: 'America/New_York' });\n    }\n\n    const course = await CourseModel.findOne({\n      where: { name: 'CS 2500' },\n      relations: ['officeHours'],\n    });\n\n    course.officeHours = [\n      officeHoursToday,\n      officeHoursYesterday,\n      officeHoursTomorrow,\n      officeHoursTodayOverlap,\n      professorOfficeHours,\n    ];\n    course.save();\n\n    const userExists = await UserModel.findOne();\n    if (!userExists) {\n      // Student 1\n      const user1 = await UserFactory.create({\n        email: 'liu.sta@northeastern.edu',\n        firstName: 'Stanley',\n        lastName: 'Liu',\n      });\n      await UserCourseFactory.create({\n        user: user1,\n        role: Role.STUDENT,\n        course: course,\n      });\n\n      // Student 2\n      const user2 = await UserFactory.create({\n        email: 'takayama.a@northeastern.edu',\n        firstName: 'Alex',\n        lastName: 'Takayama',\n      });\n      await UserCourseFactory.create({\n        user: user2,\n        role: Role.STUDENT,\n        course: course,\n        override: true,\n      });\n\n      // TA 1\n      const user3 = await UserFactory.create({\n        email: 'stenzel.w@northeastern.edu',\n        firstName: 'Will',\n        lastName: 'Stenzel',\n      });\n      await UserCourseFactory.create({\n        user: user3,\n        role: Role.TA,\n        course: course,\n      });\n      // TA 2\n      const user4 = await UserFactory.create({\n        email: 'chu.daj@northeastern.edu',\n        firstName: 'Da-Jin',\n        lastName: 'Chu',\n      });\n      await UserCourseFactory.create({\n        user: user4,\n        role: Role.TA,\n        course: course,\n      });\n      // Professor (Snarky!!)\n      const user5 = await UserFactory.create({\n        email: 'li.edwa@northeastern.edu',\n        firstName: 'Eddy',\n        lastName: 'Li',\n        photoURL:\n          'https://ca.slack-edge.com/TE565NU79-UR6P32JBT-a6c89822c544-512',\n        insights: [\n          'QuestionTypeBreakdown',\n          'TotalQuestionsAsked',\n          'TotalStudents',\n        ],\n      });\n      await UserCourseFactory.create({\n        user: user5,\n        role: Role.PROFESSOR,\n        course: course,\n      });\n    }\n\n    const queue = await QueueFactory.create({\n      room: 'Online',\n      course: course,\n      officeHours: [\n        officeHoursToday,\n        officeHoursYesterday,\n        officeHoursTomorrow,\n        officeHoursTodayOverlap,\n      ],\n      allowQuestions: true,\n    });\n\n    await QuestionFactory.create({\n      queue: queue,\n      createdAt: new Date(Date.now() - 3500000),\n    });\n    await QuestionFactory.create({\n      queue: queue,\n      createdAt: new Date(Date.now() - 2500000),\n    });\n    await QuestionFactory.create({\n      queue: queue,\n      createdAt: new Date(Date.now() - 1500000),\n    });\n\n    const eventTA = await UserModel.findOne({\n      where: {\n        firstName: 'Will',\n      },\n    });\n\n    await EventFactory.create({\n      user: eventTA,\n      course: course,\n      time: yesterday,\n      eventType: EventType.TA_CHECKED_IN,\n    });\n\n    await EventFactory.create({\n      user: eventTA,\n      course: course,\n      time: new Date(Date.now() - 80000000),\n      eventType: EventType.TA_CHECKED_OUT,\n    });\n\n    await EventFactory.create({\n      user: eventTA,\n      course: course,\n      time: new Date(Date.now() - 70000000),\n      eventType: EventType.TA_CHECKED_IN,\n    });\n\n    const todayAtMidnight = new Date();\n    todayAtMidnight.setHours(0, 0, 0, 0);\n\n    await EventFactory.create({\n      user: eventTA,\n      course: course,\n      time: todayAtMidnight,\n      eventType: EventType.TA_CHECKED_OUT_FORCED,\n    });\n\n    const professorQueue = await QueueFactory.create({\n      room: \"Professor Li's Hours\",\n      course: course,\n      officeHours: [professorOfficeHours],\n      allowQuestions: true,\n      isProfessorQueue: true,\n    });\n\n    await QuestionFactory.create({\n      queue: professorQueue,\n      createdAt: new Date(Date.now() - 1500000),\n    });\n\n    return 'Data successfully seeded';\n  }\n\n  @Get('fill_queue')\n  async fillQueue(): Promise<string> {\n    const queue = await QueueModel.findOne();\n\n    await QuestionFactory.create({\n      queue: queue,\n      createdAt: new Date(Date.now() - 1500000),\n    });\n    await QuestionFactory.create({\n      queue: queue,\n      createdAt: new Date(Date.now() - 1500000),\n    });\n    await QuestionFactory.create({\n      queue: queue,\n      createdAt: new Date(Date.now() - 1500000),\n    });\n\n    return 'Data successfully seeded';\n  }\n\n  @Post('createUser')\n  async createUser(\n    @Body() body: { role: Role; courseId: number },\n  ): Promise<UserCourseModel> {\n    let ta: UserCourseModel;\n    if (body.courseId) {\n      const course = await CourseModel.findOneOrFail(body.courseId);\n      ta = await UserCourseFactory.create({ role: body.role, course: course });\n    } else {\n      ta = await UserCourseFactory.create({ role: body.role });\n    }\n    return ta;\n  }\n\n  @Post('createQueue')\n  async createQueue(\n    @Body()\n    body: {\n      courseId: number;\n      allowQuestions: boolean;\n      // closes in n milliseconds from now\n      closesIn?: number;\n    },\n  ): Promise<QueueModel> {\n    const now = new Date();\n    const officeHours = await OfficeHourFactory.create({\n      startTime: now,\n      endTime: new Date(now.valueOf() + (body?.closesIn || 4500000)),\n    });\n    const options = {\n      officeHours: [officeHours],\n      allowQuestions: body.allowQuestions ?? false,\n    };\n    if (body.courseId) {\n      const course = await CourseModel.findOneOrFail(body.courseId);\n      options['course'] = course;\n    }\n    const queue: QueueModel = await QueueFactory.create(options);\n    return queue;\n  }\n\n  @Post('createQuestion')\n  async createQuestion(\n    @Body()\n    body: {\n      queueId: number;\n      studentId: number;\n      data: CreateQuestionParams;\n    },\n  ): Promise<QuestionModel> {\n    const options = {};\n    if (body.queueId) {\n      const queue = await QueueModel.findOneOrFail(body.queueId);\n      options['queue'] = queue;\n    }\n    if (body.studentId) {\n      const student = await UserModel.findOneOrFail(body.studentId);\n      options['creator'] = student;\n    }\n    const question: QuestionModel = await QuestionFactory.create({\n      ...options,\n      ...body.data,\n      createdAt: new Date(),\n    });\n    return question;\n  }\n\n  @Post('createQueueWithoutOfficeHour')\n  async createQueueWithoutOfficeHour(\n    @Body()\n    body: {\n      courseId: number;\n      allowQuestions: boolean;\n    },\n  ): Promise<QueueModel> {\n    const options = {\n      allowQuestions: body.allowQuestions ?? false,\n      officeHours: [],\n    };\n    if (body.courseId) {\n      const course = await CourseModel.findOneOrFail(body.courseId);\n      options['course'] = course;\n    }\n    return await QueueFactory.create(options);\n  }\n}\n","import { QuestionType, Role } from '@koh/common';\nimport { QuestionGroupModel } from 'question/question-group.entity';\nimport { EventModel, EventType } from 'profile/event-model.entity';\nimport { Factory } from 'typeorm-factory';\nimport { CourseModel } from '../../src/course/course.entity';\nimport { OfficeHourModel } from '../../src/course/office-hour.entity';\nimport { SemesterModel } from '../../src/semester/semester.entity';\nimport { CourseSectionMappingModel } from '../../src/login/course-section-mapping.entity';\nimport { UserCourseModel } from '../../src/profile/user-course.entity';\nimport { UserModel } from '../../src/profile/user.entity';\nimport { QuestionModel } from '../../src/question/question.entity';\nimport { QueueModel } from '../../src/queue/queue.entity';\n\nexport const UserFactory = new Factory(UserModel)\n  .attr('email', `user@neu.edu`)\n  .attr('firstName', 'User')\n  .attr('lastName', 'Person')\n  .attr('hideInsights', []);\n\nexport const StudentCourseFactory = new Factory(UserCourseModel).attr(\n  'role',\n  Role.STUDENT,\n);\n\nexport const TACourseFactory = new Factory(UserCourseModel).attr(\n  'role',\n  Role.TA,\n);\n\nexport const SemesterFactory = new Factory(SemesterModel)\n  .attr('season', 'Fall')\n  .attr('year', 2020);\n\nexport const ClosedOfficeHourFactory = new Factory(OfficeHourModel)\n  .attr('title', 'Alex & Stanley')\n  .attr('startTime', new Date('2020-05-20T14:00:00.000Z'))\n  .attr('endTime', new Date('2020-05-20T15:30:00.000Z'));\n\nexport const OfficeHourFactory = new Factory(OfficeHourModel)\n  .attr('title', 'Alex & Stanley')\n  .attr('startTime', new Date(new Date().getTime() - 3600000))\n  .attr('endTime', new Date(new Date().getTime() + 3600000));\n\nexport const CourseFactory = new Factory(CourseModel)\n  .attr('name', 'CS 2500')\n  .attr('icalURL', 'http://hi.com')\n  .attr('enabled', true)\n  .assocOne('semester', SemesterFactory)\n  .assocMany('officeHours', OfficeHourFactory, 0);\n\nexport const CourseSectionFactory = new Factory(CourseSectionMappingModel)\n  .attr('genericCourseName', 'CS 2500')\n  .sequence('section', (i) => i)\n  .assocOne('course', CourseFactory);\n\nexport const UserCourseFactory = new Factory(UserCourseModel)\n  .assocOne('user', UserFactory)\n  .assocOne('course', CourseFactory)\n  .attr('role', Role.STUDENT)\n  .attr('override', false);\n\nexport const QueueFactory = new Factory(QueueModel)\n  .attr('room', 'Online')\n  .assocOne('course', CourseFactory)\n  .attr('allowQuestions', false)\n  .assocMany('officeHours', OfficeHourFactory)\n  .assocMany('staffList', UserFactory, 0)\n  .attr('isProfessorQueue', false);\n\n// WARNING: DO NOT USE CREATORID. AS YOU SEE HERE, WE ONLY ACCEPT CREATOR\n//TODO: make it accept creatorId as well\nexport const QuestionFactory = new Factory(QuestionModel)\n  .attr('text', 'question description')\n  .attr('status', 'Queued')\n  .attr('questionType', QuestionType.Other)\n  .attr('groupable', true)\n  .assocOne('queue', QueueFactory)\n  .assocOne('creator', UserFactory)\n  .attr('createdAt', new Date());\n\nexport const QuestionGroupFactory = new Factory(QuestionGroupModel)\n  .assocOne('creator', UserCourseFactory)\n  .assocOne('queue', QueueFactory);\n\nexport const EventFactory = new Factory(EventModel)\n  .attr('time', new Date())\n  .attr('eventType', EventType.TA_CHECKED_IN)\n  .assocOne('user', UserFactory)\n  .assocOne('course', CourseFactory);\n","module.exports = require(\"typeorm-factory\");","import { Injectable } from '@nestjs/common';\nimport { getConnection } from 'typeorm';\n\n@Injectable()\nexport class SeedService {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  async deleteAll(model: any): Promise<void> {\n    await getConnection().createQueryBuilder().delete().from(model).execute();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { SemesterController } from './semester.controller';\n\n@Module({\n  controllers: [SemesterController],\n})\nexport class SemesterModule {}\n","import { SemesterPartial } from '@koh/common';\nimport { Controller, Get } from '@nestjs/common';\nimport { SemesterModel } from './semester.entity';\n\n@Controller('semesters')\nexport class SemesterController {\n  @Get()\n  async get(): Promise<SemesterPartial[]> {\n    return SemesterModel.find();\n  }\n}\n","import { PipeTransform, Injectable, ArgumentMetadata } from '@nestjs/common';\n\n/**\n * Strip undefined properties from body.\n */\n@Injectable()\nexport class StripUndefinedPipe implements PipeTransform {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  transform(value: any, metadata: ArgumentMetadata): any {\n    if (metadata.type === 'body') {\n      this.dropUndefined(value);\n      return value;\n    }\n    return value;\n  }\n\n  private dropUndefined(obj: unknown) {\n    for (const key of Object.keys(obj)) {\n      if (obj[key] === undefined) {\n        delete obj[key];\n      } else if (typeof obj[key] === 'object' && obj[key] !== null) {\n        this.dropUndefined(obj[key]);\n      }\n    }\n  }\n}\n"],"sourceRoot":""}