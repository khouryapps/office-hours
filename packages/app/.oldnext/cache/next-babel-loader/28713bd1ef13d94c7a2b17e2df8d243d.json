{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport { HourglassOutlined, QuestionOutlined } from \"@ant-design/icons\";\nimport { OpenQuestionStatus } from \"@koh/common\";\nimport { Badge } from \"antd\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { getWaitTime } from \"../../../utils/TimeUtil\";\nimport { KOHAvatar } from \"../../common/SelfAvatar\";\n\nfunction truncate(string, length) {\n  if (string.length > length) {\n    return string.substring(0, length - 3) + \"...\";\n  }\n\n  return string;\n}\n\nvar Container = styled.div.withConfig({\n  displayName: \"TAQueueListItem__Container\",\n  componentId: \"sc-1nf4mks-0\"\n})([\"display:flex;align-items:flex-start;padding-top:16px;padding-bottom:12px;border-bottom:1px solid #cfd6de;background:\", \";cursor:pointer;&:hover{background:\", \";}\"], function (_ref) {\n  var selected = _ref.selected;\n  return selected ? \"#EFF8FF\" : \"white\";\n}, function (_ref2) {\n  var selected = _ref2.selected;\n  return selected ? \"#EFF8FF\" : \"#ECF0F3\";\n});\nvar AvatarContainer = styled.div.withConfig({\n  displayName: \"TAQueueListItem__AvatarContainer\",\n  componentId: \"sc-1nf4mks-1\"\n})([\"margin:10px 12px 0 25px;display:block;\"]);\nvar QuestionInfoContainer = styled.div.withConfig({\n  displayName: \"TAQueueListItem__QuestionInfoContainer\",\n  componentId: \"sc-1nf4mks-2\"\n})([\"\"]);\nvar Name = styled.div.withConfig({\n  displayName: \"TAQueueListItem__Name\",\n  componentId: \"sc-1nf4mks-3\"\n})([\"color:#212934;\"]);\nvar QuestionText = styled.div.withConfig({\n  displayName: \"TAQueueListItem__QuestionText\",\n  componentId: \"sc-1nf4mks-4\"\n})([\"padding-right:8px;color:#595959;\"]);\nexport default function TAQueueListItem(_ref3) {\n  var index = _ref3.index,\n      selected = _ref3.selected,\n      question = _ref3.question,\n      onClick = _ref3.onClick;\n  var isDrafting = question.status === OpenQuestionStatus.Drafting;\n  var metaInfo = [[__jsx(HourglassOutlined, {\n    key: \"h\"\n  }), getWaitTime(question)]];\n\n  if (!isDrafting) {\n    metaInfo.push([__jsx(QuestionOutlined, {\n      key: \"q\"\n    }), question.questionType]);\n  }\n\n  return __jsx(Container, {\n    onClick: onClick,\n    selected: selected,\n    \"data-cy\": \"queue-list-item-\".concat(question.id)\n  }, __jsx(AvatarContainer, null, __jsx(Badge // 0 is not displayed, hide if no index\n  , {\n    count: index ? \"#\".concat(index) : 0,\n    style: {\n      backgroundColor: \"#3684c6\"\n    },\n    offset: [-40, 0]\n  }, __jsx(KOHAvatar, {\n    size: 40,\n    name: question.creator.name,\n    photoURL: question.creator.photoURL\n  }))), __jsx(QuestionInfoContainer, null, __jsx(Name, null, question.creator.name), __jsx(QuestionText, null, isDrafting ? __jsx(\"i\", null, \"Still Drafting...\") : truncate(question.text, 80)), __jsx(QuestionMetaRow, {\n    info: metaInfo\n  })));\n}\n/**\n * Row of the meta info. Icon and text pairs separated by dividers.\n */\n\nvar RowContainer = styled.div.withConfig({\n  displayName: \"TAQueueListItem__RowContainer\",\n  componentId: \"sc-1nf4mks-5\"\n})([\"margin-top:8px;display:flex;align-items:center;color:#8895a6;\"]);\nvar Divider = styled.div.withConfig({\n  displayName: \"TAQueueListItem__Divider\",\n  componentId: \"sc-1nf4mks-6\"\n})([\"margin-left:12px;margin-right:8px;\"]);\nvar Spacer = styled.div.withConfig({\n  displayName: \"TAQueueListItem__Spacer\",\n  componentId: \"sc-1nf4mks-7\"\n})([\"margin-left:5px;\"]);\n\nfunction QuestionMetaRow(_ref4) {\n  var info = _ref4.info;\n  return __jsx(RowContainer, null, info.map(function (_ref5, i) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n        icon = _ref6[0],\n        text = _ref6[1];\n\n    return [i > 0 && __jsx(Divider, {\n      key: text\n    }, \"|\"), icon, __jsx(Spacer, {\n      key: text + \"space\"\n    }), text];\n  }).flat().filter(function (e) {\n    return !!e;\n  }));\n}","map":{"version":3,"sources":["/home/runner/work/office-hours/office-hours/packages/app/components/Queue/TA/TAQueueListItem.tsx"],"names":["HourglassOutlined","QuestionOutlined","OpenQuestionStatus","Badge","React","styled","getWaitTime","KOHAvatar","truncate","string","length","substring","Container","div","selected","AvatarContainer","QuestionInfoContainer","Name","QuestionText","TAQueueListItem","index","question","onClick","isDrafting","status","Drafting","metaInfo","push","questionType","id","backgroundColor","creator","name","photoURL","text","RowContainer","Divider","Spacer","QuestionMetaRow","info","map","i","icon","flat","filter","e"],"mappings":"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","sourcesContent":["import { HourglassOutlined, QuestionOutlined } from \"@ant-design/icons\";\nimport { OpenQuestionStatus, Question } from \"@koh/common\";\nimport { Badge } from \"antd\";\nimport React, { ReactElement } from \"react\";\nimport styled from \"styled-components\";\nimport { getWaitTime } from \"../../../utils/TimeUtil\";\nimport AvatarWithInitials from \"../../common/AvatarWithInitials\";\nimport { KOHAvatar } from \"../../common/SelfAvatar\";\n\nfunction truncate(string: string, length: number) {\n  if (string.length > length) {\n    return string.substring(0, length - 3) + \"...\";\n  }\n  return string;\n}\n\nconst Container = styled.div<{ selected: boolean }>`\n  display: flex;\n  align-items: flex-start;\n\n  padding-top: 16px;\n  padding-bottom: 12px;\n  border-bottom: 1px solid #cfd6de;\n  background: ${({ selected }) => (selected ? \"#EFF8FF\" : \"white\")};\n\n  cursor: pointer;\n  &:hover {\n    background: ${({ selected }) => (selected ? \"#EFF8FF\" : \"#ECF0F3\")};\n  }\n`;\nconst AvatarContainer = styled.div`\n  margin: 10px 12px 0 25px;\n  display: block;\n`;\nconst QuestionInfoContainer = styled.div``;\n\nconst Name = styled.div`\n  color: #212934;\n`;\nconst QuestionText = styled.div`\n  padding-right: 8px;\n  color: #595959;\n`;\n\nexport default function TAQueueListItem({\n  index,\n  selected,\n  question,\n  onClick,\n}: {\n  index: number | false;\n  selected: boolean;\n  question: Question;\n  onClick: () => void;\n}): ReactElement {\n  const isDrafting = question.status === OpenQuestionStatus.Drafting;\n\n  const metaInfo: [ReactElement, string][] = [\n    [<HourglassOutlined key=\"h\" />, getWaitTime(question)],\n  ];\n  if (!isDrafting) {\n    metaInfo.push([<QuestionOutlined key=\"q\" />, question.questionType]);\n  }\n  return (\n    <Container\n      onClick={onClick}\n      selected={selected}\n      data-cy={`queue-list-item-${question.id}`}\n    >\n      <AvatarContainer>\n        <Badge\n          // 0 is not displayed, hide if no index\n          count={index ? `#${index}` : 0}\n          style={{ backgroundColor: \"#3684c6\" }}\n          offset={[-40, 0]}\n        >\n          <KOHAvatar\n            size={40}\n            name={question.creator.name}\n            photoURL={question.creator.photoURL}\n          />\n        </Badge>\n      </AvatarContainer>\n      <QuestionInfoContainer>\n        <Name>{question.creator.name}</Name>\n        <QuestionText>\n          {isDrafting ? <i>Still Drafting...</i> : truncate(question.text, 80)}\n        </QuestionText>\n        <QuestionMetaRow info={metaInfo} />\n      </QuestionInfoContainer>\n    </Container>\n  );\n}\n\n/**\n * Row of the meta info. Icon and text pairs separated by dividers.\n */\nconst RowContainer = styled.div`\n  margin-top: 8px;\n  display: flex;\n  align-items: center;\n  color: #8895a6;\n`;\nconst Divider = styled.div`\n  margin-left: 12px;\n  margin-right: 8px;\n`;\nconst Spacer = styled.div`\n  margin-left: 5px;\n`;\nfunction QuestionMetaRow({\n  info,\n}: {\n  info: [ReactElement, string][];\n}): ReactElement {\n  return (\n    <RowContainer>\n      {info\n        .map(([icon, text], i) => [\n          i > 0 && <Divider key={text}>|</Divider>,\n          icon,\n          <Spacer key={text + \"space\"} />,\n          text,\n        ])\n        .flat()\n        .filter((e) => !!e)}\n    </RowContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}