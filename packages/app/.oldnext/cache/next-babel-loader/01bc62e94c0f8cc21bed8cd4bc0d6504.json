{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport { API } from \"@koh/api-client\";\nimport { Button } from \"antd\";\nimport React, { useState } from \"react\";\nvar CalendarUpdateStatus;\n\n(function (CalendarUpdateStatus) {\n  CalendarUpdateStatus[CalendarUpdateStatus[\"BEFORE\"] = 0] = \"BEFORE\";\n  CalendarUpdateStatus[CalendarUpdateStatus[\"UPDATING\"] = 1] = \"UPDATING\";\n  CalendarUpdateStatus[CalendarUpdateStatus[\"AFTER\"] = 2] = \"AFTER\";\n})(CalendarUpdateStatus || (CalendarUpdateStatus = {}));\n\nexport default function UpdateCalendarButton(_ref) {\n  var courseId = _ref.courseId;\n\n  var _useState = useState(CalendarUpdateStatus.BEFORE),\n      updated = _useState[0],\n      setUpdated = _useState[1];\n\n  var updateCalendar = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setUpdated(CalendarUpdateStatus.UPDATING);\n              _context.next = 3;\n              return API.course.updateCalendar(courseId);\n\n            case 3:\n              setUpdated(CalendarUpdateStatus.AFTER);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function updateCalendar() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  switch (updated) {\n    case CalendarUpdateStatus.BEFORE:\n      return __jsx(Button, {\n        type: \"primary\",\n        onClick: updateCalendar\n      }, \"Update Calendar\");\n\n    case CalendarUpdateStatus.UPDATING:\n      return __jsx(Button, {\n        type: \"primary\",\n        loading: true\n      }, \"Updating Calendar...\");\n\n    case CalendarUpdateStatus.AFTER:\n      return __jsx(Button, {\n        type: \"primary\",\n        disabled: true\n      }, \"Calendar Updated!\");\n  }\n}","map":{"version":3,"sources":["/home/runner/work/office-hours/office-hours/packages/app/components/Schedule/UpdateCalendarButton.tsx"],"names":["API","Button","React","useState","CalendarUpdateStatus","UpdateCalendarButton","courseId","BEFORE","updated","setUpdated","updateCalendar","UPDATING","course","AFTER"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,iBAApB;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,OAAOC,KAAP,IAA8BC,QAA9B,QAA8C,OAA9C;IAEKC,oB;;WAAAA,oB;AAAAA,EAAAA,oB,CAAAA,oB;AAAAA,EAAAA,oB,CAAAA,oB;AAAAA,EAAAA,oB,CAAAA,oB;GAAAA,oB,KAAAA,oB;;AAUL,eAAe,SAASC,oBAAT,OAE6B;AAAA,MAD1CC,QAC0C,QAD1CA,QAC0C;;AAAA,kBACZH,QAAQ,CAACC,oBAAoB,CAACG,MAAtB,CADI;AAAA,MACnCC,OADmC;AAAA,MAC1BC,UAD0B;;AAG1C,MAAMC,cAAc;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AACrBD,cAAAA,UAAU,CAACL,oBAAoB,CAACO,QAAtB,CAAV;AADqB;AAAA,qBAEfX,GAAG,CAACY,MAAJ,CAAWF,cAAX,CAA0BJ,QAA1B,CAFe;;AAAA;AAGrBG,cAAAA,UAAU,CAACL,oBAAoB,CAACS,KAAtB,CAAV;;AAHqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAdH,cAAc;AAAA;AAAA;AAAA,KAApB;;AAMA,UAAQF,OAAR;AACE,SAAKJ,oBAAoB,CAACG,MAA1B;AACE,aACE,MAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,OAAO,EAAEG;AAAhC,2BADF;;AAKF,SAAKN,oBAAoB,CAACO,QAA1B;AACE,aACE,MAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,OAAO;AAA9B,gCADF;;AAKF,SAAKP,oBAAoB,CAACS,KAA1B;AACE,aACE,MAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,QAAQ;AAA/B,6BADF;AAdJ;AAoBD","sourcesContent":["import { API } from \"@koh/api-client\";\nimport { Button } from \"antd\";\nimport React, { ReactElement, useState } from \"react\";\n\nenum CalendarUpdateStatus {\n  BEFORE,\n  UPDATING,\n  AFTER,\n}\n\ntype UpdateCalendarButtonProps = {\n  courseId: number;\n};\n\nexport default function UpdateCalendarButton({\n  courseId,\n}: UpdateCalendarButtonProps): ReactElement {\n  const [updated, setUpdated] = useState(CalendarUpdateStatus.BEFORE);\n\n  const updateCalendar = async () => {\n    setUpdated(CalendarUpdateStatus.UPDATING);\n    await API.course.updateCalendar(courseId);\n    setUpdated(CalendarUpdateStatus.AFTER);\n  };\n\n  switch (updated) {\n    case CalendarUpdateStatus.BEFORE:\n      return (\n        <Button type=\"primary\" onClick={updateCalendar}>\n          Update Calendar\n        </Button>\n      );\n    case CalendarUpdateStatus.UPDATING:\n      return (\n        <Button type=\"primary\" loading>\n          Updating Calendar...\n        </Button>\n      );\n    case CalendarUpdateStatus.AFTER:\n      return (\n        <Button type=\"primary\" disabled>\n          Calendar Updated!\n        </Button>\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}