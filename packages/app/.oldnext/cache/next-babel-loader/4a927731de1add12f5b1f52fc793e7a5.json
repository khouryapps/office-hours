{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { API } from \"@koh/api-client\";\nimport { urlB64ToUint8Array } from \"./urlB64ToUint8Array\";\nimport platform from \"platform\";\n\nvar doesBrowserSupportNotifications = function doesBrowserSupportNotifications() {\n  return \"serviceWorker\" in window.navigator && \"PushManager\" in window;\n};\n\nexport var NotificationStates;\n\n(function (NotificationStates) {\n  NotificationStates[NotificationStates[\"granted\"] = 0] = \"granted\";\n  NotificationStates[NotificationStates[\"notAllowed\"] = 1] = \"notAllowed\";\n  NotificationStates[NotificationStates[\"browserUnsupported\"] = 2] = \"browserUnsupported\";\n})(NotificationStates || (NotificationStates = {}));\n\nexport function getNotificationState() {\n  if (!doesBrowserSupportNotifications()) {\n    return NotificationStates.browserUnsupported;\n  } else if (Notification.permission === \"granted\") {\n    return NotificationStates.granted;\n  } else {\n    return NotificationStates.notAllowed;\n  }\n} // Tries to get notification permission and returns whether granted\n\nexport function requestNotificationPermission() {\n  return _requestNotificationPermission.apply(this, arguments);\n}\n\nfunction _requestNotificationPermission() {\n  _requestNotificationPermission = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var state;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            state = getNotificationState();\n\n            if (!(state === NotificationStates.notAllowed)) {\n              _context3.next = 5;\n              break;\n            }\n\n            _context3.next = 4;\n            return window.Notification.requestPermission();\n\n          case 4:\n            state = getNotificationState();\n\n          case 5:\n            return _context3.abrupt(\"return\", state);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _requestNotificationPermission.apply(this, arguments);\n}\n\nvar getRegistration = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _window$navigator, _window$navigator$ser;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return (_window$navigator = window.navigator) === null || _window$navigator === void 0 ? void 0 : (_window$navigator$ser = _window$navigator.serviceWorker) === null || _window$navigator$ser === void 0 ? void 0 : _window$navigator$ser.getRegistration();\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getRegistration() {\n    return _ref.apply(this, arguments);\n  };\n}(); // 1. subscribe to pushmanager\n// 2. send subscription info to our backend\n\n\nexport var registerNotificationSubscription = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var subscription, subData;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!doesBrowserSupportNotifications()) {\n              _context2.next = 7;\n              break;\n            }\n\n            _context2.next = 3;\n            return ensureSubscription();\n\n          case 3:\n            subscription = _context2.sent;\n            subData = subscription.toJSON();\n            _context2.next = 7;\n            return API.notif.desktop.register(_objectSpread(_objectSpread({}, subData), {}, {\n              name: \"\".concat(platform.name, \" on \").concat(platform.os)\n            }));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function registerNotificationSubscription() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * Ensure we are subscribed to our browser's push service\n */\n\nfunction ensureSubscription() {\n  return _ensureSubscription.apply(this, arguments);\n}\n\nfunction _ensureSubscription() {\n  _ensureSubscription = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var _yield$getRegistratio;\n\n    var pushManager, subscription, PUBLICKEY, applicationServerKey, options;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return getRegistration();\n\n          case 2:\n            _context4.t1 = _yield$getRegistratio = _context4.sent;\n            _context4.t0 = _context4.t1 === null;\n\n            if (_context4.t0) {\n              _context4.next = 6;\n              break;\n            }\n\n            _context4.t0 = _yield$getRegistratio === void 0;\n\n          case 6:\n            if (!_context4.t0) {\n              _context4.next = 10;\n              break;\n            }\n\n            _context4.t2 = void 0;\n            _context4.next = 11;\n            break;\n\n          case 10:\n            _context4.t2 = _yield$getRegistratio.pushManager;\n\n          case 11:\n            pushManager = _context4.t2;\n            _context4.next = 14;\n            return pushManager === null || pushManager === void 0 ? void 0 : pushManager.getSubscription();\n\n          case 14:\n            subscription = _context4.sent;\n\n            if (!(subscription === null)) {\n              _context4.next = 25;\n              break;\n            }\n\n            _context4.next = 18;\n            return API.notif.desktop.credentials();\n\n          case 18:\n            PUBLICKEY = _context4.sent;\n            console.log(PUBLICKEY);\n            applicationServerKey = urlB64ToUint8Array(PUBLICKEY);\n            options = {\n              applicationServerKey: applicationServerKey,\n              userVisibleOnly: true\n            };\n            _context4.next = 24;\n            return pushManager.subscribe(options);\n\n          case 24:\n            subscription = _context4.sent;\n\n          case 25:\n            return _context4.abrupt(\"return\", subscription);\n\n          case 26:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _ensureSubscription.apply(this, arguments);\n}\n\nexport function getEndpoint() {\n  return _getEndpoint.apply(this, arguments);\n}\n\nfunction _getEndpoint() {\n  _getEndpoint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var _yield$getRegistratio2, _yield$getRegistratio3;\n\n    var subscription;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return getRegistration();\n\n          case 2:\n            _context5.t1 = _yield$getRegistratio2 = _context5.sent;\n            _context5.t0 = _context5.t1 === null;\n\n            if (_context5.t0) {\n              _context5.next = 6;\n              break;\n            }\n\n            _context5.t0 = _yield$getRegistratio2 === void 0;\n\n          case 6:\n            if (!_context5.t0) {\n              _context5.next = 10;\n              break;\n            }\n\n            _context5.t2 = void 0;\n            _context5.next = 11;\n            break;\n\n          case 10:\n            _context5.t2 = (_yield$getRegistratio3 = _yield$getRegistratio2.pushManager) === null || _yield$getRegistratio3 === void 0 ? void 0 : _yield$getRegistratio3.getSubscription();\n\n          case 11:\n            _context5.next = 13;\n            return _context5.t2;\n\n          case 13:\n            subscription = _context5.sent;\n            return _context5.abrupt(\"return\", subscription === null || subscription === void 0 ? void 0 : subscription.endpoint);\n\n          case 15:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _getEndpoint.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/runner/work/office-hours/office-hours/packages/app/utils/notification.ts"],"names":["API","urlB64ToUint8Array","platform","doesBrowserSupportNotifications","window","navigator","NotificationStates","getNotificationState","browserUnsupported","Notification","permission","granted","notAllowed","requestNotificationPermission","state","requestPermission","getRegistration","serviceWorker","registerNotificationSubscription","ensureSubscription","subscription","subData","toJSON","notif","desktop","register","name","os","pushManager","getSubscription","credentials","PUBLICKEY","console","log","applicationServerKey","options","userVisibleOnly","subscribe","getEndpoint","endpoint"],"mappings":"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","sourcesContent":["import { API } from \"@koh/api-client\";\nimport { DesktopNotifBody } from \"@koh/common\";\nimport { urlB64ToUint8Array } from \"./urlB64ToUint8Array\";\nimport platform from \"platform\";\n\nconst doesBrowserSupportNotifications = () =>\n  \"serviceWorker\" in window.navigator && \"PushManager\" in window;\n\nexport enum NotificationStates {\n  granted,\n  notAllowed,\n  browserUnsupported,\n}\n\nexport function getNotificationState(): NotificationStates {\n  if (!doesBrowserSupportNotifications()) {\n    return NotificationStates.browserUnsupported;\n  } else if (Notification.permission === \"granted\") {\n    return NotificationStates.granted;\n  } else {\n    return NotificationStates.notAllowed;\n  }\n}\n\n// Tries to get notification permission and returns whether granted\nexport async function requestNotificationPermission(): Promise<NotificationStates> {\n  let state = getNotificationState();\n  if (state === NotificationStates.notAllowed) {\n    await window.Notification.requestPermission();\n    state = getNotificationState();\n  }\n  return state;\n}\n\nconst getRegistration = async (): Promise<ServiceWorkerRegistration> =>\n  await window.navigator?.serviceWorker?.getRegistration();\n\n// 1. subscribe to pushmanager\n// 2. send subscription info to our backend\nexport const registerNotificationSubscription = async (): Promise<void> => {\n  if (doesBrowserSupportNotifications()) {\n    const subscription = await ensureSubscription();\n    const subData = subscription.toJSON() as DesktopNotifBody;\n    await API.notif.desktop.register({\n      ...subData,\n      name: `${platform.name} on ${platform.os}`,\n    });\n  }\n};\n\n/**\n * Ensure we are subscribed to our browser's push service\n */\nasync function ensureSubscription(): Promise<PushSubscription> {\n  const pushManager = (await getRegistration())?.pushManager;\n  let subscription = await pushManager?.getSubscription();\n  if (subscription === null) {\n    const PUBLICKEY = await API.notif.desktop.credentials();\n    console.log(PUBLICKEY);\n    const applicationServerKey = urlB64ToUint8Array(PUBLICKEY);\n    const options = { applicationServerKey, userVisibleOnly: true };\n    subscription = await pushManager.subscribe(options);\n  }\n  return subscription;\n}\n\nexport async function getEndpoint(): Promise<string | NotificationStates> {\n  const subscription = await (\n    await getRegistration()\n  )?.pushManager?.getSubscription();\n  return subscription?.endpoint;\n}\n"]},"metadata":{},"sourceType":"module"}