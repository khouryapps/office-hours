{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { MinusCircleOutlined, QuestionCircleOutlined } from \"@ant-design/icons\";\nimport { API } from \"@koh/api-client\";\nimport { ERROR_MESSAGES } from \"@koh/common\";\nimport { Button, Form, Input, List, message, Switch, Tooltip } from \"antd\";\nimport { pick } from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport useSWR from \"swr\";\nimport { getEndpoint, getNotificationState, NotificationStates, registerNotificationSubscription, requestNotificationPermission } from \"../../utils/notification\";\nvar DeviceAddHeader = styled.div.withConfig({\n  displayName: \"NotificationsSettings__DeviceAddHeader\",\n  componentId: \"aypbgh-0\"\n})([\"display:flex;justify-content:space-between;\"]);\nexport default function NotificationsSettings() {\n  var _useSWR = useSWR(\"api/v1/profile\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", API.profile.index());\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }))),\n      profile = _useSWR.data,\n      error = _useSWR.error,\n      mutate = _useSWR.mutate;\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  var editProfile = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(updateProfile) {\n      var newProfile;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              newProfile = _objectSpread(_objectSpread({}, profile), updateProfile);\n              mutate(newProfile, false);\n              _context2.next = 4;\n              return API.profile.patch(pick(newProfile, [\"desktopNotifsEnabled\", \"phoneNotifsEnabled\", \"phoneNumber\"]));\n\n            case 4:\n              mutate();\n              return _context2.abrupt(\"return\", newProfile);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function editProfile(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleOk = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var value, newProfile, _e$response, _e$response2, _e$response2$data;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return form.validateFields();\n\n            case 2:\n              value = _context3.sent;\n              _context3.prev = 3;\n              _context3.next = 6;\n              return editProfile(value);\n\n            case 6:\n              newProfile = _context3.sent;\n              form.setFieldsValue(newProfile);\n              _context3.next = 13;\n              break;\n\n            case 10:\n              _context3.prev = 10;\n              _context3.t0 = _context3[\"catch\"](3);\n\n              if (((_e$response = _context3.t0.response) === null || _e$response === void 0 ? void 0 : _e$response.status) === 400 && ((_e$response2 = _context3.t0.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.message) === ERROR_MESSAGES.notificationService.registerPhone) {\n                form.setFields([{\n                  name: \"phoneNumber\",\n                  errors: [\"Invalid phone number\"]\n                }]);\n              }\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[3, 10]]);\n    }));\n\n    return function handleOk() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return profile && __jsx(\"div\", {\n    style: {\n      paddingTop: \"50px\"\n    }\n  }, __jsx(Form, {\n    form: form,\n    initialValues: profile\n  }, __jsx(Form.Item, {\n    label: \"Enable notifications on all devices\",\n    name: \"desktopNotifsEnabled\",\n    valuePropName: \"checked\"\n  }, __jsx(Switch, null)), __jsx(Form.Item, {\n    shouldUpdate: true,\n    noStyle: true\n  }, function () {\n    return (form === null || form === void 0 ? void 0 : form.getFieldValue(\"desktopNotifsEnabled\")) && __jsx(DeviceNotifPanel, null);\n  }), __jsx(Form.Item, {\n    style: {\n      marginTop: \"30px\"\n    },\n    label: \"Enable SMS notifications\",\n    name: \"phoneNotifsEnabled\",\n    valuePropName: \"checked\"\n  }, __jsx(Switch, null)), __jsx(Form.Item, {\n    shouldUpdate: true,\n    noStyle: true\n  }, function () {\n    return (form === null || form === void 0 ? void 0 : form.getFieldValue(\"phoneNotifsEnabled\")) && __jsx(Form.Item, {\n      label: \"Phone #\",\n      name: \"phoneNumber\",\n      rules: [{\n        required: true,\n        message: \"Please input your number to enable text notifications\"\n      }]\n    }, __jsx(Input, {\n      placeholder: \"XXX-XXX-XXXX\"\n    }));\n  })), __jsx(Tooltip, {\n    title: \"How do notifications work?\"\n  }, __jsx(QuestionCircleOutlined, {\n    style: {\n      \"float\": \"right\",\n      fontSize: \"25px\"\n    },\n    onClick: function onClick() {\n      return window.open(\"https://info.khouryofficehours.com/593f9eb67eb04abbb8008c285ed5a8dd\");\n    }\n  })), __jsx(Button, {\n    key: \"submit\",\n    type: \"primary\",\n    onClick: handleOk\n  }, \"Ok\"));\n}\n\nfunction useThisDeviceEndpoint() {\n  var _useState = useState(null),\n      endpoint = _useState[0],\n      setEndpoint = _useState[1];\n\n  useEffect(function () {\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.t0 = setEndpoint;\n              _context4.next = 3;\n              return getEndpoint();\n\n            case 3:\n              _context4.t1 = _context4.sent;\n              return _context4.abrupt(\"return\", (0, _context4.t0)(_context4.t1));\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }))();\n  });\n  return endpoint;\n}\n\nfunction renderDeviceInfo(device, isThisDevice) {\n  if (device.name) {\n    return isThisDevice ? \"\".concat(device.name, \" (This Device)\") : device.name;\n  } else {\n    return isThisDevice ? \"This Device\" : \"Other Device\";\n  }\n}\n\nfunction DeviceNotifPanel() {\n  var _profile$desktopNotif;\n\n  var thisEndpoint = useThisDeviceEndpoint();\n\n  var _useSWR2 = useSWR(\"api/v1/profile\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            return _context5.abrupt(\"return\", API.profile.index());\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }))),\n      profile = _useSWR2.data,\n      mutate = _useSWR2.mutate;\n\n  var thisDesktopNotif = profile === null || profile === void 0 ? void 0 : (_profile$desktopNotif = profile.desktopNotifs) === null || _profile$desktopNotif === void 0 ? void 0 : _profile$desktopNotif.find(function (dn) {\n    return dn.endpoint === thisEndpoint;\n  });\n  return __jsx(\"div\", null, __jsx(DeviceAddHeader, null, __jsx(\"h3\", null, \"Your Devices\"), !thisDesktopNotif && __jsx(Tooltip, {\n    title: getNotificationState() === NotificationStates.browserUnsupported && \"Browser does not support notifications. Please use Chrome or Firefox, and not Incognito Mode.\"\n  }, __jsx(Button, {\n    onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var canNotify;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return requestNotificationPermission();\n\n            case 2:\n              canNotify = _context6.sent;\n\n              if (canNotify === NotificationStates.notAllowed) {\n                message.warning(\"Please allow notifications in this browser\");\n              }\n\n              if (!(canNotify === NotificationStates.granted)) {\n                _context6.next = 8;\n                break;\n              }\n\n              _context6.next = 7;\n              return registerNotificationSubscription();\n\n            case 7:\n              mutate();\n\n            case 8:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    })),\n    disabled: getNotificationState() === NotificationStates.browserUnsupported,\n    style: {\n      marginBottom: \"4px\"\n    }\n  }, \"Add This Device\"))), __jsx(List, {\n    bordered: true,\n    dataSource: profile.desktopNotifs,\n    locale: {\n      emptyText: \"No Devices Registered To Receive Notifications\"\n    },\n    renderItem: function renderItem(device) {\n      return __jsx(List.Item, {\n        actions: [__jsx(MinusCircleOutlined, {\n          style: {\n            fontSize: \"20px\"\n          },\n          key: 0,\n          onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n            return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _context7.next = 2;\n                    return API.notif.desktop.unregister(device.id);\n\n                  case 2:\n                    mutate();\n\n                  case 3:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _callee7);\n          }))\n        })]\n      }, __jsx(List.Item.Meta, {\n        title: renderDeviceInfo(device, device.endpoint === thisEndpoint),\n        description: \"Registered \".concat(device.createdAt.toLocaleDateString())\n      }));\n    }\n  }));\n}","map":{"version":3,"sources":["/home/runner/work/office-hours/office-hours/packages/app/components/Settings/NotificationsSettings.tsx"],"names":["MinusCircleOutlined","QuestionCircleOutlined","API","ERROR_MESSAGES","Button","Form","Input","List","message","Switch","Tooltip","pick","React","useEffect","useState","styled","useSWR","getEndpoint","getNotificationState","NotificationStates","registerNotificationSubscription","requestNotificationPermission","DeviceAddHeader","div","NotificationsSettings","profile","index","data","error","mutate","useForm","form","editProfile","updateProfile","newProfile","patch","handleOk","validateFields","value","setFieldsValue","response","status","notificationService","registerPhone","setFields","name","errors","paddingTop","getFieldValue","marginTop","required","fontSize","window","open","useThisDeviceEndpoint","endpoint","setEndpoint","renderDeviceInfo","device","isThisDevice","DeviceNotifPanel","thisEndpoint","thisDesktopNotif","desktopNotifs","find","dn","browserUnsupported","canNotify","notAllowed","warning","granted","marginBottom","emptyText","notif","desktop","unregister","id","createdAt","toLocaleDateString"],"mappings":"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","sourcesContent":["import { MinusCircleOutlined, QuestionCircleOutlined } from \"@ant-design/icons\";\nimport { API } from \"@koh/api-client\";\nimport {\n  DesktopNotifPartial,\n  ERROR_MESSAGES,\n  UpdateProfileParams,\n} from \"@koh/common\";\nimport { Button, Form, Input, List, message, Switch, Tooltip } from \"antd\";\nimport { pick } from \"lodash\";\nimport React, { ReactElement, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport useSWR from \"swr\";\nimport {\n  getEndpoint,\n  getNotificationState,\n  NotificationStates,\n  registerNotificationSubscription,\n  requestNotificationPermission,\n} from \"../../utils/notification\";\n\nconst DeviceAddHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport default function NotificationsSettings(): ReactElement {\n  const { data: profile, error, mutate } = useSWR(`api/v1/profile`, async () =>\n    API.profile.index()\n  );\n\n  const [form] = Form.useForm();\n  const editProfile = async (updateProfile: UpdateProfileParams) => {\n    const newProfile = { ...profile, ...updateProfile };\n    mutate(newProfile, false);\n    await API.profile.patch(\n      pick(newProfile, [\n        \"desktopNotifsEnabled\",\n        \"phoneNotifsEnabled\",\n        \"phoneNumber\",\n      ])\n    );\n    mutate();\n    return newProfile;\n  };\n\n  const handleOk = async () => {\n    const value = await form.validateFields();\n    try {\n      const newProfile = await editProfile(value);\n      form.setFieldsValue(newProfile);\n    } catch (e) {\n      if (\n        e.response?.status === 400 &&\n        e.response?.data?.message ===\n          ERROR_MESSAGES.notificationService.registerPhone\n      ) {\n        form.setFields([\n          { name: \"phoneNumber\", errors: [\"Invalid phone number\"] },\n        ]);\n      }\n    }\n  };\n\n  return (\n    profile && (\n      <div style={{ paddingTop: \"50px\" }}>\n        <Form form={form} initialValues={profile}>\n          <Form.Item\n            label=\"Enable notifications on all devices\"\n            name=\"desktopNotifsEnabled\"\n            valuePropName=\"checked\"\n          >\n            <Switch />\n          </Form.Item>\n          <Form.Item shouldUpdate noStyle>\n            {() =>\n              form?.getFieldValue(\"desktopNotifsEnabled\") && (\n                <DeviceNotifPanel />\n              )\n            }\n          </Form.Item>\n          <Form.Item\n            style={{ marginTop: \"30px\" }}\n            label=\"Enable SMS notifications\"\n            name=\"phoneNotifsEnabled\"\n            valuePropName=\"checked\"\n          >\n            <Switch />\n          </Form.Item>\n          <Form.Item shouldUpdate noStyle>\n            {() =>\n              form?.getFieldValue(\"phoneNotifsEnabled\") && (\n                <Form.Item\n                  label=\"Phone #\"\n                  name=\"phoneNumber\"\n                  rules={[\n                    {\n                      required: true,\n                      message:\n                        \"Please input your number to enable text notifications\",\n                    },\n                  ]}\n                >\n                  <Input placeholder={\"XXX-XXX-XXXX\"} />\n                </Form.Item>\n              )\n            }\n          </Form.Item>\n        </Form>\n        <Tooltip title=\"How do notifications work?\">\n          <QuestionCircleOutlined\n            style={{ float: \"right\", fontSize: \"25px\" }}\n            onClick={() =>\n              window.open(\n                \"https://info.khouryofficehours.com/593f9eb67eb04abbb8008c285ed5a8dd\"\n              )\n            }\n          />\n        </Tooltip>\n        <Button key=\"submit\" type=\"primary\" onClick={handleOk}>\n          Ok\n        </Button>\n      </div>\n    )\n  );\n}\n\nfunction useThisDeviceEndpoint(): null | string {\n  const [endpoint, setEndpoint] = useState(null);\n  useEffect(() => {\n    (async () => setEndpoint(await getEndpoint()))();\n  });\n  return endpoint;\n}\n\nfunction renderDeviceInfo(\n  device: DesktopNotifPartial,\n  isThisDevice: boolean\n): string {\n  if (device.name) {\n    return isThisDevice ? `${device.name} (This Device)` : device.name;\n  } else {\n    return isThisDevice ? \"This Device\" : \"Other Device\";\n  }\n}\n\nfunction DeviceNotifPanel() {\n  const thisEndpoint = useThisDeviceEndpoint();\n  const { data: profile, mutate } = useSWR(`api/v1/profile`, async () =>\n    API.profile.index()\n  );\n  const thisDesktopNotif = profile?.desktopNotifs?.find(\n    (dn) => dn.endpoint === thisEndpoint\n  );\n  return (\n    <div>\n      <DeviceAddHeader>\n        <h3>Your Devices</h3>\n        {!thisDesktopNotif && (\n          <Tooltip\n            title={\n              getNotificationState() ===\n                NotificationStates.browserUnsupported &&\n              \"Browser does not support notifications. Please use Chrome or Firefox, and not Incognito Mode.\"\n            }\n          >\n            <Button\n              onClick={async () => {\n                const canNotify = await requestNotificationPermission();\n                if (canNotify === NotificationStates.notAllowed) {\n                  message.warning(\"Please allow notifications in this browser\");\n                }\n                if (canNotify === NotificationStates.granted) {\n                  await registerNotificationSubscription();\n                  mutate();\n                }\n              }}\n              disabled={\n                getNotificationState() === NotificationStates.browserUnsupported\n              }\n              style={{ marginBottom: \"4px\" }}\n            >\n              Add This Device\n            </Button>\n          </Tooltip>\n        )}\n      </DeviceAddHeader>\n      <List\n        bordered\n        dataSource={profile.desktopNotifs}\n        locale={{ emptyText: \"No Devices Registered To Receive Notifications\" }}\n        renderItem={(device: DesktopNotifPartial) => (\n          <List.Item\n            actions={[\n              <MinusCircleOutlined\n                style={{ fontSize: \"20px\" }}\n                key={0}\n                onClick={async () => {\n                  await API.notif.desktop.unregister(device.id);\n                  mutate();\n                }}\n              />,\n            ]}\n          >\n            <List.Item.Meta\n              title={renderDeviceInfo(device, device.endpoint === thisEndpoint)}\n              description={`Registered ${device.createdAt.toLocaleDateString()}`}\n            />\n          </List.Item>\n        )}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}