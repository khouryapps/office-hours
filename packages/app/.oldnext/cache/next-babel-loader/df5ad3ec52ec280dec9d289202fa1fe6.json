{"ast":null,"code":"import { useEffect, useState } from \"react\";\nvar EVENTSOURCES = {};\nexport var useEventSource = function useEventSource(url, listenerKey, onmessage) {\n  var _useState = useState(true),\n      isLive = _useState[0],\n      setIsLive = _useState[1];\n\n  useEffect(function () {\n    if (url) {\n      var source;\n\n      if (url in EVENTSOURCES) {\n        source = EVENTSOURCES[url];\n      } else {\n        source = {\n          eventSource: new EventSource(url),\n          listeners: {}\n        };\n        EVENTSOURCES[url] = source;\n\n        source.eventSource.onmessage = function logEvents(event) {\n          var values = Object.values(source.listeners);\n          var eventData = JSON.parse(event.data);\n          values.forEach(function (lac) {\n            return lac.listener(eventData);\n          });\n        };\n\n        source.eventSource.onopen = function () {\n          return setIsLive(true);\n        };\n\n        source.eventSource.onerror = function () {\n          return setIsLive(false);\n        };\n      }\n\n      var listener = source.listeners[listenerKey];\n\n      if (source.listeners[listenerKey]) {\n        listener.count++;\n      } else {\n        listener = {\n          listener: onmessage,\n          count: 1\n        };\n        source.listeners[listenerKey] = listener;\n      }\n\n      return function () {\n        // Close event source if no one is listening\n        listener.count--;\n\n        if (listener.count === 0) {\n          delete source.listeners[listenerKey];\n\n          if (Object.values(source.listeners).length === 0) {\n            source.eventSource.close();\n            delete EVENTSOURCES[url];\n          }\n        }\n      };\n    }\n  }, [url, onmessage, listenerKey]);\n  return isLive;\n};","map":{"version":3,"sources":["/home/runner/work/office-hours/office-hours/packages/app/hooks/useEventSource.ts"],"names":["useEffect","useState","EVENTSOURCES","useEventSource","url","listenerKey","onmessage","isLive","setIsLive","source","eventSource","EventSource","listeners","logEvents","event","values","Object","eventData","JSON","parse","data","forEach","lac","listener","onopen","onerror","count","length","close"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAWA,IAAMC,YAA4C,GAAG,EAArD;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAC5BC,GAD4B,EAE5BC,WAF4B,EAG5BC,SAH4B,EAIhB;AAAA,kBACgBL,QAAQ,CAAU,IAAV,CADxB;AAAA,MACLM,MADK;AAAA,MACGC,SADH;;AAEZR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAII,GAAJ,EAAS;AACP,UAAIK,MAAJ;;AACA,UAAIL,GAAG,IAAIF,YAAX,EAAyB;AACvBO,QAAAA,MAAM,GAAGP,YAAY,CAACE,GAAD,CAArB;AACD,OAFD,MAEO;AACLK,QAAAA,MAAM,GAAG;AAAEC,UAAAA,WAAW,EAAE,IAAIC,WAAJ,CAAgBP,GAAhB,CAAf;AAAqCQ,UAAAA,SAAS,EAAE;AAAhD,SAAT;AACAV,QAAAA,YAAY,CAACE,GAAD,CAAZ,GAAoBK,MAApB;;AACAA,QAAAA,MAAM,CAACC,WAAP,CAAmBJ,SAAnB,GAA+B,SAASO,SAAT,CAAmBC,KAAnB,EAA0B;AACvD,cAAMC,MAAM,GAAGC,MAAM,CAACD,MAAP,CAAcN,MAAM,CAACG,SAArB,CAAf;AACA,cAAMK,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACM,IAAjB,CAAlB;AACAL,UAAAA,MAAM,CAACM,OAAP,CAAe,UAACC,GAAD;AAAA,mBAASA,GAAG,CAACC,QAAJ,CAAaN,SAAb,CAAT;AAAA,WAAf;AACD,SAJD;;AAKAR,QAAAA,MAAM,CAACC,WAAP,CAAmBc,MAAnB,GAA4B;AAAA,iBAAMhB,SAAS,CAAC,IAAD,CAAf;AAAA,SAA5B;;AACAC,QAAAA,MAAM,CAACC,WAAP,CAAmBe,OAAnB,GAA6B;AAAA,iBAAMjB,SAAS,CAAC,KAAD,CAAf;AAAA,SAA7B;AACD;;AAED,UAAIe,QAAQ,GAAGd,MAAM,CAACG,SAAP,CAAiBP,WAAjB,CAAf;;AAEA,UAAII,MAAM,CAACG,SAAP,CAAiBP,WAAjB,CAAJ,EAAmC;AACjCkB,QAAAA,QAAQ,CAACG,KAAT;AACD,OAFD,MAEO;AACLH,QAAAA,QAAQ,GAAG;AAAEA,UAAAA,QAAQ,EAAEjB,SAAZ;AAAuBoB,UAAAA,KAAK,EAAE;AAA9B,SAAX;AACAjB,QAAAA,MAAM,CAACG,SAAP,CAAiBP,WAAjB,IAAgCkB,QAAhC;AACD;;AAED,aAAO,YAAM;AACX;AACAA,QAAAA,QAAQ,CAACG,KAAT;;AACA,YAAIH,QAAQ,CAACG,KAAT,KAAmB,CAAvB,EAA0B;AACxB,iBAAOjB,MAAM,CAACG,SAAP,CAAiBP,WAAjB,CAAP;;AACA,cAAIW,MAAM,CAACD,MAAP,CAAcN,MAAM,CAACG,SAArB,EAAgCe,MAAhC,KAA2C,CAA/C,EAAkD;AAChDlB,YAAAA,MAAM,CAACC,WAAP,CAAmBkB,KAAnB;AACA,mBAAO1B,YAAY,CAACE,GAAD,CAAnB;AACD;AACF;AACF,OAVD;AAWD;AACF,GAtCQ,EAsCN,CAACA,GAAD,EAAME,SAAN,EAAiBD,WAAjB,CAtCM,CAAT;AAwCA,SAAOE,MAAP;AACD,CA/CM","sourcesContent":["import { useEffect, useState } from \"react\";\n\ninterface ListenerAndCount {\n  listener: (d: any) => void;\n  count: number;\n}\n\ninterface SourceAndCount {\n  eventSource: EventSource;\n  listeners: Record<string, ListenerAndCount>;\n}\nconst EVENTSOURCES: Record<string, SourceAndCount> = {};\n\nexport const useEventSource = (\n  url: string,\n  listenerKey: string,\n  onmessage: (d: any) => void\n): boolean => {\n  const [isLive, setIsLive] = useState<boolean>(true);\n  useEffect(() => {\n    if (url) {\n      let source: SourceAndCount;\n      if (url in EVENTSOURCES) {\n        source = EVENTSOURCES[url];\n      } else {\n        source = { eventSource: new EventSource(url), listeners: {} };\n        EVENTSOURCES[url] = source;\n        source.eventSource.onmessage = function logEvents(event) {\n          const values = Object.values(source.listeners);\n          const eventData = JSON.parse(event.data);\n          values.forEach((lac) => lac.listener(eventData));\n        };\n        source.eventSource.onopen = () => setIsLive(true);\n        source.eventSource.onerror = () => setIsLive(false);\n      }\n\n      let listener = source.listeners[listenerKey];\n\n      if (source.listeners[listenerKey]) {\n        listener.count++;\n      } else {\n        listener = { listener: onmessage, count: 1 };\n        source.listeners[listenerKey] = listener;\n      }\n\n      return () => {\n        // Close event source if no one is listening\n        listener.count--;\n        if (listener.count === 0) {\n          delete source.listeners[listenerKey];\n          if (Object.values(source.listeners).length === 0) {\n            source.eventSource.close();\n            delete EVENTSOURCES[url];\n          }\n        }\n      };\n    }\n  }, [url, onmessage, listenerKey]);\n\n  return isLive;\n};\n"]},"metadata":{},"sourceType":"module"}