{"ast":null,"code":"import { useProfile } from \"./useProfile\";\nimport { useQuestions } from \"./useQuestions\";\nimport { useQueue } from \"./useQueue\";\n/**\n * Get information about the currently logged-in TA, in the context of the given queue\n * TODO: The server could probably return this data more directly, instead of us having to run find and some on arrays\n */\n\nexport function useTAInQueueInfo(queueId) {\n  var _questions$questionsG;\n\n  var user = useProfile();\n\n  var _useQueue = useQueue(queueId),\n      queue = _useQueue.queue,\n      mutateQueue = _useQueue.mutateQueue;\n\n  var _useQuestions = useQuestions(queueId),\n      questions = _useQuestions.questions,\n      mutateQuestions = _useQuestions.mutateQuestions;\n\n  var helpingQuestions = questions === null || questions === void 0 ? void 0 : (_questions$questionsG = questions.questionsGettingHelp) === null || _questions$questionsG === void 0 ? void 0 : _questions$questionsG.filter(function (question) {\n    var _question$taHelped;\n\n    return ((_question$taHelped = question.taHelped) === null || _question$taHelped === void 0 ? void 0 : _question$taHelped.id) === user.id;\n  });\n  var isHelping = (helpingQuestions === null || helpingQuestions === void 0 ? void 0 : helpingQuestions.length) > 0;\n  var isCheckedIn = queue === null || queue === void 0 ? void 0 : queue.staffList.some(function (e) {\n    return e.id === (user === null || user === void 0 ? void 0 : user.id);\n  });\n  return {\n    helpingQuestions: helpingQuestions,\n    isHelping: isHelping,\n    isCheckedIn: isCheckedIn\n  };\n}","map":{"version":3,"sources":["/home/runner/work/office-hours/office-hours/packages/app/hooks/useTAInQueueInfo.ts"],"names":["useProfile","useQuestions","useQueue","useTAInQueueInfo","queueId","user","queue","mutateQueue","questions","mutateQuestions","helpingQuestions","questionsGettingHelp","filter","question","taHelped","id","isHelping","length","isCheckedIn","staffList","some","e"],"mappings":"AACA,SAASA,UAAT,QAA2B,cAA3B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,QAAT,QAAyB,YAAzB;AAEA;;;;;AASA,OAAO,SAASC,gBAAT,CAA0BC,OAA1B,EAA0D;AAAA;;AAC/D,MAAMC,IAAI,GAAGL,UAAU,EAAvB;;AAD+D,kBAGhCE,QAAQ,CAACE,OAAD,CAHwB;AAAA,MAGvDE,KAHuD,aAGvDA,KAHuD;AAAA,MAGhDC,WAHgD,aAGhDA,WAHgD;;AAAA,sBAKxBN,YAAY,CAACG,OAAD,CALY;AAAA,MAKvDI,SALuD,iBAKvDA,SALuD;AAAA,MAK5CC,eAL4C,iBAK5CA,eAL4C;;AAM/D,MAAMC,gBAAgB,GAAGF,SAAH,aAAGA,SAAH,gDAAGA,SAAS,CAAEG,oBAAd,0DAAG,sBAAiCC,MAAjC,CACvB,UAACC,QAAD;AAAA;;AAAA,WAAc,uBAAAA,QAAQ,CAACC,QAAT,0EAAmBC,EAAnB,MAA0BV,IAAI,CAACU,EAA7C;AAAA,GADuB,CAAzB;AAGA,MAAMC,SAAS,GAAG,CAAAN,gBAAgB,SAAhB,IAAAA,gBAAgB,WAAhB,YAAAA,gBAAgB,CAAEO,MAAlB,IAA2B,CAA7C;AAEA,MAAMC,WAAW,GAAGZ,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEa,SAAP,CAAiBC,IAAjB,CAAsB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACN,EAAF,MAASV,IAAT,aAASA,IAAT,uBAASA,IAAI,CAAEU,EAAf,CAAP;AAAA,GAAtB,CAApB;AAEA,SAAO;AAAEL,IAAAA,gBAAgB,EAAhBA,gBAAF;AAAoBM,IAAAA,SAAS,EAATA,SAApB;AAA+BE,IAAAA,WAAW,EAAXA;AAA/B,GAAP;AACD","sourcesContent":["import { Question } from \"@koh/common\";\nimport { useProfile } from \"./useProfile\";\nimport { useQuestions } from \"./useQuestions\";\nimport { useQueue } from \"./useQueue\";\n\n/**\n * Get information about the currently logged-in TA, in the context of the given queue\n * TODO: The server could probably return this data more directly, instead of us having to run find and some on arrays\n */\ninterface TAInQueueInfo {\n  helpingQuestions: Question[];\n  isHelping: boolean;\n  isCheckedIn: boolean;\n}\nexport function useTAInQueueInfo(queueId: number): TAInQueueInfo {\n  const user = useProfile();\n\n  const { queue, mutateQueue } = useQueue(queueId);\n\n  const { questions, mutateQuestions } = useQuestions(queueId);\n  const helpingQuestions = questions?.questionsGettingHelp?.filter(\n    (question) => question.taHelped?.id === user.id\n  );\n  const isHelping = helpingQuestions?.length > 0;\n\n  const isCheckedIn = queue?.staffList.some((e) => e.id === user?.id);\n\n  return { helpingQuestions, isHelping, isCheckedIn };\n}\n"]},"metadata":{},"sourceType":"module"}