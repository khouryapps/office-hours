{"ast":null,"code":"import { API } from \"@koh/api-client\";\nimport { GetQueueResponse } from \"@koh/common\";\nimport useSWR, { mutate } from \"swr\";\nimport { useCallback, useEffect } from \"react\";\nimport { useEventSource } from \"./useEventSource\";\nimport { plainToClass } from \"class-transformer\";\n// Keep track of all the different Refresh information and callbacks.\n// This is a global because useQueue can be used multiple times, but SWR's onSuccess overwrites other instances\nconst REFRESH_INFO = {};\n/**\n * Notify all onUpdate subscribers that new data came in.\n */\n\nfunction callOnUpdates(key) {\n  const refreshInfo = REFRESH_INFO[key];\n  refreshInfo.onUpdates.forEach(cb => cb(refreshInfo.lastUpdated));\n}\n/**\n * Get data for a queue.\n * @param qid Queue ID to get data for\n * @param onUpdate Optional callback to listen for when data is refetched, whether via HTTP or SSE\n */\n\n\nexport function useQueue(qid, onUpdate) {\n  const key = qid && `/api/v1/queues/${qid}`;\n\n  if (!(key in REFRESH_INFO)) {\n    REFRESH_INFO[key] = {\n      lastUpdated: null,\n      onUpdates: new Set()\n    };\n  } // Register onUpdate callback\n\n\n  useEffect(() => {\n    if (onUpdate) {\n      const refreshInfo = REFRESH_INFO[key];\n      refreshInfo.onUpdates.add(onUpdate);\n      onUpdate(refreshInfo.lastUpdated);\n      return () => refreshInfo.onUpdates.delete(onUpdate);\n    }\n  }, [onUpdate, key]);\n  const isLive = useEventSource(qid && `/api/v1/queues/${qid}/sse`, \"queue\", useCallback(data => {\n    if (data.queue) {\n      mutate(key, plainToClass(GetQueueResponse, data.queue), false);\n      REFRESH_INFO[key].lastUpdated = new Date();\n      callOnUpdates(key);\n    }\n  }, [key]));\n  const {\n    data: queue,\n    error: queueError,\n    mutate: mutateQueue\n  } = useSWR(key, useCallback(async () => API.queues.get(Number(qid)), [qid]), {\n    refreshInterval: isLive ? 0 : 10 * 1000,\n    onSuccess: (_, key) => {\n      REFRESH_INFO[key].lastUpdated = new Date();\n      callOnUpdates(key);\n    }\n  });\n  return {\n    queue,\n    queueError,\n    mutateQueue,\n    isLive\n  };\n}","map":null,"metadata":{},"sourceType":"module"}