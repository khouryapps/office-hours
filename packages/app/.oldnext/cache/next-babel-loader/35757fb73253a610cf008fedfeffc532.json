{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Badge, Col, Row } from \"antd\";\nimport styled from \"styled-components\";\nimport { useQuestions } from \"../../hooks/useQuestions\";\nimport { useQueue } from \"../../hooks/useQueue\";\nimport { formatWaitTime } from \"../../utils/TimeUtil\";\nimport AvatarWithInitals from \"../common/AvatarWithInitials\";\nimport { RenderEvery } from \"../RenderEvery\";\n\n/**\n * Row of ta statuses\n */\nexport function TAStatuses(_ref) {\n  var queueId = _ref.queueId;\n\n  var _useQuestions = useQuestions(queueId),\n      questions = _useQuestions.questions;\n\n  var _useQueue = useQueue(queueId),\n      staffList = _useQueue.queue.staffList;\n\n  if (!questions) {\n    return null;\n  }\n\n  var taToQuestion = {};\n  var taIds = staffList.map(function (t) {\n    return t.id;\n  });\n  var helpingQuestions = questions.questionsGettingHelp;\n\n  var _iterator = _createForOfIteratorHelper(helpingQuestions),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _question$taHelped;\n\n      var question = _step.value;\n\n      if (taIds.includes((_question$taHelped = question.taHelped) === null || _question$taHelped === void 0 ? void 0 : _question$taHelped.id)) {\n        taToQuestion[question.taHelped.id] = question;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return __jsx(Col, null, staffList.map(function (ta) {\n    var _taToQuestion$ta$id, _taToQuestion$ta$id$c, _taToQuestion$ta$id2;\n\n    return __jsx(Col, {\n      key: ta.id\n    }, __jsx(StatusCard, {\n      taName: ta.name,\n      taPhotoURL: ta.photoURL,\n      studentName: (_taToQuestion$ta$id = taToQuestion[ta.id]) === null || _taToQuestion$ta$id === void 0 ? void 0 : (_taToQuestion$ta$id$c = _taToQuestion$ta$id.creator) === null || _taToQuestion$ta$id$c === void 0 ? void 0 : _taToQuestion$ta$id$c.name,\n      helpedAt: (_taToQuestion$ta$id2 = taToQuestion[ta.id]) === null || _taToQuestion$ta$id2 === void 0 ? void 0 : _taToQuestion$ta$id2.helpedAt\n    }));\n  }));\n}\nvar StyledCard = styled.div.withConfig({\n  displayName: \"TAStatuses__StyledCard\",\n  componentId: \"sc-1buidjq-0\"\n})([\"background:#ffffff;box-shadow:0px 2px 8px rgba(0,0,0,0.15);border-radius:6px;padding:16px;display:flex;margin-bottom:16px;\"]);\nvar AvatarNoShrink = styled(AvatarWithInitals).withConfig({\n  displayName: \"TAStatuses__AvatarNoShrink\",\n  componentId: \"sc-1buidjq-1\"\n})([\"flex-shrink:0;\"]);\nvar CardContent = styled.div.withConfig({\n  displayName: \"TAStatuses__CardContent\",\n  componentId: \"sc-1buidjq-2\"\n})([\"margin-left:16px;\"]);\nvar TAName = styled.div.withConfig({\n  displayName: \"TAStatuses__TAName\",\n  componentId: \"sc-1buidjq-3\"\n})([\"font-weight:bold;color:#212934;\"]);\nvar HelpingInfo = styled.div.withConfig({\n  displayName: \"TAStatuses__HelpingInfo\",\n  componentId: \"sc-1buidjq-4\"\n})([\"margin-top:5px;font-style:italic;\"]);\n\n/**\n * View component just renders TA status\n */\nfunction StatusCard(_ref2) {\n  var taName = _ref2.taName,\n      taPhotoURL = _ref2.taPhotoURL,\n      studentName = _ref2.studentName,\n      helpedAt = _ref2.helpedAt;\n  var isBusy = !!helpedAt;\n  return __jsx(StyledCard, {\n    \"data-cy\": \"ta-status-card\"\n  }, __jsx(AvatarNoShrink, {\n    size: 48,\n    fontSize: 20,\n    name: taName\n  }), __jsx(CardContent, null, __jsx(Row, {\n    justify: \"space-between\"\n  }, __jsx(TAName, null, taName), __jsx(\"span\", null, __jsx(Badge, {\n    status: isBusy ? \"processing\" : \"success\"\n  }), isBusy ? \"Busy\" : \"Available\")), __jsx(HelpingInfo, null, isBusy ? __jsx(HelpingFor, {\n    studentName: studentName,\n    helpedAt: helpedAt\n  }) : \"Looking for my next student...\")));\n}\n\nvar BlueSpan = styled.span.withConfig({\n  displayName: \"TAStatuses__BlueSpan\",\n  componentId: \"sc-1buidjq-5\"\n})([\"color:#66a3d6;\"]);\n\nfunction HelpingFor(_ref3) {\n  var studentName = _ref3.studentName,\n      helpedAt = _ref3.helpedAt;\n  return __jsx(RenderEvery, {\n    render: function render() {\n      return __jsx(\"span\", null, \"Helping \", __jsx(BlueSpan, null, studentName !== null && studentName !== void 0 ? studentName : \"a student\"), \" for\", \" \", __jsx(BlueSpan, null, formatWaitTime((Date.now() - helpedAt.getTime()) / 60000)));\n    },\n    interval: 60 * 1000\n  });\n}","map":{"version":3,"sources":["/home/runner/work/office-hours/office-hours/packages/app/components/Queue/TAStatuses.tsx"],"names":["Badge","Col","Row","styled","useQuestions","useQueue","formatWaitTime","AvatarWithInitals","RenderEvery","TAStatuses","queueId","questions","staffList","queue","taToQuestion","taIds","map","t","id","helpingQuestions","questionsGettingHelp","question","includes","taHelped","ta","name","photoURL","creator","helpedAt","StyledCard","div","AvatarNoShrink","CardContent","TAName","HelpingInfo","StatusCard","taName","taPhotoURL","studentName","isBusy","BlueSpan","span","HelpingFor","Date","now","getTime"],"mappings":"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","sourcesContent":["import { Question } from \"@koh/common\";\nimport { Badge, Col, Row } from \"antd\";\nimport { ReactElement } from \"react\";\nimport styled from \"styled-components\";\nimport { useQuestions } from \"../../hooks/useQuestions\";\nimport { useQueue } from \"../../hooks/useQueue\";\nimport { formatWaitTime } from \"../../utils/TimeUtil\";\nimport AvatarWithInitals from \"../common/AvatarWithInitials\";\nimport { RenderEvery } from \"../RenderEvery\";\n\ninterface StatusRowProps {\n  queueId: number;\n}\n/**\n * Row of ta statuses\n */\nexport function TAStatuses({ queueId }: StatusRowProps): ReactElement {\n  const { questions } = useQuestions(queueId);\n  const {\n    queue: { staffList },\n  } = useQueue(queueId);\n  if (!questions) {\n    return null;\n  }\n\n  const taToQuestion: Record<number, Question> = {};\n  const taIds = staffList.map((t) => t.id);\n  const helpingQuestions = questions.questionsGettingHelp;\n  for (const question of helpingQuestions) {\n    if (taIds.includes(question.taHelped?.id)) {\n      taToQuestion[question.taHelped.id] = question;\n    }\n  }\n  return (\n    <Col>\n      {staffList.map((ta) => (\n        <Col key={ta.id}>\n          <StatusCard\n            taName={ta.name}\n            taPhotoURL={ta.photoURL}\n            studentName={taToQuestion[ta.id]?.creator?.name}\n            helpedAt={taToQuestion[ta.id]?.helpedAt}\n          />\n        </Col>\n      ))}\n    </Col>\n  );\n}\n\nconst StyledCard = styled.div`\n  background: #ffffff;\n  box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.15);\n  border-radius: 6px;\n  padding: 16px;\n  display: flex;\n  margin-bottom: 16px;\n`;\nconst AvatarNoShrink = styled(AvatarWithInitals)`\n  flex-shrink: 0;\n`;\nconst CardContent = styled.div`\n  margin-left: 16px;\n`;\nconst TAName = styled.div`\n  font-weight: bold;\n  color: #212934;\n`;\nconst HelpingInfo = styled.div`\n  margin-top: 5px;\n  font-style: italic;\n`;\n\ninterface StatusCardProps {\n  taName: string;\n  taPhotoURL: string;\n  studentName?: string;\n  helpedAt?: Date;\n}\n/**\n * View component just renders TA status\n */\nfunction StatusCard({\n  taName,\n  taPhotoURL,\n  studentName,\n  helpedAt,\n}: StatusCardProps): ReactElement {\n  const isBusy = !!helpedAt;\n  return (\n    <StyledCard data-cy=\"ta-status-card\">\n      {\n        //TODO: bring back photo URL && get rid of RegeX\n        // src={taPhotoURL}\n      }\n      <AvatarNoShrink size={48} fontSize={20} name={taName} />\n      <CardContent>\n        <Row justify=\"space-between\">\n          <TAName>{taName}</TAName>\n          <span>\n            <Badge status={isBusy ? \"processing\" : \"success\"} />\n            {isBusy ? \"Busy\" : \"Available\"}\n          </span>\n        </Row>\n        <HelpingInfo>\n          {isBusy ? (\n            <HelpingFor studentName={studentName} helpedAt={helpedAt} />\n          ) : (\n            \"Looking for my next student...\"\n          )}\n        </HelpingInfo>\n      </CardContent>\n    </StyledCard>\n  );\n}\n\nconst BlueSpan = styled.span`\n  color: #66a3d6;\n`;\ninterface HelpingForProps {\n  studentName: string;\n  helpedAt: Date;\n}\nfunction HelpingFor({ studentName, helpedAt }: HelpingForProps): ReactElement {\n  return (\n    <RenderEvery\n      render={() => (\n        <span>\n          Helping <BlueSpan>{studentName ?? \"a student\"}</BlueSpan> for{\" \"}\n          <BlueSpan>\n            {formatWaitTime((Date.now() - helpedAt.getTime()) / 60000)}\n          </BlueSpan>\n        </span>\n      )}\n      interval={60 * 1000}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}