{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport { ClockCircleOutlined, DownOutlined, HourglassOutlined, LeftOutlined, RightOutlined } from \"@ant-design/icons\";\nimport { ParentSize } from \"@visx/responsive\";\nimport { Dropdown, Menu } from \"antd\";\nimport { chunk, uniq, mean, sortBy } from \"lodash\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { formatWaitTime } from \"../../../utils/TimeUtil\";\nimport { formatDateHour } from \"./FormatDateHour\";\nimport TimeGraph from \"./TimeGraph\";\nvar TitleRow = styled.div.withConfig({\n  displayName: \"PopularTimes__TitleRow\",\n  componentId: \"sc-1jf1o8u-0\"\n})([\"display:flex;align-items:baseline;\"]);\nvar WeekdayDropdown = styled.h2.withConfig({\n  displayName: \"PopularTimes__WeekdayDropdown\",\n  componentId: \"sc-1jf1o8u-1\"\n})([\"display:flex;align-items:center;margin-left:8px;color:#1890ff;cursor:pointer;\"]);\nvar GraphWithArrow = styled.div.withConfig({\n  displayName: \"PopularTimes__GraphWithArrow\",\n  componentId: \"sc-1jf1o8u-2\"\n})([\"display:flex;align-items:center;margin-bottom:20px;\"]);\nvar GraphContainer = styled.div.withConfig({\n  displayName: \"PopularTimes__GraphContainer\",\n  componentId: \"sc-1jf1o8u-3\"\n})([\"flex-grow:1;min-width:0;\"]);\nvar GraphArrowButtons = styled.div.withConfig({\n  displayName: \"PopularTimes__GraphArrowButtons\",\n  componentId: \"sc-1jf1o8u-4\"\n})([\"padding:20px 5px;font-size:1.5em;cursor:pointer;\"]);\nvar GraphNotes = styled.h4.withConfig({\n  displayName: \"PopularTimes__GraphNotes\",\n  componentId: \"sc-1jf1o8u-5\"\n})([\"font-size:14px;color:#111;padding-left:40px;\"]);\nvar DAYS_OF_WEEK = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\nfunction findWeekMinAndMax(days) {\n  var minHourInWeek = 24;\n  var maxHourInWeek = 0;\n  days.forEach(function (v, hour) {\n    if (v >= 0) {\n      if (hour % 24 > maxHourInWeek) {\n        maxHourInWeek = hour % 24;\n      }\n\n      if (hour % 24 < minHourInWeek) {\n        minHourInWeek = hour % 24;\n      }\n    }\n  });\n\n  if (maxHourInWeek < minHourInWeek) {\n    return [0, 23];\n  }\n\n  return [minHourInWeek, maxHourInWeek];\n}\n\nvar BUSY = {\n  shortest: \"the shortest\",\n  shorter: \"shorter than usual\",\n  avg: \"average\",\n  longer: \"longer than usual\",\n  longest: \"the longest\"\n}; // Mapping for text describing level of business, given the length of the unique wait times that week (to account for days without hours)\n\nvar BUSY_TEXTS = {\n  1: [BUSY.avg],\n  2: [BUSY.shortest, BUSY.longest],\n  3: [BUSY.shortest, BUSY.avg, BUSY.longest],\n  4: [BUSY.shortest, BUSY.shorter, BUSY.longer, BUSY.longest],\n  5: [BUSY.shortest, BUSY.shorter, BUSY.avg, BUSY.longer, BUSY.longest],\n  6: [BUSY.shortest, BUSY.shorter, BUSY.shorter, BUSY.longer, BUSY.longer, BUSY.longest],\n  7: [BUSY.shortest, BUSY.shorter, BUSY.shorter, BUSY.avg, BUSY.longer, BUSY.longer, BUSY.longest]\n};\n\nfunction generateBusyText(day, dailySumWaitTimes) {\n  var dayWaitTime = dailySumWaitTimes[day];\n  var uniqSumWaitTimes = uniq(sortBy(dailySumWaitTimes.filter(function (v) {\n    return v >= 0;\n  })));\n  var rank = uniqSumWaitTimes.indexOf(dayWaitTime);\n  return BUSY_TEXTS[uniqSumWaitTimes.length][rank];\n}\n\nexport default function PopularTimes(_ref) {\n  var heatmap = _ref.heatmap;\n\n  var _useState = useState(new Date().getDay()),\n      currentDayOfWeek = _useState[0],\n      setCurrentDayOfWeek = _useState[1];\n\n  var _findWeekMinAndMax = findWeekMinAndMax(heatmap),\n      _findWeekMinAndMax2 = _slicedToArray(_findWeekMinAndMax, 2),\n      firstHour = _findWeekMinAndMax2[0],\n      lastHour = _findWeekMinAndMax2[1];\n\n  var dailyAvgWaitTimes = chunk(heatmap, 24).map(function (hours) {\n    var filteredOfficeHours = hours.filter(function (v) {\n      return v !== -1;\n    });\n    return filteredOfficeHours.length > 0 ? mean(filteredOfficeHours) : -1;\n  });\n  return __jsx(\"div\", {\n    className: \"hide-in-percy\"\n  }, __jsx(TitleRow, null, __jsx(\"h2\", null, \"Wait Times on\"), __jsx(Dropdown, {\n    trigger: [\"click\"],\n    overlay: __jsx(Menu, null, DAYS_OF_WEEK.map(function (dayName, i) {\n      return __jsx(Menu.Item, {\n        key: dayName\n      }, __jsx(\"a\", {\n        onClick: function onClick() {\n          return setCurrentDayOfWeek(i);\n        }\n      }, dayName));\n    }))\n  }, __jsx(WeekdayDropdown, null, DAYS_OF_WEEK[currentDayOfWeek], __jsx(DownOutlined, null)))), __jsx(GraphWithArrow, null, __jsx(GraphArrowButtons, {\n    onClick: function onClick() {\n      return setCurrentDayOfWeek((7 + currentDayOfWeek - 1) % 7);\n    }\n  }, __jsx(LeftOutlined, null)), __jsx(GraphContainer, null, __jsx(ParentSize, null, function (_ref2) {\n    var width = _ref2.width;\n    return __jsx(TimeGraph, {\n      values: heatmap.slice(currentDayOfWeek * 24, (currentDayOfWeek + 1) * 24 - 1).map(function (i) {\n        return i < 0 ? 0 : Math.floor(i);\n      }),\n      maxTime: Math.max.apply(Math, _toConsumableArray(heatmap)),\n      firstHour: firstHour,\n      lastHour: lastHour,\n      width: width,\n      height: 220\n    });\n  })), __jsx(GraphArrowButtons, {\n    onClick: function onClick() {\n      return setCurrentDayOfWeek((currentDayOfWeek + 1) % 7);\n    }\n  }, __jsx(RightOutlined, null))), dailyAvgWaitTimes[currentDayOfWeek] >= 0 && __jsx(GraphNotes, null, __jsx(ClockCircleOutlined, null), \" \", DAYS_OF_WEEK[currentDayOfWeek], \"s have\", \" \", __jsx(\"strong\", null, generateBusyText(currentDayOfWeek, dailyAvgWaitTimes)), \" \", \"wait times.\"), new Date().getDay() === currentDayOfWeek && heatmap[currentDayOfWeek * 24 + new Date().getHours()] >= 0 && __jsx(GraphNotes, null, __jsx(HourglassOutlined, null), \" At \", formatDateHour(new Date().getHours()), \", people generally wait\", \" \", __jsx(\"strong\", null, formatWaitTime(heatmap[currentDayOfWeek * 24 + new Date().getHours()])), \".\"));\n}","map":{"version":3,"sources":["/home/runner/work/office-hours/office-hours/packages/app/components/Today/PopularTimes/PopularTimes.tsx"],"names":["ClockCircleOutlined","DownOutlined","HourglassOutlined","LeftOutlined","RightOutlined","ParentSize","Dropdown","Menu","chunk","uniq","mean","sortBy","React","useState","styled","formatWaitTime","formatDateHour","TimeGraph","TitleRow","div","WeekdayDropdown","h2","GraphWithArrow","GraphContainer","GraphArrowButtons","GraphNotes","h4","DAYS_OF_WEEK","findWeekMinAndMax","days","minHourInWeek","maxHourInWeek","forEach","v","hour","BUSY","shortest","shorter","avg","longer","longest","BUSY_TEXTS","generateBusyText","day","dailySumWaitTimes","dayWaitTime","uniqSumWaitTimes","filter","rank","indexOf","length","PopularTimes","heatmap","Date","getDay","currentDayOfWeek","setCurrentDayOfWeek","firstHour","lastHour","dailyAvgWaitTimes","map","hours","filteredOfficeHours","dayName","i","width","slice","Math","floor","max","getHours"],"mappings":"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","sourcesContent":["import {\n  ClockCircleOutlined,\n  DownOutlined,\n  HourglassOutlined,\n  LeftOutlined,\n  RightOutlined,\n} from \"@ant-design/icons\";\nimport { Heatmap } from \"@koh/common\";\nimport { ParentSize } from \"@visx/responsive\";\nimport { Dropdown, Menu } from \"antd\";\nimport { chunk, uniq, mean, sortBy } from \"lodash\";\nimport React, { ReactElement, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { formatWaitTime } from \"../../../utils/TimeUtil\";\nimport { formatDateHour } from \"./FormatDateHour\";\nimport TimeGraph from \"./TimeGraph\";\n\nconst TitleRow = styled.div`\n  display: flex;\n  align-items: baseline;\n`;\n\nconst WeekdayDropdown = styled.h2`\n  display: flex;\n  align-items: center;\n  margin-left: 8px;\n  color: #1890ff;\n  cursor: pointer;\n`;\n\nconst GraphWithArrow = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nconst GraphContainer = styled.div`\n  flex-grow: 1;\n  min-width: 0; // Allow it to shrink after resizing\n`;\n\nconst GraphArrowButtons = styled.div`\n  padding: 20px 5px;\n  font-size: 1.5em;\n  cursor: pointer;\n`;\n\nconst GraphNotes = styled.h4`\n  font-size: 14px;\n  color: #111;\n  padding-left: 40px;\n`;\n\ninterface HeatmapProps {\n  heatmap: Heatmap;\n}\n\nconst DAYS_OF_WEEK = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\n\nfunction findWeekMinAndMax(days: Heatmap) {\n  let minHourInWeek = 24;\n  let maxHourInWeek = 0;\n  days.forEach((v, hour) => {\n    if (v >= 0) {\n      if (hour % 24 > maxHourInWeek) {\n        maxHourInWeek = hour % 24;\n      }\n      if (hour % 24 < minHourInWeek) {\n        minHourInWeek = hour % 24;\n      }\n    }\n  });\n  if (maxHourInWeek < minHourInWeek) {\n    return [0, 23];\n  }\n  return [minHourInWeek, maxHourInWeek];\n}\n\nconst BUSY = {\n  shortest: \"the shortest\",\n  shorter: \"shorter than usual\",\n  avg: \"average\",\n  longer: \"longer than usual\",\n  longest: \"the longest\",\n};\n\n// Mapping for text describing level of business, given the length of the unique wait times that week (to account for days without hours)\nconst BUSY_TEXTS = {\n  1: [BUSY.avg],\n  2: [BUSY.shortest, BUSY.longest],\n  3: [BUSY.shortest, BUSY.avg, BUSY.longest],\n  4: [BUSY.shortest, BUSY.shorter, BUSY.longer, BUSY.longest],\n  5: [BUSY.shortest, BUSY.shorter, BUSY.avg, BUSY.longer, BUSY.longest],\n  6: [\n    BUSY.shortest,\n    BUSY.shorter,\n    BUSY.shorter,\n    BUSY.longer,\n    BUSY.longer,\n    BUSY.longest,\n  ],\n  7: [\n    BUSY.shortest,\n    BUSY.shorter,\n    BUSY.shorter,\n    BUSY.avg,\n    BUSY.longer,\n    BUSY.longer,\n    BUSY.longest,\n  ],\n};\n\nfunction generateBusyText(day: number, dailySumWaitTimes: number[]): string {\n  const dayWaitTime = dailySumWaitTimes[day];\n  const uniqSumWaitTimes = uniq(\n    sortBy(dailySumWaitTimes.filter((v) => v >= 0))\n  );\n  const rank = uniqSumWaitTimes.indexOf(dayWaitTime);\n  return BUSY_TEXTS[uniqSumWaitTimes.length][rank];\n}\n\nexport default function PopularTimes({ heatmap }: HeatmapProps): ReactElement {\n  const [currentDayOfWeek, setCurrentDayOfWeek] = useState(new Date().getDay());\n  const [firstHour, lastHour] = findWeekMinAndMax(heatmap);\n  const dailyAvgWaitTimes: number[] = chunk(heatmap, 24).map((hours) => {\n    const filteredOfficeHours = hours.filter((v) => v !== -1);\n    return filteredOfficeHours.length > 0 ? mean(filteredOfficeHours) : -1;\n  });\n\n  return (\n    <div className=\"hide-in-percy\">\n      <TitleRow>\n        <h2>Wait Times on</h2>\n        <Dropdown\n          trigger={[\"click\"]}\n          overlay={\n            <Menu>\n              {DAYS_OF_WEEK.map((dayName, i) => (\n                <Menu.Item key={dayName}>\n                  <a onClick={() => setCurrentDayOfWeek(i)}>{dayName}</a>\n                </Menu.Item>\n              ))}\n            </Menu>\n          }\n        >\n          <WeekdayDropdown>\n            {DAYS_OF_WEEK[currentDayOfWeek]}\n            <DownOutlined />\n          </WeekdayDropdown>\n        </Dropdown>\n      </TitleRow>\n      <GraphWithArrow>\n        <GraphArrowButtons\n          onClick={() => setCurrentDayOfWeek((7 + currentDayOfWeek - 1) % 7)}\n        >\n          <LeftOutlined />\n        </GraphArrowButtons>\n        <GraphContainer>\n          <ParentSize>\n            {({ width }) => (\n              <TimeGraph\n                values={heatmap\n                  .slice(currentDayOfWeek * 24, (currentDayOfWeek + 1) * 24 - 1)\n                  .map((i) => (i < 0 ? 0 : Math.floor(i)))}\n                maxTime={Math.max(...heatmap)}\n                firstHour={firstHour}\n                lastHour={lastHour}\n                width={width}\n                height={220}\n              />\n            )}\n          </ParentSize>\n        </GraphContainer>\n        <GraphArrowButtons\n          onClick={() => setCurrentDayOfWeek((currentDayOfWeek + 1) % 7)}\n        >\n          <RightOutlined />\n        </GraphArrowButtons>\n      </GraphWithArrow>\n      {dailyAvgWaitTimes[currentDayOfWeek] >= 0 && (\n        <GraphNotes>\n          <ClockCircleOutlined /> {DAYS_OF_WEEK[currentDayOfWeek]}s have{\" \"}\n          <strong>\n            {generateBusyText(currentDayOfWeek, dailyAvgWaitTimes)}\n          </strong>{\" \"}\n          wait times.\n        </GraphNotes>\n      )}\n      {new Date().getDay() === currentDayOfWeek &&\n        heatmap[currentDayOfWeek * 24 + new Date().getHours()] >= 0 && (\n          <GraphNotes>\n            <HourglassOutlined /> At {formatDateHour(new Date().getHours())},\n            people generally wait{\" \"}\n            <strong>\n              {formatWaitTime(\n                heatmap[currentDayOfWeek * 24 + new Date().getHours()]\n              )}\n            </strong>\n            .\n          </GraphNotes>\n        )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}