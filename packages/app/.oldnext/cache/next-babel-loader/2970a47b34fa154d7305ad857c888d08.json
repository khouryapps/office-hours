{"ast":null,"code":"var __jsx = React.createElement;\nimport { ClockCircleOutlined, DownOutlined, HourglassOutlined, LeftOutlined, RightOutlined } from \"@ant-design/icons\";\nimport { ParentSize } from \"@visx/responsive\";\nimport { Dropdown, Menu } from \"antd\";\nimport { chunk, uniq, mean, sortBy } from \"lodash\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { formatWaitTime } from \"../../../utils/TimeUtil\";\nimport { formatDateHour } from \"./FormatDateHour\";\nimport TimeGraph from \"./TimeGraph\";\nconst TitleRow = styled.div.withConfig({\n  displayName: \"PopularTimes__TitleRow\",\n  componentId: \"sc-1jf1o8u-0\"\n})([\"display:flex;align-items:baseline;\"]);\nconst WeekdayDropdown = styled.h2.withConfig({\n  displayName: \"PopularTimes__WeekdayDropdown\",\n  componentId: \"sc-1jf1o8u-1\"\n})([\"display:flex;align-items:center;margin-left:8px;color:#1890ff;cursor:pointer;\"]);\nconst GraphWithArrow = styled.div.withConfig({\n  displayName: \"PopularTimes__GraphWithArrow\",\n  componentId: \"sc-1jf1o8u-2\"\n})([\"display:flex;align-items:center;margin-bottom:20px;\"]);\nconst GraphContainer = styled.div.withConfig({\n  displayName: \"PopularTimes__GraphContainer\",\n  componentId: \"sc-1jf1o8u-3\"\n})([\"flex-grow:1;min-width:0;\"]);\nconst GraphArrowButtons = styled.div.withConfig({\n  displayName: \"PopularTimes__GraphArrowButtons\",\n  componentId: \"sc-1jf1o8u-4\"\n})([\"padding:20px 5px;font-size:1.5em;cursor:pointer;\"]);\nconst GraphNotes = styled.h4.withConfig({\n  displayName: \"PopularTimes__GraphNotes\",\n  componentId: \"sc-1jf1o8u-5\"\n})([\"font-size:14px;color:#111;padding-left:40px;\"]);\nconst DAYS_OF_WEEK = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\nfunction findWeekMinAndMax(days) {\n  let minHourInWeek = 24;\n  let maxHourInWeek = 0;\n  days.forEach((v, hour) => {\n    if (v >= 0) {\n      if (hour % 24 > maxHourInWeek) {\n        maxHourInWeek = hour % 24;\n      }\n\n      if (hour % 24 < minHourInWeek) {\n        minHourInWeek = hour % 24;\n      }\n    }\n  });\n\n  if (maxHourInWeek < minHourInWeek) {\n    return [0, 23];\n  }\n\n  return [minHourInWeek, maxHourInWeek];\n}\n\nconst BUSY = {\n  shortest: \"the shortest\",\n  shorter: \"shorter than usual\",\n  avg: \"average\",\n  longer: \"longer than usual\",\n  longest: \"the longest\"\n}; // Mapping for text describing level of business, given the length of the unique wait times that week (to account for days without hours)\n\nconst BUSY_TEXTS = {\n  1: [BUSY.avg],\n  2: [BUSY.shortest, BUSY.longest],\n  3: [BUSY.shortest, BUSY.avg, BUSY.longest],\n  4: [BUSY.shortest, BUSY.shorter, BUSY.longer, BUSY.longest],\n  5: [BUSY.shortest, BUSY.shorter, BUSY.avg, BUSY.longer, BUSY.longest],\n  6: [BUSY.shortest, BUSY.shorter, BUSY.shorter, BUSY.longer, BUSY.longer, BUSY.longest],\n  7: [BUSY.shortest, BUSY.shorter, BUSY.shorter, BUSY.avg, BUSY.longer, BUSY.longer, BUSY.longest]\n};\n\nfunction generateBusyText(day, dailySumWaitTimes) {\n  const dayWaitTime = dailySumWaitTimes[day];\n  const uniqSumWaitTimes = uniq(sortBy(dailySumWaitTimes.filter(v => v >= 0)));\n  const rank = uniqSumWaitTimes.indexOf(dayWaitTime);\n  return BUSY_TEXTS[uniqSumWaitTimes.length][rank];\n}\n\nexport default function PopularTimes({\n  heatmap\n}) {\n  const {\n    0: currentDayOfWeek,\n    1: setCurrentDayOfWeek\n  } = useState(new Date().getDay());\n  const [firstHour, lastHour] = findWeekMinAndMax(heatmap);\n  const dailyAvgWaitTimes = chunk(heatmap, 24).map(hours => {\n    const filteredOfficeHours = hours.filter(v => v !== -1);\n    return filteredOfficeHours.length > 0 ? mean(filteredOfficeHours) : -1;\n  });\n  return __jsx(\"div\", {\n    className: \"hide-in-percy\"\n  }, __jsx(TitleRow, null, __jsx(\"h2\", null, \"Wait Times on\"), __jsx(Dropdown, {\n    trigger: [\"click\"],\n    overlay: __jsx(Menu, null, DAYS_OF_WEEK.map((dayName, i) => __jsx(Menu.Item, {\n      key: dayName\n    }, __jsx(\"a\", {\n      onClick: () => setCurrentDayOfWeek(i)\n    }, dayName))))\n  }, __jsx(WeekdayDropdown, null, DAYS_OF_WEEK[currentDayOfWeek], __jsx(DownOutlined, null)))), __jsx(GraphWithArrow, null, __jsx(GraphArrowButtons, {\n    onClick: () => setCurrentDayOfWeek((7 + currentDayOfWeek - 1) % 7)\n  }, __jsx(LeftOutlined, null)), __jsx(GraphContainer, null, __jsx(ParentSize, null, ({\n    width\n  }) => __jsx(TimeGraph, {\n    values: heatmap.slice(currentDayOfWeek * 24, (currentDayOfWeek + 1) * 24 - 1).map(i => i < 0 ? 0 : Math.floor(i)),\n    maxTime: Math.max(...heatmap),\n    firstHour: firstHour,\n    lastHour: lastHour,\n    width: width,\n    height: 220\n  }))), __jsx(GraphArrowButtons, {\n    onClick: () => setCurrentDayOfWeek((currentDayOfWeek + 1) % 7)\n  }, __jsx(RightOutlined, null))), dailyAvgWaitTimes[currentDayOfWeek] >= 0 && __jsx(GraphNotes, null, __jsx(ClockCircleOutlined, null), \" \", DAYS_OF_WEEK[currentDayOfWeek], \"s have\", \" \", __jsx(\"strong\", null, generateBusyText(currentDayOfWeek, dailyAvgWaitTimes)), \" \", \"wait times.\"), new Date().getDay() === currentDayOfWeek && heatmap[currentDayOfWeek * 24 + new Date().getHours()] >= 0 && __jsx(GraphNotes, null, __jsx(HourglassOutlined, null), \" At \", formatDateHour(new Date().getHours()), \", people generally wait\", \" \", __jsx(\"strong\", null, formatWaitTime(heatmap[currentDayOfWeek * 24 + new Date().getHours()])), \".\"));\n}","map":null,"metadata":{},"sourceType":"module"}