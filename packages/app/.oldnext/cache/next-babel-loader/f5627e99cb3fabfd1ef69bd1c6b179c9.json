{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { API } from \"@koh/api-client\";\nimport { Button, Modal } from \"antd\";\nimport moment from \"moment\";\nimport { useRouter } from \"next/router\";\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useCourse } from \"../../hooks/useCourse\";\nconst CheckinButton = styled(Button).withConfig({\n  displayName: \"TACheckinButton__CheckinButton\",\n  componentId: \"oiahss-0\"\n})([\"background:#2a9187;border-radius:6px;color:white;font-weight:500;font-size:14px;\"]);\nconst CheckOutButton = styled(Button).withConfig({\n  displayName: \"TACheckinButton__CheckOutButton\",\n  componentId: \"oiahss-1\"\n})([\"color:#da3236;font-weight:500;font-size:14px;border-radius:6px;\"]);\nconst CheckoutModalButtonRow = styled.div.withConfig({\n  displayName: \"TACheckinButton__CheckoutModalButtonRow\",\n  componentId: \"oiahss-2\"\n})([\"display:flex;justify-content:space-between;\"]);\nconst EMPTY_CHECKOUT_INFO = {\n  canClearQueue: false,\n  nextOfficeHourTime: null\n};\nexport default function TACheckinButton({\n  courseId,\n  room,\n  state,\n  disabled = false,\n  block = false\n}) {\n  const router = useRouter();\n  const {\n    course,\n    mutateCourse\n  } = useCourse(courseId);\n  const {\n    0: queueIdToClean,\n    1: setQueueIdToClean\n  } = useState(-1);\n\n  async function checkInTA() {\n    // to see old check in in person functionality look at commit b4768bbfb0f36444c80961703bdbba01ff4a5596\n    //trying to limit changes to the frontend, all queues will have the room online\n    const redirectID = await API.taStatus.checkIn(courseId, room);\n    router.push(\"/course/[cid]/queue/[qid]\", `/course/${courseId}/queue/${redirectID.id}`);\n  }\n\n  const {\n    0: checkoutModalInfo,\n    1: setCheckoutModalInfo\n  } = useState(EMPTY_CHECKOUT_INFO);\n\n  const closeModal = () => setCheckoutModalInfo(EMPTY_CHECKOUT_INFO);\n\n  return __jsx(React.Fragment, null, state === \"CheckedIn\" && __jsx(CheckOutButton, {\n    type: \"default\",\n    size: \"large\",\n    disabled: disabled,\n    block: block,\n    \"data-cy\": \"check-out-button\",\n    onClick: async () => {\n      const _await$API$taStatus$c = await API.taStatus.checkOut(courseId, room),\n            {\n        queueId\n      } = _await$API$taStatus$c,\n            modalInfo = _objectWithoutProperties(_await$API$taStatus$c, [\"queueId\"]);\n\n      setQueueIdToClean(queueId);\n      setCheckoutModalInfo(modalInfo);\n      mutateCourse();\n    }\n  }, \"Check Out\"), state === \"CheckedOut\" && __jsx(CheckinButton, {\n    type: \"default\",\n    size: \"large\",\n    block: block,\n    onClick: () => checkInTA(),\n    disabled: disabled || !course,\n    \"data-cy\": \"check-in-button\"\n  }, \"Check In\"), __jsx(Modal, {\n    visible: checkoutModalInfo.canClearQueue,\n    title: \"Let's clean up...\",\n    onCancel: closeModal,\n    footer: [__jsx(Button, {\n      key: \"keep\",\n      onClick: closeModal\n    }, \"Leave Students In Queue\"), __jsx(Button, {\n      key: \"clear\",\n      type: \"primary\",\n      onClick: async () => {\n        await API.queues.clean(queueIdToClean);\n        closeModal();\n      },\n      \"data-cy\": \"clear-queue-btn\"\n    }, \"Clear Queue\")]\n  }, \"You are the last TA to leave.\", \" \", checkoutModalInfo.nextOfficeHourTime ? __jsx(React.Fragment, null, \"There will not be any office hours for\", \" \", __jsx(\"strong\", null, moment(checkoutModalInfo.nextOfficeHourTime).fromNow(true))) : __jsx(\"strong\", null, \"There are no later office hours scheduled\"), \". Do you want to clear the remaining students out of the queue?\"));\n}","map":null,"metadata":{},"sourceType":"module"}