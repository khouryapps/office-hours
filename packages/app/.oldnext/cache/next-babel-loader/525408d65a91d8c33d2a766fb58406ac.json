{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { OpenQuestionStatus, QuestionType } from \"@koh/common\";\nimport { Alert, Button, Input, Modal, Radio } from \"antd\";\nimport { useRouter } from \"next/router\";\nimport { default as React, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useLocalStorage } from \"../../../hooks/useLocalStorage\";\nimport { toOrdinal } from \"../../../utils/ordinal\";\nconst Container = styled.div.withConfig({\n  displayName: \"QuestionForm__Container\",\n  componentId: \"sc-1wkgpcq-0\"\n})([\"max-width:960px;\"]);\nconst QuestionText = styled.div.withConfig({\n  displayName: \"QuestionForm__QuestionText\",\n  componentId: \"sc-1wkgpcq-1\"\n})([\"font-weight:normal;font-size:14px;line-height:22px;margin-bottom:4px;\"]);\nconst QuestionCaption = styled.div.withConfig({\n  displayName: \"QuestionForm__QuestionCaption\",\n  componentId: \"sc-1wkgpcq-2\"\n})([\"font-weight:300;font-size:14px;line-height:22px;color:#8c8c8c;margin-bottom:32px;\"]);\nconst FormButton = styled(Button).withConfig({\n  displayName: \"QuestionForm__FormButton\",\n  componentId: \"sc-1wkgpcq-3\"\n})([\"margin-left:8px;\"]);\nconst SaveChangesButton = styled(Button).withConfig({\n  displayName: \"QuestionForm__SaveChangesButton\",\n  componentId: \"sc-1wkgpcq-4\"\n})([\"margin-left:8px;background:#3684c6;\"]);\nexport default function QuestionForm({\n  visible,\n  question,\n  leaveQueue,\n  finishQuestion,\n  position,\n  cancel\n}) {\n  const [storageQuestion, setStoredQuestion] = useLocalStorage(\"draftQuestion\", null);\n  const router = useRouter();\n  const courseId = router.query[\"cid\"];\n  const drafting = (question === null || question === void 0 ? void 0 : question.status) === OpenQuestionStatus.Drafting;\n  const helping = (question === null || question === void 0 ? void 0 : question.status) === OpenQuestionStatus.Helping;\n  const {\n    0: questionTypeInput,\n    1: setQuestionTypeInput\n  } = useState((question === null || question === void 0 ? void 0 : question.questionType) || null);\n  const {\n    0: questionText,\n    1: setQuestionText\n  } = useState((question === null || question === void 0 ? void 0 : question.text) || \"\");\n  useEffect(() => {\n    if (question && !visible) {\n      setQuestionText(question.text);\n      setQuestionTypeInput(question.questionType);\n    }\n  }, [question, visible]); // on question type change, update the question type state\n\n  const onCategoryChange = e => {\n    setQuestionTypeInput(e.target.value);\n    const questionFromStorage = storageQuestion !== null && storageQuestion !== void 0 ? storageQuestion : {};\n    setStoredQuestion(_objectSpread(_objectSpread({\n      id: question === null || question === void 0 ? void 0 : question.id\n    }, questionFromStorage), {}, {\n      questionType: e.target.value\n    }));\n  }; // on question text change, update the question text state\n\n\n  const onQuestionTextChange = event => {\n    setQuestionText(event.target.value);\n    const questionFromStorage = storageQuestion !== null && storageQuestion !== void 0 ? storageQuestion : {};\n    setStoredQuestion(_objectSpread(_objectSpread({\n      id: question === null || question === void 0 ? void 0 : question.id\n    }, questionFromStorage), {}, {\n      text: event.target.value\n    }));\n  }; // on button submit click, conditionally choose to go back to the queue\n\n\n  const onClickSubmit = () => {\n    if (questionTypeInput && questionText && questionText !== \"\") {\n      finishQuestion(questionText, questionTypeInput, router, Number(courseId));\n    }\n  };\n\n  return __jsx(Modal, {\n    visible: visible,\n    closable: true,\n    onCancel: () => {\n      setStoredQuestion(question);\n      cancel();\n    },\n    title: drafting ? \"Describe your question\" : \"Edit your question\",\n    footer: __jsx(\"div\", null, drafting ? __jsx(FormButton, {\n      danger: true,\n      onClick: leaveQueue\n    }, \"Leave Queue\") : __jsx(FormButton, {\n      onClick: cancel\n    }, \"Cancel\"), __jsx(SaveChangesButton, {\n      \"data-cy\": \"finishQuestion\",\n      type: \"primary\",\n      disabled: !questionTypeInput || !questionText || questionText === \"\",\n      onClick: onClickSubmit\n    }, drafting ? \"Finish\" : \"Save Changes\"))\n  }, __jsx(Container, null, drafting && __jsx(Alert, {\n    style: {\n      marginBottom: \"32px\"\n    },\n    message: `You are currently ${toOrdinal(position)} in queue`,\n    description: \"Your spot in queue has been temporarily reserved. Please describe your question to finish joining the queue.\",\n    type: \"success\",\n    showIcon: true\n  }), helping && __jsx(Alert, {\n    style: {\n      marginBottom: \"32px\"\n    },\n    message: `A TA is coming to help you`,\n    description: \"Please click 'Save Changes' to submit what you've filled out\",\n    type: \"info\",\n    showIcon: true\n  }), __jsx(QuestionText, null, \"What category does your question fall under?\"), __jsx(Radio.Group, {\n    value: questionTypeInput,\n    onChange: onCategoryChange,\n    buttonStyle: \"solid\",\n    style: {\n      marginBottom: 48\n    }\n  }, __jsx(Radio.Button, {\n    value: QuestionType.Concept\n  }, \"Concept\"), __jsx(Radio.Button, {\n    value: QuestionType.Clarification\n  }, \"Clarification\"), __jsx(Radio.Button, {\n    value: QuestionType.Testing\n  }, \"Testing\"), __jsx(Radio.Button, {\n    value: QuestionType.Bug\n  }, \"Bug\"), __jsx(Radio.Button, {\n    value: QuestionType.Setup\n  }, \"Setup\"), __jsx(Radio.Button, {\n    value: QuestionType.Other\n  }, \"Other\")), __jsx(QuestionText, null, \"What do you need help with?\"), __jsx(Input.TextArea, {\n    \"data-cy\": \"questionText\",\n    value: questionText,\n    placeholder: \"I\\u2019m having trouble understanding list abstractions, particularly in Assignment 5.\",\n    autoSize: {\n      minRows: 3,\n      maxRows: 6\n    },\n    onChange: onQuestionTextChange\n  }), __jsx(QuestionCaption, null, \"Be as descriptive and specific as possible in your answer. Your name will be hidden to other students, but your question will be visible so don't frame your question in a way that gives away the answer.\")));\n}","map":null,"metadata":{},"sourceType":"module"}