{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport { CheckOutlined, CloseOutlined, DeleteOutlined, PhoneOutlined, UndoOutlined } from \"@ant-design/icons\";\nimport { API } from \"@koh/api-client\";\nimport { ClosedQuestionStatus, LimboQuestionStatus, OpenQuestionStatus } from \"@koh/common\";\nimport { message, Popconfirm, Tooltip } from \"antd\";\nimport React, { useCallback } from \"react\";\nimport { useQuestions } from \"../../../hooks/useQuestions\";\nimport { useTAInQueueInfo } from \"../../../hooks/useTAInQueueInfo\";\nimport { BannerDangerButton, BannerPrimaryButton, CantFindButton, FinishHelpingButton, RequeueButton } from \"../Banner\";\nvar PRORITY_QUEUED_MESSAGE_TEXT = \"This student has been temporarily removed from the queue. They must select to rejoin the queue and will then be placed in the Priority Queue.\";\nexport default function TAQueueDetailButtons(_ref) {\n  var queueId = _ref.queueId,\n      question = _ref.question;\n\n  var _useQuestions = useQuestions(queueId),\n      mutateQuestions = _useQuestions.mutateQuestions;\n\n  var changeStatus = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(status) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return API.questions.update(question.id, {\n                status: status\n              });\n\n            case 2:\n              mutateQuestions();\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [question.id, mutateQuestions]);\n\n  var _useTAInQueueInfo = useTAInQueueInfo(queueId),\n      isCheckedIn = _useTAInQueueInfo.isCheckedIn,\n      isHelping = _useTAInQueueInfo.isHelping;\n\n  if (question.status === OpenQuestionStatus.Helping) {\n    return __jsx(React.Fragment, null, __jsx(Popconfirm, {\n      title: \"Are you sure you want to send this student back to the queue?\",\n      okText: \"Yes\",\n      cancelText: \"No\",\n      onConfirm: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                message.success(PRORITY_QUEUED_MESSAGE_TEXT, 2);\n                _context2.next = 3;\n                return changeStatus(LimboQuestionStatus.ReQueueing);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))\n    }, __jsx(Tooltip, {\n      title: \"Requeue Student\"\n    }, __jsx(RequeueButton, {\n      icon: __jsx(UndoOutlined, null),\n      \"data-cy\": \"requeue-student-button\"\n    }))), __jsx(Popconfirm, {\n      title: \"Are you sure you can't find this student?\",\n      okText: \"Yes\",\n      cancelText: \"No\",\n      onConfirm: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                message.success(PRORITY_QUEUED_MESSAGE_TEXT, 2);\n                _context3.next = 3;\n                return changeStatus(LimboQuestionStatus.CantFind);\n\n              case 3:\n                _context3.next = 5;\n                return API.questions.notify(question.id);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))\n    }, __jsx(Tooltip, {\n      title: \"Can't Find\"\n    }, __jsx(CantFindButton, {\n      shape: \"circle\",\n      icon: __jsx(CloseOutlined, null),\n      \"data-cy\": \"cant-find-button\"\n    }))), __jsx(Tooltip, {\n      title: \"Finish Helping\"\n    }, __jsx(FinishHelpingButton, {\n      icon: __jsx(CheckOutlined, null),\n      onClick: function onClick() {\n        return changeStatus(ClosedQuestionStatus.Resolved);\n      },\n      \"data-cy\": \"finish-helping-button\"\n    })));\n  } else {\n    var _ref5 = function () {\n      if (!isCheckedIn) {\n        return [false, \"You must check in to help students!\"];\n      } else if (isHelping) {\n        return [false, \"You are already helping a student\"];\n      } else if (question.status === OpenQuestionStatus.Drafting) {\n        return [false, \"Student is drafting\"];\n      } else {\n        return [true, \"Help Student\"];\n      }\n    }(),\n        _ref6 = _slicedToArray(_ref5, 2),\n        canHelp = _ref6[0],\n        helpTooltip = _ref6[1];\n\n    return __jsx(React.Fragment, null, __jsx(Popconfirm, {\n      title: \"Are you sure you want to delete this question from the queue?\",\n      okText: \"Yes\",\n      cancelText: \"No\",\n      onConfirm: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return changeStatus(question.status === OpenQuestionStatus.Drafting ? ClosedQuestionStatus.DeletedDraft : LimboQuestionStatus.TADeleted);\n\n              case 2:\n                _context4.next = 4;\n                return API.questions.notify(question.id);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))\n    }, __jsx(Tooltip, {\n      title: \"Remove From Queue\"\n    }, __jsx(BannerDangerButton, {\n      shape: \"circle\",\n      icon: __jsx(DeleteOutlined, null),\n      \"data-cy\": \"remove-from-queue\"\n    }))), __jsx(Tooltip, {\n      title: helpTooltip\n    }, __jsx(\"span\", null, __jsx(BannerPrimaryButton, {\n      icon: __jsx(PhoneOutlined, null),\n      onClick: function onClick() {\n        changeStatus(OpenQuestionStatus.Helping);\n\n        if (question.isOnline) {\n          window.open(\"https://teams.microsoft.com/l/chat/0/0?users=\".concat(question.creator.email));\n        }\n      },\n      disabled: !canHelp,\n      \"data-cy\": \"help-student\"\n    }))));\n  }\n}","map":{"version":3,"sources":["/home/runner/work/office-hours/office-hours/packages/app/components/Queue/TA/TAQueueDetailButtons.tsx"],"names":["CheckOutlined","CloseOutlined","DeleteOutlined","PhoneOutlined","UndoOutlined","API","ClosedQuestionStatus","LimboQuestionStatus","OpenQuestionStatus","message","Popconfirm","Tooltip","React","useCallback","useQuestions","useTAInQueueInfo","BannerDangerButton","BannerPrimaryButton","CantFindButton","FinishHelpingButton","RequeueButton","PRORITY_QUEUED_MESSAGE_TEXT","TAQueueDetailButtons","queueId","question","mutateQuestions","changeStatus","status","questions","update","id","isCheckedIn","isHelping","Helping","success","ReQueueing","CantFind","notify","Resolved","Drafting","canHelp","helpTooltip","DeletedDraft","TADeleted","isOnline","window","open","creator","email"],"mappings":"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","sourcesContent":["import {\n  CheckOutlined,\n  CloseOutlined,\n  DeleteOutlined,\n  PhoneOutlined,\n  UndoOutlined,\n} from \"@ant-design/icons\";\nimport { API } from \"@koh/api-client\";\nimport {\n  ClosedQuestionStatus,\n  LimboQuestionStatus,\n  OpenQuestionStatus,\n  Question,\n  QuestionStatus,\n} from \"@koh/common\";\nimport { message, Popconfirm, Tooltip } from \"antd\";\nimport React, { ReactElement, useCallback } from \"react\";\nimport { useQuestions } from \"../../../hooks/useQuestions\";\nimport { useTAInQueueInfo } from \"../../../hooks/useTAInQueueInfo\";\nimport {\n  BannerDangerButton,\n  BannerPrimaryButton,\n  CantFindButton,\n  FinishHelpingButton,\n  RequeueButton,\n} from \"../Banner\";\n\nconst PRORITY_QUEUED_MESSAGE_TEXT =\n  \"This student has been temporarily removed from the queue. They must select to rejoin the queue and will then be placed in the Priority Queue.\";\n\nexport default function TAQueueDetailButtons({\n  queueId,\n  question,\n}: {\n  queueId: number;\n  question: Question;\n}): ReactElement {\n  const { mutateQuestions } = useQuestions(queueId);\n  const changeStatus = useCallback(\n    async (status: QuestionStatus) => {\n      await API.questions.update(question.id, { status });\n      mutateQuestions();\n    },\n    [question.id, mutateQuestions]\n  );\n  const { isCheckedIn, isHelping } = useTAInQueueInfo(queueId);\n  if (question.status === OpenQuestionStatus.Helping) {\n    return (\n      <>\n        <Popconfirm\n          title=\"Are you sure you want to send this student back to the queue?\"\n          okText=\"Yes\"\n          cancelText=\"No\"\n          onConfirm={async () => {\n            message.success(PRORITY_QUEUED_MESSAGE_TEXT, 2);\n            await changeStatus(LimboQuestionStatus.ReQueueing);\n          }}\n        >\n          <Tooltip title=\"Requeue Student\">\n            <RequeueButton\n              icon={<UndoOutlined />}\n              data-cy=\"requeue-student-button\"\n            />\n          </Tooltip>\n        </Popconfirm>\n        <Popconfirm\n          title=\"Are you sure you can't find this student?\"\n          okText=\"Yes\"\n          cancelText=\"No\"\n          onConfirm={async () => {\n            message.success(PRORITY_QUEUED_MESSAGE_TEXT, 2);\n            await changeStatus(LimboQuestionStatus.CantFind);\n            await API.questions.notify(question.id);\n          }}\n        >\n          <Tooltip title=\"Can't Find\">\n            <CantFindButton\n              shape=\"circle\"\n              icon={<CloseOutlined />}\n              data-cy=\"cant-find-button\"\n            />\n          </Tooltip>\n        </Popconfirm>\n        <Tooltip title=\"Finish Helping\">\n          <FinishHelpingButton\n            icon={<CheckOutlined />}\n            onClick={() => changeStatus(ClosedQuestionStatus.Resolved)}\n            data-cy=\"finish-helping-button\"\n          />\n        </Tooltip>\n      </>\n    );\n  } else {\n    const [canHelp, helpTooltip] = ((): [boolean, string] => {\n      if (!isCheckedIn) {\n        return [false, \"You must check in to help students!\"];\n      } else if (isHelping) {\n        return [false, \"You are already helping a student\"];\n      } else if (question.status === OpenQuestionStatus.Drafting) {\n        return [false, \"Student is drafting\"];\n      } else {\n        return [true, \"Help Student\"];\n      }\n    })();\n    return (\n      <>\n        <Popconfirm\n          title=\"Are you sure you want to delete this question from the queue?\"\n          okText=\"Yes\"\n          cancelText=\"No\"\n          onConfirm={async () => {\n            await changeStatus(\n              question.status === OpenQuestionStatus.Drafting\n                ? ClosedQuestionStatus.DeletedDraft\n                : LimboQuestionStatus.TADeleted\n            );\n            await API.questions.notify(question.id);\n          }}\n        >\n          <Tooltip title=\"Remove From Queue\">\n            <BannerDangerButton\n              shape=\"circle\"\n              icon={<DeleteOutlined />}\n              data-cy=\"remove-from-queue\"\n            />\n          </Tooltip>\n        </Popconfirm>\n        <Tooltip title={helpTooltip}>\n          <span>\n            {/* This span is a workaround for tooltip-on-disabled-button \n            https://github.com/ant-design/ant-design/issues/9581#issuecomment-599668648 */}\n            <BannerPrimaryButton\n              icon={<PhoneOutlined />}\n              onClick={() => {\n                changeStatus(OpenQuestionStatus.Helping);\n                if (question.isOnline) {\n                  window.open(\n                    `https://teams.microsoft.com/l/chat/0/0?users=${question.creator.email}`\n                  );\n                }\n              }}\n              disabled={!canHelp}\n              data-cy=\"help-student\"\n            />\n          </span>\n        </Tooltip>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}