{"ast":null,"code":"import { useEffect, useState } from \"react\";\nconst EVENTSOURCES = {};\nexport const useEventSource = (url, listenerKey, onmessage) => {\n  const {\n    0: isLive,\n    1: setIsLive\n  } = useState(true);\n  useEffect(() => {\n    if (url) {\n      let source;\n\n      if (url in EVENTSOURCES) {\n        source = EVENTSOURCES[url];\n      } else {\n        source = {\n          eventSource: new EventSource(url),\n          listeners: {}\n        };\n        EVENTSOURCES[url] = source;\n\n        source.eventSource.onmessage = function logEvents(event) {\n          const values = Object.values(source.listeners);\n          const eventData = JSON.parse(event.data);\n          values.forEach(lac => lac.listener(eventData));\n        };\n\n        source.eventSource.onopen = () => setIsLive(true);\n\n        source.eventSource.onerror = () => setIsLive(false);\n      }\n\n      let listener = source.listeners[listenerKey];\n\n      if (source.listeners[listenerKey]) {\n        listener.count++;\n      } else {\n        listener = {\n          listener: onmessage,\n          count: 1\n        };\n        source.listeners[listenerKey] = listener;\n      }\n\n      return () => {\n        // Close event source if no one is listening\n        listener.count--;\n\n        if (listener.count === 0) {\n          delete source.listeners[listenerKey];\n\n          if (Object.values(source.listeners).length === 0) {\n            source.eventSource.close();\n            delete EVENTSOURCES[url];\n          }\n        }\n      };\n    }\n  }, [url, onmessage, listenerKey]);\n  return isLive;\n};","map":null,"metadata":{},"sourceType":"module"}