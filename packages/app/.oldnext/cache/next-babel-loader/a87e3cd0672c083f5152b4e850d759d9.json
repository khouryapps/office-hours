{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { OpenQuestionStatus, QuestionType } from \"@koh/common\";\nimport { Alert, Button, Input, Modal, Radio } from \"antd\";\nimport { useRouter } from \"next/router\";\nimport { default as React, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useLocalStorage } from \"../../../hooks/useLocalStorage\";\nimport { toOrdinal } from \"../../../utils/ordinal\";\nvar Container = styled.div.withConfig({\n  displayName: \"QuestionForm__Container\",\n  componentId: \"sc-1wkgpcq-0\"\n})([\"max-width:960px;\"]);\nvar QuestionText = styled.div.withConfig({\n  displayName: \"QuestionForm__QuestionText\",\n  componentId: \"sc-1wkgpcq-1\"\n})([\"font-weight:normal;font-size:14px;line-height:22px;margin-bottom:4px;\"]);\nvar QuestionCaption = styled.div.withConfig({\n  displayName: \"QuestionForm__QuestionCaption\",\n  componentId: \"sc-1wkgpcq-2\"\n})([\"font-weight:300;font-size:14px;line-height:22px;color:#8c8c8c;margin-bottom:32px;\"]);\nvar FormButton = styled(Button).withConfig({\n  displayName: \"QuestionForm__FormButton\",\n  componentId: \"sc-1wkgpcq-3\"\n})([\"margin-left:8px;\"]);\nvar SaveChangesButton = styled(Button).withConfig({\n  displayName: \"QuestionForm__SaveChangesButton\",\n  componentId: \"sc-1wkgpcq-4\"\n})([\"margin-left:8px;background:#3684c6;\"]);\nexport default function QuestionForm(_ref) {\n  var visible = _ref.visible,\n      question = _ref.question,\n      leaveQueue = _ref.leaveQueue,\n      finishQuestion = _ref.finishQuestion,\n      position = _ref.position,\n      cancel = _ref.cancel;\n\n  var _useLocalStorage = useLocalStorage(\"draftQuestion\", null),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      storageQuestion = _useLocalStorage2[0],\n      setStoredQuestion = _useLocalStorage2[1];\n\n  var router = useRouter();\n  var courseId = router.query[\"cid\"];\n  var drafting = (question === null || question === void 0 ? void 0 : question.status) === OpenQuestionStatus.Drafting;\n\n  var _useState = useState((question === null || question === void 0 ? void 0 : question.questionType) || null),\n      questionTypeInput = _useState[0],\n      setQuestionTypeInput = _useState[1];\n\n  var _useState2 = useState((question === null || question === void 0 ? void 0 : question.text) || \"\"),\n      questionText = _useState2[0],\n      setQuestionText = _useState2[1];\n\n  useEffect(function () {\n    if (question && !visible) {\n      setQuestionText(question.text);\n      setQuestionTypeInput(question.questionType);\n    }\n  }, [question, visible]); // on question type change, update the question type state\n\n  var onCategoryChange = function onCategoryChange(e) {\n    setQuestionTypeInput(e.target.value);\n    var questionFromStorage = storageQuestion !== null && storageQuestion !== void 0 ? storageQuestion : {};\n    setStoredQuestion(_objectSpread(_objectSpread({\n      id: question === null || question === void 0 ? void 0 : question.id\n    }, questionFromStorage), {}, {\n      questionType: e.target.value\n    }));\n  }; // on question text change, update the question text state\n\n\n  var onQuestionTextChange = function onQuestionTextChange(event) {\n    setQuestionText(event.target.value);\n    var questionFromStorage = storageQuestion !== null && storageQuestion !== void 0 ? storageQuestion : {};\n    setStoredQuestion(_objectSpread(_objectSpread({\n      id: question === null || question === void 0 ? void 0 : question.id\n    }, questionFromStorage), {}, {\n      text: event.target.value\n    }));\n  }; // on button submit click, conditionally choose to go back to the queue\n\n\n  var onClickSubmit = function onClickSubmit() {\n    if (questionTypeInput && questionText && questionText !== \"\") {\n      finishQuestion(questionText, questionTypeInput, router, Number(courseId));\n    }\n  };\n\n  return __jsx(Modal, {\n    visible: visible,\n    closable: true,\n    onCancel: function onCancel() {\n      setStoredQuestion(question);\n      cancel();\n    },\n    title: drafting ? \"Describe your question\" : \"Edit your question\",\n    footer: __jsx(\"div\", null, drafting ? __jsx(FormButton, {\n      danger: true,\n      onClick: leaveQueue\n    }, \"Leave Queue\") : __jsx(FormButton, {\n      onClick: cancel\n    }, \"Cancel\"), __jsx(SaveChangesButton, {\n      \"data-cy\": \"finishQuestion\",\n      type: \"primary\",\n      disabled: !questionTypeInput || !questionText || questionText === \"\",\n      onClick: onClickSubmit\n    }, drafting ? \"Finish\" : \"Save Changes\"))\n  }, __jsx(Container, null, drafting && __jsx(Alert, {\n    style: {\n      marginBottom: \"32px\"\n    },\n    message: \"You are currently \".concat(toOrdinal(position), \" in queue\"),\n    description: \"Your spot in queue has been temporarily reserved. Please describe your question to finish joining the queue.\",\n    type: \"success\",\n    showIcon: true\n  }), __jsx(QuestionText, null, \"What category does your question fall under?\"), __jsx(Radio.Group, {\n    value: questionTypeInput,\n    onChange: onCategoryChange,\n    buttonStyle: \"solid\",\n    style: {\n      marginBottom: 48\n    }\n  }, __jsx(Radio.Button, {\n    value: QuestionType.Concept\n  }, \"Concept\"), __jsx(Radio.Button, {\n    value: QuestionType.Clarification\n  }, \"Clarification\"), __jsx(Radio.Button, {\n    value: QuestionType.Testing\n  }, \"Testing\"), __jsx(Radio.Button, {\n    value: QuestionType.Bug\n  }, \"Bug\"), __jsx(Radio.Button, {\n    value: QuestionType.Setup\n  }, \"Setup\"), __jsx(Radio.Button, {\n    value: QuestionType.Other\n  }, \"Other\")), __jsx(QuestionText, null, \"What do you need help with?\"), __jsx(Input.TextArea, {\n    \"data-cy\": \"questionText\",\n    value: questionText,\n    placeholder: \"I\\u2019m having trouble understanding list abstractions, particularly in Assignment 5.\",\n    autoSize: {\n      minRows: 3,\n      maxRows: 6\n    },\n    onChange: onQuestionTextChange\n  }), __jsx(QuestionCaption, null, \"Be as descriptive and specific as possible in your answer. Your name will be hidden to other students, but your question will be visible so don't frame your question in a way that gives away the answer.\")));\n}","map":{"version":3,"sources":["/home/runner/work/office-hours/office-hours/packages/app/components/Queue/Student/QuestionForm.tsx"],"names":["OpenQuestionStatus","QuestionType","Alert","Button","Input","Modal","Radio","useRouter","default","React","useEffect","useState","styled","useLocalStorage","toOrdinal","Container","div","QuestionText","QuestionCaption","FormButton","SaveChangesButton","QuestionForm","visible","question","leaveQueue","finishQuestion","position","cancel","storageQuestion","setStoredQuestion","router","courseId","query","drafting","status","Drafting","questionType","questionTypeInput","setQuestionTypeInput","text","questionText","setQuestionText","onCategoryChange","e","target","value","questionFromStorage","id","onQuestionTextChange","event","onClickSubmit","Number","marginBottom","Concept","Clarification","Testing","Bug","Setup","Other","minRows","maxRows"],"mappings":"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","sourcesContent":["import { OpenQuestionStatus, Question, QuestionType } from \"@koh/common\";\nimport { Alert, Button, Input, Modal, Radio } from \"antd\";\nimport { RadioChangeEvent } from \"antd/lib/radio\";\nimport { NextRouter, useRouter } from \"next/router\";\nimport { default as React, ReactElement, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useLocalStorage } from \"../../../hooks/useLocalStorage\";\nimport { toOrdinal } from \"../../../utils/ordinal\";\n\nconst Container = styled.div`\n  max-width: 960px;\n`;\n\nconst QuestionText = styled.div`\n  font-weight: normal;\n  font-size: 14px;\n  line-height: 22px;\n  margin-bottom: 4px;\n`;\n\nconst QuestionCaption = styled.div`\n  font-weight: 300;\n  font-size: 14px;\n  line-height: 22px;\n  color: #8c8c8c;\n  margin-bottom: 32px;\n`;\n\nconst FormButton = styled(Button)`\n  margin-left: 8px;\n`;\n\nconst SaveChangesButton = styled(Button)`\n  margin-left: 8px;\n  background: #3684c6;\n`;\n\ninterface QuestionFormProps {\n  visible: boolean;\n  question: Question;\n  leaveQueue: () => void;\n  finishQuestion: (\n    text: string,\n    questionType: QuestionType,\n    router: NextRouter,\n    courseId: number\n  ) => void;\n  position: number;\n  cancel: () => void;\n}\n\nexport default function QuestionForm({\n  visible,\n  question,\n  leaveQueue,\n  finishQuestion,\n  position,\n  cancel,\n}: QuestionFormProps): ReactElement {\n  const [storageQuestion, setStoredQuestion] = useLocalStorage(\n    \"draftQuestion\",\n    null\n  );\n  const router = useRouter();\n  const courseId = router.query[\"cid\"];\n\n  const drafting = question?.status === OpenQuestionStatus.Drafting;\n  const [questionTypeInput, setQuestionTypeInput] = useState<QuestionType>(\n    question?.questionType || null\n  );\n  const [questionText, setQuestionText] = useState<string>(\n    question?.text || \"\"\n  );\n\n  useEffect(() => {\n    if (question && !visible) {\n      setQuestionText(question.text);\n      setQuestionTypeInput(question.questionType);\n    }\n  }, [question, visible]);\n\n  // on question type change, update the question type state\n  const onCategoryChange = (e: RadioChangeEvent) => {\n    setQuestionTypeInput(e.target.value);\n\n    const questionFromStorage = storageQuestion ?? {};\n\n    setStoredQuestion({\n      id: question?.id,\n      ...questionFromStorage,\n      questionType: e.target.value,\n    });\n  };\n\n  // on question text change, update the question text state\n  const onQuestionTextChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    setQuestionText(event.target.value);\n\n    const questionFromStorage = storageQuestion ?? {};\n    setStoredQuestion({\n      id: question?.id,\n      ...questionFromStorage,\n      text: event.target.value,\n    });\n  };\n\n  // on button submit click, conditionally choose to go back to the queue\n  const onClickSubmit = () => {\n    if (questionTypeInput && questionText && questionText !== \"\") {\n      finishQuestion(questionText, questionTypeInput, router, Number(courseId));\n    }\n  };\n\n  return (\n    <Modal\n      visible={visible}\n      closable={true}\n      onCancel={() => {\n        setStoredQuestion(question);\n        cancel();\n      }}\n      title={drafting ? \"Describe your question\" : \"Edit your question\"}\n      footer={\n        <div>\n          {drafting ? (\n            <FormButton danger onClick={leaveQueue}>\n              Leave Queue\n            </FormButton>\n          ) : (\n            <FormButton onClick={cancel}>Cancel</FormButton>\n          )}\n          <SaveChangesButton\n            data-cy=\"finishQuestion\"\n            type=\"primary\"\n            disabled={\n              !questionTypeInput || !questionText || questionText === \"\"\n            }\n            onClick={onClickSubmit}\n          >\n            {drafting ? \"Finish\" : \"Save Changes\"}\n          </SaveChangesButton>\n        </div>\n      }\n    >\n      <Container>\n        {drafting && (\n          <Alert\n            style={{ marginBottom: \"32px\" }}\n            message={`You are currently ${toOrdinal(position)} in queue`}\n            description=\"Your spot in queue has been temporarily reserved. Please describe your question to finish joining the queue.\"\n            type=\"success\"\n            showIcon\n          />\n        )}\n\n        <QuestionText>\n          What category does your question fall under?\n        </QuestionText>\n        <Radio.Group\n          value={questionTypeInput}\n          onChange={onCategoryChange}\n          buttonStyle=\"solid\"\n          style={{ marginBottom: 48 }}\n        >\n          <Radio.Button value={QuestionType.Concept}>Concept</Radio.Button>\n          <Radio.Button value={QuestionType.Clarification}>\n            Clarification\n          </Radio.Button>\n          <Radio.Button value={QuestionType.Testing}>Testing</Radio.Button>\n          <Radio.Button value={QuestionType.Bug}>Bug</Radio.Button>\n          <Radio.Button value={QuestionType.Setup}>Setup</Radio.Button>\n          <Radio.Button value={QuestionType.Other}>Other</Radio.Button>\n        </Radio.Group>\n\n        <QuestionText>What do you need help with?</QuestionText>\n        <Input.TextArea\n          data-cy=\"questionText\"\n          value={questionText}\n          placeholder=\"I’m having trouble understanding list abstractions, particularly in Assignment 5.\"\n          autoSize={{ minRows: 3, maxRows: 6 }}\n          onChange={onQuestionTextChange}\n        />\n        <QuestionCaption>\n          Be as descriptive and specific as possible in your answer. Your name\n          will be hidden to other students, but your question will be visible so\n          don&apos;t frame your question in a way that gives away the answer.\n        </QuestionCaption>\n      </Container>\n    </Modal>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}