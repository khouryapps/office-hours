{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { AxisBottom, AxisLeft } from \"@visx/axis\";\nimport { GridRows } from \"@visx/grid\";\nimport { Group } from \"@visx/group\";\nimport { scaleBand, scaleLinear } from \"@visx/scale\";\nimport { BarRounded } from \"@visx/shape\";\nimport { defaultStyles, useTooltip, useTooltipInPortal } from \"@visx/tooltip\";\nimport { range } from \"lodash\";\nimport React, { useMemo } from \"react\";\nimport styled from \"styled-components\";\nimport { formatWaitTime } from \"../../../utils/TimeUtil\";\nimport { formatDateHour } from \"./FormatDateHour\";\nvar tooltipTimeout;\n\nvar tooltipStyles = _objectSpread(_objectSpread({}, defaultStyles), {}, {\n  minWidth: 60,\n  backgroundColor: \"rgba(0,0,0,0.9)\",\n  color: \"white\"\n}); // The distance in pixels from the left side of the component to the origin of the graph\n\n\nvar LEFT_MARGIN = 45; // The distance in pixels from the end of the bottom axis to the right side of the component\n\nvar RIGHT_MARGIN = 10; // The distance in pixels from the top of the component to the top of the y axis\n\nvar TOP_MARGIN = 10;\nvar BOTTOM_MARGIN = 20; //padding in between each bar as a percent of the bar width\n\nvar BAR_PADDING = 0.2; // the padding to the left of the left axis in pixels\n\nvar GraphContainer = styled.div.withConfig({\n  displayName: \"TimeGraph__GraphContainer\",\n  componentId: \"sc-18irejk-0\"\n})([\"position:relative;& .popularTimes__bar{cursor:pointer;}\"]);\nexport default function TimeGraph(_ref) {\n  var values = _ref.values,\n      maxTime = _ref.maxTime,\n      firstHour = _ref.firstHour,\n      lastHour = _ref.lastHour,\n      width = _ref.width,\n      height = _ref.height;\n\n  var _useTooltip = useTooltip(),\n      tooltipOpen = _useTooltip.tooltipOpen,\n      tooltipLeft = _useTooltip.tooltipLeft,\n      tooltipTop = _useTooltip.tooltipTop,\n      tooltipData = _useTooltip.tooltipData,\n      hideTooltip = _useTooltip.hideTooltip,\n      showTooltip = _useTooltip.showTooltip;\n\n  var _useTooltipInPortal = useTooltipInPortal(),\n      containerRef = _useTooltipInPortal.containerRef,\n      TooltipInPortal = _useTooltipInPortal.TooltipInPortal; // bounds\n\n\n  var xMax = width - RIGHT_MARGIN - LEFT_MARGIN;\n  var yMax = height - TOP_MARGIN - BOTTOM_MARGIN; // scales, memoize for performance\n\n  var xScale = useMemo(function () {\n    return scaleBand({\n      range: [0, xMax],\n      round: true,\n      domain: range(Math.max(0, firstHour), Math.min(lastHour + 1, 24) + 1),\n      padding: BAR_PADDING\n    });\n  }, [xMax, firstHour, lastHour]); // number of minutes between each grid row line\n\n  var gridRowInterval = maxTime >= 60 ? 60 : 30;\n  var maxTickVal = Math.max(maxTime, gridRowInterval);\n  var yScale = useMemo(function () {\n    return scaleLinear({\n      range: [yMax, 0],\n      round: true,\n      domain: [0, maxTickVal + 5]\n    });\n  }, [yMax, maxTickVal]);\n  var barWidth = xScale.bandwidth(); // the tick values for the y axis\n\n  var yAxisTickValues = range(gridRowInterval, maxTickVal + 1, gridRowInterval);\n  return width < 10 ? null : // relative position is needed for correct tooltip positioning\n  __jsx(GraphContainer, null, __jsx(\"svg\", {\n    ref: containerRef,\n    width: width,\n    height: height\n  }, __jsx(\"rect\", {\n    x: 0,\n    y: 0,\n    width: width,\n    height: height,\n    fill: \"rgba(0,0,0,0)\",\n    rx: 14\n  }), __jsx(GridRows, {\n    top: TOP_MARGIN,\n    left: LEFT_MARGIN,\n    width: width - RIGHT_MARGIN - LEFT_MARGIN,\n    scale: yScale,\n    tickValues: yAxisTickValues,\n    stroke: \"#cccccc\"\n  }), __jsx(Group, {\n    left: LEFT_MARGIN,\n    top: TOP_MARGIN\n  }, values.map(function (value, i) {\n    var barHeight = yMax - yScale(value);\n    var barX = xScale(i) + barWidth * (1 + BAR_PADDING) / 2;\n    var barY = yMax - barHeight;\n\n    var interactWithBar = function interactWithBar() {\n      if (tooltipTimeout) clearTimeout(tooltipTimeout);\n      var top = yMax - barHeight - TOP_MARGIN; // - VERTICAL_MARGIN - barHeight;\n\n      var left = barX + barWidth;\n      showTooltip({\n        tooltipData: value,\n        tooltipTop: top,\n        tooltipLeft: left\n      });\n    };\n\n    return __jsx(BarRounded, {\n      key: \"bar-\".concat(formatDateHour(i)),\n      className: \"popularTimes__bar\",\n      x: barX,\n      y: barY,\n      width: barWidth,\n      height: barHeight,\n      radius: 10,\n      top: true,\n      fill: \"#40a9ff\",\n      onMouseLeave: function onMouseLeave() {\n        tooltipTimeout = window.setTimeout(function () {\n          hideTooltip();\n        }, 300);\n      },\n      onMouseOver: interactWithBar,\n      onMouseDown: interactWithBar\n    });\n  })), __jsx(Group, {\n    left: LEFT_MARGIN\n  }, __jsx(AxisBottom, {\n    top: yMax + TOP_MARGIN,\n    scale: xScale,\n    tickFormat: function tickFormat(hour) {\n      return (hour - firstHour) % 3 == 0 ? formatDateHour(hour) : \"\";\n    },\n    tickLabelProps: function tickLabelProps() {\n      return {\n        fill: \"\",\n        fontSize: 11,\n        textAnchor: \"middle\"\n      };\n    }\n  })), __jsx(Group, {\n    top: TOP_MARGIN,\n    left: LEFT_MARGIN\n  }, __jsx(AxisLeft, {\n    scale: yScale,\n    hideTicks: true,\n    tickValues: yAxisTickValues,\n    tickFormat: function tickFormat(hour) {\n      return formatWaitTime(hour);\n    },\n    tickLabelProps: function tickLabelProps() {\n      return {\n        fill: \"\",\n        fontSize: 11,\n        textAnchor: \"end\"\n      };\n    }\n  }))), tooltipOpen && tooltipData && __jsx(TooltipInPortal, {\n    key: Math.random() // update tooltip bounds each render\n    ,\n    top: tooltipTop,\n    left: tooltipLeft,\n    style: tooltipStyles\n  }, formatWaitTime(tooltipData)));\n}","map":{"version":3,"sources":["/home/runner/work/office-hours/office-hours/packages/app/components/Today/PopularTimes/TimeGraph.tsx"],"names":["AxisBottom","AxisLeft","GridRows","Group","scaleBand","scaleLinear","BarRounded","defaultStyles","useTooltip","useTooltipInPortal","range","React","useMemo","styled","formatWaitTime","formatDateHour","tooltipTimeout","tooltipStyles","minWidth","backgroundColor","color","LEFT_MARGIN","RIGHT_MARGIN","TOP_MARGIN","BOTTOM_MARGIN","BAR_PADDING","GraphContainer","div","TimeGraph","values","maxTime","firstHour","lastHour","width","height","tooltipOpen","tooltipLeft","tooltipTop","tooltipData","hideTooltip","showTooltip","containerRef","TooltipInPortal","xMax","yMax","xScale","round","domain","Math","max","min","padding","gridRowInterval","maxTickVal","yScale","barWidth","bandwidth","yAxisTickValues","map","value","i","barHeight","barX","barY","interactWithBar","clearTimeout","top","left","window","setTimeout","hour","fill","fontSize","textAnchor","random"],"mappings":"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","sourcesContent":["import { AxisBottom, AxisLeft } from \"@visx/axis\";\nimport { GridRows } from \"@visx/grid\";\nimport { Group } from \"@visx/group\";\nimport { scaleBand, scaleLinear } from \"@visx/scale\";\nimport { BarRounded } from \"@visx/shape\";\nimport { defaultStyles, useTooltip, useTooltipInPortal } from \"@visx/tooltip\";\nimport { range } from \"lodash\";\nimport React, { ReactElement, useMemo } from \"react\";\nimport styled from \"styled-components\";\nimport { formatWaitTime } from \"../../../utils/TimeUtil\";\nimport { formatDateHour } from \"./FormatDateHour\";\n\nlet tooltipTimeout: number;\nconst tooltipStyles = {\n  ...defaultStyles,\n  minWidth: 60,\n  backgroundColor: \"rgba(0,0,0,0.9)\",\n  color: \"white\",\n};\n\n// The distance in pixels from the left side of the component to the origin of the graph\nconst LEFT_MARGIN = 45;\n// The distance in pixels from the end of the bottom axis to the right side of the component\nconst RIGHT_MARGIN = 10;\n// The distance in pixels from the top of the component to the top of the y axis\nconst TOP_MARGIN = 10;\nconst BOTTOM_MARGIN = 20;\n//padding in between each bar as a percent of the bar width\nconst BAR_PADDING = 0.2;\n// the padding to the left of the left axis in pixels\n\nconst GraphContainer = styled.div`\n  position: relative;\n\n  & .popularTimes__bar {\n    cursor: pointer;\n  }\n`;\n\nexport default function TimeGraph({\n  values,\n  maxTime,\n  firstHour,\n  lastHour,\n  width,\n  height,\n}: {\n  values: number[];\n  maxTime: number;\n  firstHour: number;\n  lastHour: number;\n  width: number;\n  height: number;\n}): ReactElement {\n  const {\n    tooltipOpen,\n    tooltipLeft,\n    tooltipTop,\n    tooltipData,\n    hideTooltip,\n    showTooltip,\n  } = useTooltip<number>();\n\n  const { containerRef, TooltipInPortal } = useTooltipInPortal();\n\n  // bounds\n  const xMax = width - RIGHT_MARGIN - LEFT_MARGIN;\n  const yMax = height - TOP_MARGIN - BOTTOM_MARGIN;\n\n  // scales, memoize for performance\n  const xScale = useMemo(\n    () =>\n      scaleBand<number>({\n        range: [0, xMax],\n        round: true,\n        domain: range(Math.max(0, firstHour), Math.min(lastHour + 1, 24) + 1),\n        padding: BAR_PADDING,\n      }),\n    [xMax, firstHour, lastHour]\n  );\n\n  // number of minutes between each grid row line\n  const gridRowInterval = maxTime >= 60 ? 60 : 30;\n  const maxTickVal = Math.max(maxTime, gridRowInterval);\n\n  const yScale = useMemo(\n    () =>\n      scaleLinear<number>({\n        range: [yMax, 0],\n        round: true,\n        domain: [0, maxTickVal + 5],\n      }),\n    [yMax, maxTickVal]\n  );\n  const barWidth = xScale.bandwidth();\n  // the tick values for the y axis\n  const yAxisTickValues = range(\n    gridRowInterval,\n    maxTickVal + 1,\n    gridRowInterval\n  );\n\n  return width < 10 ? null : (\n    // relative position is needed for correct tooltip positioning\n    <GraphContainer>\n      <svg ref={containerRef} width={width} height={height}>\n        <rect\n          x={0}\n          y={0}\n          width={width}\n          height={height}\n          fill=\"rgba(0,0,0,0)\"\n          rx={14}\n        />\n        <GridRows\n          top={TOP_MARGIN}\n          left={LEFT_MARGIN}\n          width={width - RIGHT_MARGIN - LEFT_MARGIN}\n          scale={yScale}\n          tickValues={yAxisTickValues}\n          stroke=\"#cccccc\"\n        />\n        <Group left={LEFT_MARGIN} top={TOP_MARGIN}>\n          {values.map((value, i) => {\n            const barHeight = yMax - yScale(value);\n            const barX = xScale(i) + (barWidth * (1 + BAR_PADDING)) / 2;\n            const barY = yMax - barHeight;\n            const interactWithBar = () => {\n              if (tooltipTimeout) clearTimeout(tooltipTimeout);\n              const top = yMax - barHeight - TOP_MARGIN; // - VERTICAL_MARGIN - barHeight;\n              const left = barX + barWidth;\n              showTooltip({\n                tooltipData: value,\n                tooltipTop: top,\n                tooltipLeft: left,\n              });\n            };\n            return (\n              <BarRounded\n                key={`bar-${formatDateHour(i)}`}\n                className=\"popularTimes__bar\"\n                x={barX}\n                y={barY}\n                width={barWidth}\n                height={barHeight}\n                radius={10}\n                top\n                fill=\"#40a9ff\"\n                onMouseLeave={() => {\n                  tooltipTimeout = window.setTimeout(() => {\n                    hideTooltip();\n                  }, 300);\n                }}\n                onMouseOver={interactWithBar}\n                onMouseDown={interactWithBar}\n              />\n            );\n          })}\n        </Group>\n        <Group left={LEFT_MARGIN}>\n          <AxisBottom\n            top={yMax + TOP_MARGIN}\n            scale={xScale}\n            tickFormat={(hour: number) =>\n              (hour - firstHour) % 3 == 0 ? formatDateHour(hour) : \"\"\n            }\n            tickLabelProps={() => ({\n              fill: \"\",\n              fontSize: 11,\n              textAnchor: \"middle\",\n            })}\n          />\n        </Group>\n        <Group top={TOP_MARGIN} left={LEFT_MARGIN}>\n          <AxisLeft\n            scale={yScale}\n            hideTicks={true}\n            tickValues={yAxisTickValues}\n            tickFormat={(hour: number) => formatWaitTime(hour)}\n            tickLabelProps={() => ({\n              fill: \"\",\n              fontSize: 11,\n              textAnchor: \"end\",\n            })}\n          />\n        </Group>\n      </svg>\n\n      {tooltipOpen && tooltipData && (\n        <TooltipInPortal\n          key={Math.random()} // update tooltip bounds each render\n          top={tooltipTop}\n          left={tooltipLeft}\n          style={tooltipStyles}\n        >\n          {formatWaitTime(tooltipData)}\n        </TooltipInPortal>\n      )}\n    </GraphContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}