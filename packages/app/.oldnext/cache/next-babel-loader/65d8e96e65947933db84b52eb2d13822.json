{"ast":null,"code":"var __jsx = React.createElement;\nimport { ArrowLeftOutlined, QuestionCircleOutlined } from \"@ant-design/icons\";\nimport { useWindowWidth } from \"@react-hook/window-size\";\nimport { Button, Skeleton, Tooltip } from \"antd\";\nimport Link from \"next/link\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useProfile } from \"../../../hooks/useProfile\";\nimport { useQuestions } from \"../../../hooks/useQuestions\";\nimport { SettingsOptions } from \"../../Settings/SettingsPage\";\nimport { SPLIT_DETAIL_BKPT } from \"./TAQueueBreakpoints\";\nimport TAQueueDetail from \"./TAQueueDetail\";\nimport TAQueueListSection from \"./TAQueueListSection\";\nconst Container = styled.div.withConfig({\n  displayName: \"TAQueueListDetail__Container\",\n  componentId: \"sc-1mkewun-0\"\n})([\"flex:1;background:white;border:1px solid #cfd6de;margin-bottom:30px;@media (min-width:\", \"px){border:none;border-left:1px solid #cfd6de;margin-bottom:0px;display:flex;flex-direction:row;min-height:calc( 100vh - 46px - 67px );// - (height of footer) - (height of navbar)}\"], SPLIT_DETAIL_BKPT);\nconst List = styled.div.withConfig({\n  displayName: \"TAQueueListDetail__List\",\n  componentId: \"sc-1mkewun-1\"\n})([\"@media (min-width:\", \"px){width:320px;overflow-y:scroll;}\"], SPLIT_DETAIL_BKPT);\nconst PriorityQueueQuestionBubble = styled(QuestionCircleOutlined).withConfig({\n  displayName: \"TAQueueListDetail__PriorityQueueQuestionBubble\",\n  componentId: \"sc-1mkewun-2\"\n})([\"margin-right:8px;\"]);\nconst Detail = styled.div.withConfig({\n  displayName: \"TAQueueListDetail__Detail\",\n  componentId: \"sc-1mkewun-3\"\n})([\"border-left:1px solid #cfd6de;border-right:1px solid #cfd6de;flex:1;@media (min-width:\", \"px){overflow-y:scroll;}\"], SPLIT_DETAIL_BKPT);\nconst BackToQueue = styled.div.withConfig({\n  displayName: \"TAQueueListDetail__BackToQueue\",\n  componentId: \"sc-1mkewun-4\"\n})([\"height:40px;display:flex;align-items:center;padding-left:12px;color:#1890ff;cursor:pointer;\"]);\n/**\n * List and detail panel of the TA queue\n */\n\nexport default function TAQueueListDetail({\n  queueId,\n  courseId\n}) {\n  var _questions$questionsG;\n\n  const user = useProfile();\n  const {\n    0: selectedQuestionId,\n    1: setSelectedQuestionId\n  } = useState(null);\n  const {\n    questions,\n    questionsError,\n    mutateQuestions\n  } = useQuestions(queueId);\n  const isSideBySide = useWindowWidth() >= SPLIT_DETAIL_BKPT;\n  const helpingQuestions = questions === null || questions === void 0 ? void 0 : (_questions$questionsG = questions.questionsGettingHelp) === null || _questions$questionsG === void 0 ? void 0 : _questions$questionsG.filter(q => q.taHelped.id === user.id);\n  const allQuestionsList = questions ? [...helpingQuestions, ...questions.queue, ...questions.priorityQueue] : [];\n  const selectedQuestion = allQuestionsList.find(q => q.id === selectedQuestionId); // set currentQuestion to null if it no longer exists in the queue\n\n  if (selectedQuestionId && !selectedQuestion) {\n    setSelectedQuestionId(null);\n  }\n\n  if (!questions) {\n    return __jsx(Skeleton, null);\n  }\n\n  if (allQuestionsList.length === 0) {\n    return __jsx(EmptyQueueInfo, null, __jsx(NoQuestionsText, null, \"There are no questions in the queue\"), !user.phoneNotifsEnabled && !user.desktopNotifsEnabled && __jsx(NotifReminderButton, {\n      courseId: courseId\n    }));\n  }\n\n  const list = __jsx(List, null, __jsx(\"div\", {\n    \"data-cy\": \"list-helping\"\n  }, __jsx(TAQueueListSection, {\n    title: \"Currently Helping\",\n    questions: helpingQuestions,\n    onClickQuestion: setSelectedQuestionId,\n    selectedQuestionId: selectedQuestionId\n  })), __jsx(\"div\", {\n    \"data-cy\": \"list-priority\"\n  }, __jsx(TAQueueListSection, {\n    title: __jsx(\"span\", null, __jsx(Tooltip, {\n      title: \"Students in the priority queue were at the top of the queue before for some reason (e.g. they were at the top but AFK, or a TA helped them previously, and then hit 'requeue student.' You should communicate with your fellow staff members to prioritize these students first.\"\n    }, __jsx(PriorityQueueQuestionBubble, null)), \"Priority Queue\"),\n    questions: questions.priorityQueue,\n    onClickQuestion: setSelectedQuestionId,\n    selectedQuestionId: selectedQuestionId,\n    collapsible: true\n  })), __jsx(\"div\", {\n    \"data-cy\": \"list-queue\"\n  }, __jsx(TAQueueListSection, {\n    title: \"Waiting In Line\",\n    questions: questions.queue,\n    onClickQuestion: setSelectedQuestionId,\n    selectedQuestionId: selectedQuestionId,\n    collapsible: true,\n    showNumbers: true\n  })));\n\n  const detail = __jsx(Detail, null, selectedQuestion && __jsx(TAQueueDetail, {\n    queueId: queueId,\n    question: selectedQuestion\n  }));\n\n  if (isSideBySide) {\n    return __jsx(Container, null, list, detail);\n  } else if (selectedQuestionId) {\n    return __jsx(Container, null, __jsx(BackToQueue, {\n      onClick: () => setSelectedQuestionId(null)\n    }, __jsx(\"span\", null, __jsx(ArrowLeftOutlined, null), \" Back To Queue\")), detail);\n  } else {\n    return __jsx(Container, null, list);\n  }\n}\nconst EmptyQueueInfo = styled.div.withConfig({\n  displayName: \"TAQueueListDetail__EmptyQueueInfo\",\n  componentId: \"sc-1mkewun-5\"\n})([\"flex:1;display:flex;flex-direction:column;align-items:center;margin-top:30px;\"]);\nconst NoQuestionsText = styled.div.withConfig({\n  displayName: \"TAQueueListDetail__NoQuestionsText\",\n  componentId: \"sc-1mkewun-6\"\n})([\"font-weight:500;font-size:24px;color:#212934;\"]);\nconst NotifRemindButton = styled(Button).withConfig({\n  displayName: \"TAQueueListDetail__NotifRemindButton\",\n  componentId: \"sc-1mkewun-7\"\n})([\"margin-top:16px;border-radius:6px;background:#fff;\"]);\n\nfunction NotifReminderButton({\n  courseId\n}) {\n  return __jsx(React.Fragment, null, __jsx(Link, {\n    href: {\n      pathname: \"/settings\",\n      query: {\n        cid: courseId,\n        defaultPage: SettingsOptions.NOTIFICATIONS\n      }\n    }\n  }, __jsx(NotifRemindButton, null, \"Sign Up for Notifications\")));\n}","map":null,"metadata":{},"sourceType":"module"}