{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { API } from \"@koh/api-client\";\nimport { Button, Modal } from \"antd\";\nimport moment from \"moment\";\nimport { useRouter } from \"next/router\";\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useCourse } from \"../../hooks/useCourse\";\nexport var CheckinButton = styled(Button).withConfig({\n  displayName: \"TACheckinButton__CheckinButton\",\n  componentId: \"oiahss-0\"\n})([\"background:#2a9187;border-radius:6px;color:white;font-weight:500;font-size:14px;\"]);\nexport var CheckOutButton = styled(Button).withConfig({\n  displayName: \"TACheckinButton__CheckOutButton\",\n  componentId: \"oiahss-1\"\n})([\"color:#da3236;font-weight:500;font-size:14px;border-radius:6px;\"]);\nvar CheckoutModalButtonRow = styled.div.withConfig({\n  displayName: \"TACheckinButton__CheckoutModalButtonRow\",\n  componentId: \"oiahss-2\"\n})([\"display:flex;justify-content:space-between;\"]);\nvar EMPTY_CHECKOUT_INFO = {\n  canClearQueue: false,\n  nextOfficeHourTime: null\n};\nexport default function TACheckinButton(_ref) {\n  var courseId = _ref.courseId,\n      room = _ref.room,\n      state = _ref.state,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$block = _ref.block,\n      block = _ref$block === void 0 ? false : _ref$block;\n  var router = useRouter();\n\n  var _useCourse = useCourse(courseId),\n      course = _useCourse.course,\n      mutateCourse = _useCourse.mutateCourse;\n\n  var _useState = useState(-1),\n      queueIdToClean = _useState[0],\n      setQueueIdToClean = _useState[1];\n\n  function checkInTA() {\n    return _checkInTA.apply(this, arguments);\n  }\n\n  function _checkInTA() {\n    _checkInTA = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var redirectID;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return API.taStatus.checkIn(courseId, room);\n\n            case 2:\n              redirectID = _context3.sent;\n              router.push(\"/course/[cid]/queue/[qid]\", \"/course/\".concat(courseId, \"/queue/\").concat(redirectID.id));\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _checkInTA.apply(this, arguments);\n  }\n\n  var _useState2 = useState(EMPTY_CHECKOUT_INFO),\n      checkoutModalInfo = _useState2[0],\n      setCheckoutModalInfo = _useState2[1];\n\n  var closeModal = function closeModal() {\n    return setCheckoutModalInfo(EMPTY_CHECKOUT_INFO);\n  };\n\n  return __jsx(React.Fragment, null, state === \"CheckedIn\" && __jsx(CheckOutButton, {\n    type: \"default\",\n    size: \"large\",\n    disabled: disabled,\n    block: block,\n    \"data-cy\": \"check-out-button\",\n    onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$API$taStatus$c, queueId, modalInfo;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return API.taStatus.checkOut(courseId, room);\n\n            case 2:\n              _yield$API$taStatus$c = _context.sent;\n              queueId = _yield$API$taStatus$c.queueId;\n              modalInfo = _objectWithoutProperties(_yield$API$taStatus$c, [\"queueId\"]);\n              setQueueIdToClean(queueId);\n              setCheckoutModalInfo(modalInfo);\n              mutateCourse();\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))\n  }, \"Check Out\"), state === \"CheckedOut\" && __jsx(CheckinButton, {\n    type: \"default\",\n    size: \"large\",\n    block: block,\n    onClick: function onClick() {\n      return checkInTA();\n    },\n    disabled: disabled || !course,\n    \"data-cy\": \"check-in-button\"\n  }, \"Check In\"), __jsx(Modal, {\n    visible: checkoutModalInfo.canClearQueue,\n    title: \"Let's clean up...\",\n    onCancel: closeModal,\n    footer: [__jsx(Button, {\n      key: \"keep\",\n      onClick: closeModal\n    }, \"Leave Students In Queue\"), __jsx(Button, {\n      key: \"clear\",\n      type: \"primary\",\n      onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return API.queues.clean(queueIdToClean);\n\n              case 2:\n                closeModal();\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })),\n      \"data-cy\": \"clear-queue-btn\"\n    }, \"Clear Queue\")]\n  }, \"You are the last TA to leave.\", \" \", checkoutModalInfo.nextOfficeHourTime ? __jsx(React.Fragment, null, \"There will not be any office hours for\", \" \", __jsx(\"strong\", null, moment(checkoutModalInfo.nextOfficeHourTime).fromNow(true))) : __jsx(\"strong\", null, \"There are no later office hours scheduled\"), \". Do you want to clear the remaining students out of the queue?\"));\n}","map":{"version":3,"sources":["/home/runner/work/office-hours/office-hours/packages/app/components/Today/TACheckinButton.tsx"],"names":["API","Button","Modal","moment","useRouter","useState","styled","useCourse","CheckinButton","CheckOutButton","CheckoutModalButtonRow","div","EMPTY_CHECKOUT_INFO","canClearQueue","nextOfficeHourTime","TACheckinButton","courseId","room","state","disabled","block","router","course","mutateCourse","queueIdToClean","setQueueIdToClean","checkInTA","taStatus","checkIn","redirectID","push","id","checkoutModalInfo","setCheckoutModalInfo","closeModal","checkOut","queueId","modalInfo","queues","clean","fromNow"],"mappings":"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","sourcesContent":["import { API } from \"@koh/api-client\";\nimport { Button, Modal } from \"antd\";\nimport moment from \"moment\";\nimport { useRouter } from \"next/router\";\nimport { ReactElement, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useCourse } from \"../../hooks/useCourse\";\n\nexport const CheckinButton = styled(Button)`\n  background: #2a9187;\n  border-radius: 6px;\n  color: white;\n  font-weight: 500;\n  font-size: 14px;\n`;\n\nexport const CheckOutButton = styled(Button)`\n  color: #da3236;\n  font-weight: 500;\n  font-size: 14px;\n  border-radius: 6px;\n`;\n\nconst CheckoutModalButtonRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\ntype CheckInButtonState =\n  | \"CheckedIn\"\n  | \"CheckedOut\"\n  | \"CheckedIntoOtherQueueAlready\";\n\ninterface TACheckinButtonProps {\n  courseId: number;\n  room: string; // name of room to check into\n  state: CheckInButtonState; // State of the button\n  disabled?: boolean;\n  block?: boolean;\n}\nconst EMPTY_CHECKOUT_INFO = { canClearQueue: false, nextOfficeHourTime: null };\n\nexport default function TACheckinButton({\n  courseId,\n  room,\n  state,\n  disabled = false,\n  block = false,\n}: TACheckinButtonProps): ReactElement {\n  const router = useRouter();\n\n  const { course, mutateCourse } = useCourse(courseId);\n  const [queueIdToClean, setQueueIdToClean] = useState(-1);\n\n  async function checkInTA() {\n    // to see old check in in person functionality look at commit b4768bbfb0f36444c80961703bdbba01ff4a5596\n    //trying to limit changes to the frontend, all queues will have the room online\n    const redirectID = await API.taStatus.checkIn(courseId, room);\n\n    router.push(\n      \"/course/[cid]/queue/[qid]\",\n      `/course/${courseId}/queue/${redirectID.id}`\n    );\n  }\n\n  const [checkoutModalInfo, setCheckoutModalInfo] = useState<{\n    canClearQueue: boolean;\n    nextOfficeHourTime?: Date;\n  }>(EMPTY_CHECKOUT_INFO);\n  const closeModal = () => setCheckoutModalInfo(EMPTY_CHECKOUT_INFO);\n\n  return (\n    <>\n      {state === \"CheckedIn\" && (\n        <CheckOutButton\n          type=\"default\"\n          size=\"large\"\n          disabled={disabled}\n          block={block}\n          data-cy=\"check-out-button\"\n          onClick={async () => {\n            const { queueId, ...modalInfo } = await API.taStatus.checkOut(\n              courseId,\n              room\n            );\n            setQueueIdToClean(queueId);\n            setCheckoutModalInfo(modalInfo);\n            mutateCourse();\n          }}\n        >\n          Check Out\n        </CheckOutButton>\n      )}\n      {state === \"CheckedOut\" && (\n        <CheckinButton\n          type=\"default\"\n          size=\"large\"\n          block={block}\n          onClick={() => checkInTA()}\n          disabled={disabled || !course}\n          data-cy=\"check-in-button\"\n        >\n          Check In\n        </CheckinButton>\n      )}\n      <Modal\n        visible={checkoutModalInfo.canClearQueue}\n        title=\"Let's clean up...\"\n        onCancel={closeModal}\n        footer={[\n          <Button key=\"keep\" onClick={closeModal}>\n            Leave Students In Queue\n          </Button>,\n          <Button\n            key=\"clear\"\n            type=\"primary\"\n            onClick={async () => {\n              await API.queues.clean(queueIdToClean);\n              closeModal();\n            }}\n            data-cy=\"clear-queue-btn\"\n          >\n            Clear Queue\n          </Button>,\n        ]}\n      >\n        You are the last TA to leave.{\" \"}\n        {checkoutModalInfo.nextOfficeHourTime ? (\n          <>\n            There will not be any office hours for{\" \"}\n            <strong>\n              {moment(checkoutModalInfo.nextOfficeHourTime).fromNow(true)}\n            </strong>\n          </>\n        ) : (\n          <strong>There are no later office hours scheduled</strong>\n        )}\n        . Do you want to clear the remaining students out of the queue?\n      </Modal>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}