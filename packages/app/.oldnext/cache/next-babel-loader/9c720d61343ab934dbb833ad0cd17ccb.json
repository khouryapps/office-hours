{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { ClockCircleOutlined, NotificationOutlined, StopOutlined, CloudSyncOutlined, FrownOutlined } from \"@ant-design/icons\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useQueue } from \"../../hooks/useQueue\";\nimport { formatQueueTime } from \"../../utils/TimeUtil\";\nimport { TAStatuses } from \"./TAStatuses\";\nimport { Button, Tooltip } from \"antd\";\nimport moment from \"moment\";\nimport { RenderEvery } from \"../RenderEvery\";\nexport const Container = styled.div.withConfig({\n  displayName: \"QueueListSharedComponents__Container\",\n  componentId: \"sc-1abq9vy-0\"\n})([\"display:flex;flex-direction:row;align-items:center;\"]);\nconst QueueTitle = styled.div.withConfig({\n  displayName: \"QueueListSharedComponents__QueueTitle\",\n  componentId: \"sc-1abq9vy-1\"\n})([\"font-weight:500;font-size:24px;color:#212934;\"]);\nexport const NotesText = styled.div.withConfig({\n  displayName: \"QueueListSharedComponents__NotesText\",\n  componentId: \"sc-1abq9vy-2\"\n})([\"font-size:16px;color:#5f6b79;\"]); // New queue styled components start here\n\nconst InfoColumnContainer = styled.div.withConfig({\n  displayName: \"QueueListSharedComponents__InfoColumnContainer\",\n  componentId: \"sc-1abq9vy-3\"\n})([\"flex-shrink:0;padding-bottom:30px;@media (min-width:650px){margin-top:32px;width:290px;}\"]);\nconst QueueInfoColumnButtonStyle = styled(Button).withConfig({\n  displayName: \"QueueListSharedComponents__QueueInfoColumnButtonStyle\",\n  componentId: \"sc-1abq9vy-4\"\n})([\"font-weight:500;font-size:14px;border:1px solid #cfd6de;border-radius:6px;margin-bottom:12px;\"]);\nexport const QueueInfoColumnButton = props => __jsx(QueueInfoColumnButtonStyle, _extends({\n  size: \"large\",\n  block: true\n}, props));\nconst QueuePropertyRow = styled.div.withConfig({\n  displayName: \"QueueListSharedComponents__QueuePropertyRow\",\n  componentId: \"sc-1abq9vy-5\"\n})([\"display:flex;flex-direction:row;align-items:center;margin-bottom:20px;color:#5f6b79;font-size:20px;\"]);\nconst QueuePropertyText = styled.div.withConfig({\n  displayName: \"QueueListSharedComponents__QueuePropertyText\",\n  componentId: \"sc-1abq9vy-6\"\n})([\"margin-left:12px;font-size:16px;min-width:0;overflow-wrap:break-word;\"]);\nconst StaffH2 = styled.h2.withConfig({\n  displayName: \"QueueListSharedComponents__StaffH2\",\n  componentId: \"sc-1abq9vy-7\"\n})([\"margin-top:32px;\"]);\nconst QueueRoomGroup = styled.div.withConfig({\n  displayName: \"QueueListSharedComponents__QueueRoomGroup\",\n  componentId: \"sc-1abq9vy-8\"\n})([\"display:flex;flex-direction:row;align-items:center;margin-bottom:24px;\"]);\nexport function QueueInfoColumn({\n  queueId,\n  buttons\n}) {\n  const {\n    queue\n  } = useQueue(queueId);\n  return __jsx(InfoColumnContainer, null, __jsx(QueueRoomGroup, null, __jsx(QueueTitle, null, queue === null || queue === void 0 ? void 0 : queue.room), !queue.allowQuestions && __jsx(Tooltip, {\n    title: \"This queue is no longer accepting questions\"\n  }, __jsx(StopOutlined, {\n    \"data-cy\": \"stopQuestions\",\n    style: {\n      color: \"red\",\n      fontSize: \"24px\",\n      marginLeft: \"8px\"\n    }\n  }))), queue.startTime && queue.endTime && __jsx(QueuePropertyRow, null, __jsx(ClockCircleOutlined, null), __jsx(QueuePropertyText, {\n    className: \"hide-in-percy\"\n  }, formatQueueTime(queue))), (queue === null || queue === void 0 ? void 0 : queue.notes) && __jsx(QueuePropertyRow, null, __jsx(NotificationOutlined, null), __jsx(QueuePropertyText, null, queue.notes)), __jsx(QueueUpToDateInfo, {\n    queueId: queueId\n  }), buttons, __jsx(StaffH2, null, \"Staff\"), __jsx(TAStatuses, {\n    queueId: queueId\n  }));\n}\n\nfunction QueueUpToDateInfo({\n  queueId\n}) {\n  const {\n    0: lastUpdated,\n    1: setLastUpdated\n  } = useState(null);\n  const {\n    isLive\n  } = useQueue(queueId, setLastUpdated);\n  return __jsx(QueuePropertyRow, null, isLive || lastUpdated ? __jsx(CloudSyncOutlined, null) : __jsx(FrownOutlined, null), __jsx(QueuePropertyText, null, isLive ? \"Queue up to date\" : lastUpdated ? __jsx(RenderEvery, {\n    render: () => {\n      const secondsAgo = (Date.now() - lastUpdated.getTime()) / 1000;\n      return `Queue updated ${secondsAgo < 60 ? Math.ceil(secondsAgo) + \"s\" : moment(lastUpdated).fromNow(true)} ago`;\n    },\n    interval: 1000\n  }) : \"Queue may be out of date\"));\n}","map":null,"metadata":{},"sourceType":"module"}