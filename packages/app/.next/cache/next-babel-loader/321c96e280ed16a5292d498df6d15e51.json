{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { API } from \"@koh/api-client\";\nimport useSWR from \"swr\";\nimport { Tooltip, Card, Space, Drawer, Button, DatePicker, Divider, Row, Spin } from \"antd\";\nimport { InfoCircleOutlined, QuestionCircleOutlined } from \"@ant-design/icons\";\nimport { useProfile } from \"../../../hooks/useProfile\";\nimport { useRouter } from \"next/router\";\nimport { StandardPageContainer } from \"../../../components/common/PageContainer\";\nimport { InsightComponent } from \"@koh/common\";\nimport NavBar from \"../../../components/Nav/NavBar\";\nimport BarChartComponent from \"../../../components/Insights/components/BarChartComponent\";\nimport SimpleDisplayComponent from \"../../../components/Insights/components/SimpleDisplayComponent\";\nimport InsightsDisplayOptions from \"../../../components/Insights/components/InsightsDisplayOptions\";\nimport { SimpleTable } from \"../../../components/Insights/components/SimpleTable\";\nimport styled from \"styled-components\";\nconst InsightsRowContainer = styled.div.withConfig({\n  displayName: \"insights__InsightsRowContainer\",\n  componentId: \"sc-13ej1wk-0\"\n})([\"display:flex;direction:ltr;margin-left:-0.5%;margin-right:-0.5%;\"]);\nexport default function Insights() {\n  const profile = useProfile();\n  const router = useRouter();\n  const {\n    cid\n  } = router.query;\n  const {\n    0: dateRange,\n    1: setDateRange\n  } = useState({\n    start: \"\",\n    end: \"\"\n  });\n  const {\n    data: allInsights\n  } = useSWR(`api/v1/insights/listAll`, async () => API.insights.list());\n  const {\n    0: settingsVisible,\n    1: setSettingsVisible\n  } = useState(false);\n\n  if (!allInsights || !(profile === null || profile === void 0 ? void 0 : profile.insights)) {\n    return null;\n  } // Group users insights by size (small | default) so they can be rendered correctly\n\n\n  const [smallInsights, defaultInsights] = profile.insights.reduce(([smallInsights, defaultInsights], insight) => allInsights[insight].size === \"small\" ? [[...smallInsights, insight], defaultInsights] : [smallInsights, [...defaultInsights, insight]], [[], []]);\n  const {\n    RangePicker\n  } = DatePicker;\n  return __jsx(React.Fragment, null, __jsx(StandardPageContainer, null, __jsx(NavBar, {\n    courseId: Number(cid)\n  }), __jsx(Row, {\n    align: \"middle\",\n    justify: \"space-between\",\n    style: {\n      margin: \"12px 0px\"\n    }\n  }, __jsx(\"h1\", {\n    style: {\n      display: \"inline\",\n      margin: \"0px\"\n    }\n  }, \"Insights Dashboard\"), __jsx(Row, null, __jsx(\"div\", {\n    style: {\n      maxWidth: \"200 px\"\n    }\n  }, __jsx(Tooltip, {\n    title: \"If no date range is selected results are from the data for the full semester so far\"\n  }, __jsx(QuestionCircleOutlined, null)), __jsx(\"b\", {\n    style: {\n      display: \"inline-block\",\n      marginRight: \"12px\",\n      marginLeft: \"8px\"\n    }\n  }, \"Date Range\"), __jsx(RangePicker, {\n    onChange: (_, dateString) => setDateRange({\n      start: dateString[0],\n      end: dateString[1]\n    })\n  })), __jsx(Button, {\n    style: {\n      marginLeft: \"24px\"\n    },\n    onClick: () => setSettingsVisible(true)\n  }, \"Edit Insights\"))), __jsx(Divider, {\n    style: {\n      margin: \"0 0 16px 0\"\n    }\n  }), __jsx(Drawer, {\n    title: \"Display Options\",\n    placement: \"left\",\n    closable: true,\n    destroyOnClose: true,\n    onClose: () => setSettingsVisible(false),\n    visible: settingsVisible,\n    width: 400\n  }, __jsx(InsightsDisplayOptions, null)), __jsx(InsightsRowContainer, null, smallInsights === null || smallInsights === void 0 ? void 0 : smallInsights.map(insightName => {\n    return __jsx(RenderInsight, {\n      key: insightName,\n      insightName: insightName,\n      insightDisplay: allInsights[insightName],\n      dateRange: dateRange\n    });\n  })), __jsx(InsightsRowContainer, null, defaultInsights === null || defaultInsights === void 0 ? void 0 : defaultInsights.map(insightName => {\n    return __jsx(RenderInsight, {\n      key: insightName,\n      insightName: insightName,\n      insightDisplay: allInsights[insightName],\n      dateRange: dateRange\n    });\n  }))));\n}\n\nfunction RenderInsight({\n  insightName,\n  insightDisplay,\n  dateRange\n}) {\n  const router = useRouter();\n  const {\n    cid\n  } = router.query;\n  const {\n    data: insightOutput\n  } = useSWR(cid && `api/v1/insights/${cid}/${insightName}?start=${dateRange.start}&end=${dateRange.end}`, async () => await API.insights.get(Number(cid), insightName, {\n    start: dateRange.start,\n    end: dateRange.end\n  }));\n  let DataComponent;\n\n  switch (insightDisplay.component) {\n    case InsightComponent.SimpleDisplay:\n      DataComponent = SimpleDisplayComponent;\n      break;\n\n    case InsightComponent.BarChart:\n      DataComponent = BarChartComponent;\n      break;\n\n    case InsightComponent.SimpleTable:\n      DataComponent = SimpleTable;\n      break;\n\n    default:\n      // Line below will show error if switch is not exhaustive of all enum values\n      componentDoesNotExist(insightDisplay.component);\n  }\n\n  return __jsx(Card, {\n    size: insightDisplay.size,\n    title: insightDisplay.displayName,\n    style: {\n      margin: \"0.5%\",\n      padding: \"2px\",\n      width: insightDisplay.size === \"default\" ? \"50%\" : \"16.66%\",\n      maxWidth: insightDisplay.size === \"default\" ? \"625px\" : \"200px\"\n    },\n    bodyStyle: {\n      position: \"relative\"\n    },\n    extra: __jsx(Space, null, __jsx(Tooltip, {\n      title: insightDisplay.description\n    }, __jsx(InfoCircleOutlined, null)))\n  }, insightOutput === undefined ? __jsx(Spin, {\n    style: {\n      margin: \"10% 45%\"\n    }\n  }) : __jsx(DataComponent, {\n    key: insightName,\n    output: insightOutput\n  }));\n}\n\nfunction componentDoesNotExist(componentName) {\n  throw new Error(`Component ${componentName} was unable to be rendered`);\n}","map":null,"metadata":{},"sourceType":"module"}