{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { DeleteOutlined } from \"@ant-design/icons\";\nimport { API } from \"@koh/api-client\";\nimport { Button, message, Switch, Table } from \"antd\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport useSWR from \"swr\";\nimport { useCourse } from \"../../hooks/useCourse\";\nimport AddOverrideInput from \"./AddOverrideInput\";\nconst {\n  Column\n} = Table;\nconst OverrideContents = styled.div.withConfig({\n  displayName: \"CourseOverrideSettings__OverrideContents\",\n  componentId: \"sc-18esdfc-0\"\n})([\"width:90%;margin-left:auto;margin-right:auto;padding-top:50px;\"]);\nexport default function CourseOverrideSettings({\n  courseId\n}) {\n  const {\n    data,\n    mutate\n  } = useSWR(`/api/v1/courses/course_override`, async () => API.course.getCourseOverrides(courseId));\n  const {\n    course,\n    mutateCourse\n  } = useCourse(courseId);\n  const formattedRoles = {\n    student: \"Student\",\n    ta: \"TA\",\n    professor: \"Professor\"\n  };\n  return __jsx(OverrideContents, null, __jsx(AddOverrideInput, {\n    courseId: courseId,\n    onAddOverride: () => mutate()\n  }), __jsx(Table, {\n    dataSource: data === null || data === void 0 ? void 0 : data.data.map((row, i) => _objectSpread(_objectSpread({}, row), {}, {\n      key: i,\n      role: formattedRoles[row.role]\n    }))\n  }, __jsx(Column, {\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\"\n  }), __jsx(Column, {\n    title: \"Email\",\n    dataIndex: \"email\",\n    key: \"email\"\n  }), __jsx(Column, {\n    title: \"Role\",\n    dataIndex: \"role\",\n    key: \"role\"\n  }), __jsx(Column, {\n    title: \"Delete\",\n    key: \"delete\",\n    render: (text, record) => __jsx(Button, {\n      onClick: async () => {\n        await API.course.deleteOverride(courseId, {\n          email: record.email,\n          role: record.role\n        });\n        message.success(\"Successfully deleted the override for \" + record.name);\n        mutate();\n      },\n      type: \"link\",\n      style: {\n        textAlign: \"center\"\n      },\n      icon: __jsx(DeleteOutlined, {\n        style: {\n          color: \"red\"\n        }\n      })\n    })\n  })), __jsx(\"div\", null, \"Is Khoury Admin/Banner down? Toggle this to temporarily allow students to join your class.\", \" \", __jsx(Switch, {\n    onChange: async () => {\n      await API.course.toggleSelfEnroll(courseId);\n      mutateCourse();\n    },\n    defaultChecked: course === null || course === void 0 ? void 0 : course.selfEnroll\n  })), __jsx(\"b\", null, \"You must manually toggle this feature off later, or any student will be allowed to join your class.\"));\n}","map":null,"metadata":{},"sourceType":"module"}