{"ast":null,"code":"var __jsx = React.createElement;\nimport { API } from \"@koh/api-client\";\nimport React, { useState } from \"react\";\nimport { Form, Input, Tooltip, Row, Select, Button, Result } from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport styled from \"styled-components\";\nimport useSWR from \"swr\";\nimport { useRouter } from \"next/router\";\nconst HalfFormItem = styled(Form.Item).withConfig({\n  displayName: \"ApplyPage__HalfFormItem\",\n  componentId: \"dtpg8c-0\"\n})([\"width:48%;\"]);\nconst {\n  Option\n} = Select;\nexport default function ApplyPage() {\n  const {\n    0: submitted,\n    1: setSubmitted\n  } = useState(false);\n  const {\n    0: unauthorized,\n    1: setUnauthorized\n  } = useState(false);\n  const router = useRouter();\n  const [form] = Form.useForm();\n  const {\n    data: semesters\n  } = useSWR(\"/api/v1/semesters\", async () => API.semesters.get());\n\n  const handleSubmit = async () => {\n    const value = await form.validateFields();\n    value.sections = value.sections.replace(/\\s+/g, \"\").split(\",\").map(Number);\n    value.password = Object.keys(router.query).length == 1 ? Object.keys(router.query)[0] : \"\";\n\n    try {\n      await API.course.submitCourse(value);\n    } catch (error) {\n      setUnauthorized(true);\n    }\n\n    setSubmitted(true);\n  };\n\n  const resubmit = () => {\n    form.resetFields();\n    setSubmitted(false);\n  };\n\n  const validateSections = value => {\n    const values = value.replace(/\\s+/g, \"\").split(\",\");\n\n    for (const val of values) {\n      if (isNaN(Number(val))) return false;\n    }\n\n    return true;\n  };\n\n  const validateCourseName = value => {\n    const split = value.split(\" \");\n    const subject = split[0] == \"CS\" || split[0] == \"DS\" || split[0] == \"CY\" || split[0] == \"IS\";\n    return split.length == 2 && subject && /^\\d+$/.test(split[1]);\n  };\n\n  if (unauthorized) {\n    return __jsx(Result, {\n      status: \"403\",\n      title: \"403\",\n      subTitle: __jsx(\"div\", null, \"Sorry, you are not authorized to submit an application.\", __jsx(\"br\", null), \"Please email\", \" \", __jsx(\"a\", {\n        href: \"mailto:help@khouryofficehours.com\"\n      }, \"help@khouryofficehours.com\"), \" \", \"for the correct URL.\")\n    });\n  }\n\n  if (submitted) {\n    return __jsx(Result, {\n      status: \"success\",\n      title: \"Application successfully submitted!\",\n      subTitle: __jsx(\"div\", null, \"Thanks for applying to use Khoury Office Hours, we'll email you with next steps as the semester gets closer.\", __jsx(\"br\", null), \"If you have any questions, feel free to email us at\", \" \", __jsx(\"a\", {\n        href: \"mailto:help@khouryofficehours.com\"\n      }, \"help@khouryofficehours.com\"), \".\"),\n      extra: [__jsx(Button, {\n        type: \"primary\",\n        key: \"info\",\n        href: \"https://info.khouryofficehours.com\"\n      }, \"Go to Info Site\"), __jsx(Button, {\n        key: \"submit\",\n        onClick: resubmit\n      }, \"Submit another course\")]\n    });\n  }\n\n  return __jsx(\"div\", {\n    style: {\n      padding: \"3% 12%\"\n    }\n  }, __jsx(\"h1\", null, \"Apply for Khoury Office Hours\"), __jsx(\"div\", null, \"Please submit an application for each course you want to use Khoury Office Hours for.\"), __jsx(\"br\", null), __jsx(Form, {\n    form: form,\n    layout: \"vertical\",\n    initialValues: {\n      remember: true,\n      semester: \"Summer_1 2021\",\n      timezone: \"America/New_York\"\n    }\n  }, __jsx(Form.Item, {\n    label: \"Email\",\n    name: \"coordinator_email\",\n    rules: [{\n      required: true,\n      type: \"email\",\n      message: \"Please input your email.\"\n    }]\n  }, __jsx(Input, {\n    placeholder: \"example@northeastern.edu\"\n  })), __jsx(Row, {\n    justify: \"space-between\"\n  }, __jsx(HalfFormItem, {\n    label: \"Course Name\",\n    name: \"name\",\n    rules: [{\n      required: true,\n      message: \"Please input your course name.\"\n    }, {\n      validator: (_, value) => validateCourseName(value) ? Promise.resolve() : Promise.reject(new Error(\"Please enter a valid course format (e.g. CS 2500).\"))\n    }]\n  }, __jsx(Input, {\n    placeholder: \"Ex: CS 2500\"\n  })), __jsx(HalfFormItem, {\n    label: \"Section Number(s)\",\n    name: \"sections\",\n    rules: [{\n      required: true,\n      message: \"Please input your section number(s).\"\n    }, {\n      validator: (_, value) => validateSections(value) ? Promise.resolve() : Promise.reject(new Error(\"Please enter a comma separated list of section numbers.\"))\n    }]\n  }, __jsx(Input, {\n    placeholder: \"Ex: 1, 2, 3\"\n  }))), __jsx(Row, {\n    justify: \"space-between\"\n  }, __jsx(HalfFormItem, {\n    label: \"Semester\",\n    name: \"semester\",\n    rules: [{\n      required: true,\n      message: \"Please select a semester.\"\n    }]\n  }, __jsx(Select, null, semesters && semesters.map(semester => __jsx(Option, {\n    key: semester.id,\n    value: `${semester.season} ${semester.year}`\n  }, `${semester.season} ${semester.year}`.replaceAll(\"_\", \" \"))))), __jsx(HalfFormItem, {\n    label: \"Campus\",\n    name: \"timezone\",\n    rules: [{\n      required: true,\n      message: \"Please select a Northeastern campus (for purpose of timezone).\"\n    }]\n  }, __jsx(Select, null, __jsx(Option, {\n    value: \"America/New_York\"\n  }, \"Boston / Charlotte\"), __jsx(Option, {\n    value: \"America/Los_Angeles\"\n  }, \"San Francisco / Seattle\"), __jsx(Option, {\n    value: \"America/Toronto\"\n  }, \"Toronto\"), __jsx(Option, {\n    value: \"America/Vancouver\"\n  }, \"Vancouver\")))), __jsx(Form.Item, {\n    label: __jsx(Row, {\n      align: \"middle\"\n    }, __jsx(\"span\", {\n      style: {\n        marginRight: 8\n      }\n    }, \"Office Hours Calendar URL\"), \" \", __jsx(Tooltip, {\n      title: __jsx(\"div\", null, \"See\", \" \", __jsx(\"a\", {\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        href: \"https://info.khouryofficehours.com/coordinators-manual\"\n      }, \"here\"), \" \", \"to create your office hours calendar\")\n    }, __jsx(InfoCircleOutlined, null))),\n    name: \"icalURL\",\n    rules: [{\n      required: true,\n      type: \"url\",\n      message: \"Please input your office hours calendar URL.\"\n    }]\n  }, __jsx(Input, {\n    placeholder: \"https://calendar.google.com/calendar/ical/.../basic.ics\"\n  })), __jsx(\"br\", null), __jsx(Form.Item, null, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    onClick: handleSubmit\n  }, \"Submit\"))));\n}","map":null,"metadata":{},"sourceType":"module"}