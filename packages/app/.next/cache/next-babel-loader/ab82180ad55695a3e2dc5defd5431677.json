{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Select, Button, Tag } from \"antd\";\nimport { useProfile } from \"../../hooks/useProfile\";\nimport { useEffect } from \"react\";\nimport { createSGString } from \"./ApplyPage\";\nconst Italics = styled.span.withConfig({\n  displayName: \"SelectCourses__Italics\",\n  componentId: \"sc-1947xxr-0\"\n})([\"font-weight:normal;font-size:16px;font-style:italic;\"]);\nconst FormSection = styled.div.withConfig({\n  displayName: \"SelectCourses__FormSection\",\n  componentId: \"sc-1947xxr-1\"\n})([\"margin-top:20px;\"]);\nconst CoursesBlock = styled.div.withConfig({\n  displayName: \"SelectCourses__CoursesBlock\",\n  componentId: \"sc-1947xxr-2\"\n})([\"background-color:#fff;border:1px solid #d9d9d9;border-radius:2px;padding:5px;display:flex;align-items:center;\"]);\nconst LargeTag = styled(Tag).withConfig({\n  displayName: \"SelectCourses__LargeTag\",\n  componentId: \"sc-1947xxr-3\"\n})([\"font-size:14px;padding:2px 6px;\"]);\nexport default function SelectCourses({\n  onSubmit,\n  initialValues\n}) {\n  var _profile$pendingCours2;\n\n  const {\n    0: selectedCourses,\n    1: setSelectedCourses\n  } = useState([]);\n  const profile = useProfile(); // populate initially selected courses when returning to first selection page\n\n  useEffect(() => {\n    var _profile$pendingCours;\n\n    const defaultValues = profile === null || profile === void 0 ? void 0 : (_profile$pendingCours = profile.pendingCourses) === null || _profile$pendingCours === void 0 ? void 0 : _profile$pendingCours.reduce((defaults, course, idx) => {\n      if (initialValues.find(name => name === course.name)) {\n        defaults.push(idx);\n        return defaults;\n      } else return defaults;\n    }, []);\n    setSelectedCourses(defaultValues || []);\n  }, []);\n\n  const handleCoursesChange = indicies => {\n    setSelectedCourses(indicies);\n  };\n\n  const handleSubmit = () => onSubmit(selectedCourses.map(courseIdx => profile === null || profile === void 0 ? void 0 : profile.pendingCourses[courseIdx]));\n\n  return __jsx(\"div\", null, __jsx(\"div\", null, \"It looks like this is your first time using the app for this semester. Please pick out all the courses you want to use Khoury Office Hours for.\"), __jsx(FormSection, null, __jsx(\"h3\", null, \"Courses\", \" \", __jsx(Italics, null, \"(Select all the courses you are applying for)\")), __jsx(Select, {\n    mode: \"multiple\",\n    placeholder: \"Please select your courses\",\n    onChange: handleCoursesChange,\n    style: {\n      width: \"100%\"\n    },\n    value: selectedCourses\n  }, profile === null || profile === void 0 ? void 0 : (_profile$pendingCours2 = profile.pendingCourses) === null || _profile$pendingCours2 === void 0 ? void 0 : _profile$pendingCours2.map((course, idx) => __jsx(Select.Option, {\n    key: course.name,\n    value: idx\n  }, createSGString(course))))), __jsx(FormSection, null, __jsx(\"h3\", null, \"The following courses have already registered for the app:\"), __jsx(CoursesBlock, null, profile === null || profile === void 0 ? void 0 : profile.courses.map(course => {\n    var _course$course, _course$course2;\n\n    return __jsx(LargeTag, {\n      key: (_course$course = course.course) === null || _course$course === void 0 ? void 0 : _course$course.id\n    }, (_course$course2 = course.course) === null || _course$course2 === void 0 ? void 0 : _course$course2.name);\n  }))), __jsx(Button, {\n    onClick: handleSubmit,\n    type: \"primary\",\n    style: {\n      marginTop: \"30px\"\n    }\n  }, \"Next\"));\n}","map":null,"metadata":{},"sourceType":"module"}