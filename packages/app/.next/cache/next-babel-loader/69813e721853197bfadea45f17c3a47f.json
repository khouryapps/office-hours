{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { API } from \"@koh/api-client\";\nimport { urlB64ToUint8Array } from \"./urlB64ToUint8Array\";\nimport platform from \"platform\";\n\nconst doesBrowserSupportNotifications = () => \"serviceWorker\" in window.navigator && \"PushManager\" in window;\n\nexport let NotificationStates;\n\n(function (NotificationStates) {\n  NotificationStates[NotificationStates[\"granted\"] = 0] = \"granted\";\n  NotificationStates[NotificationStates[\"notAllowed\"] = 1] = \"notAllowed\";\n  NotificationStates[NotificationStates[\"browserUnsupported\"] = 2] = \"browserUnsupported\";\n})(NotificationStates || (NotificationStates = {}));\n\nexport function getNotificationState() {\n  if (!doesBrowserSupportNotifications()) {\n    return NotificationStates.browserUnsupported;\n  } else if (Notification.permission === \"granted\") {\n    return NotificationStates.granted;\n  } else {\n    return NotificationStates.notAllowed;\n  }\n} // Tries to get notification permission and returns whether granted\n\nexport async function requestNotificationPermission() {\n  let state = getNotificationState();\n\n  if (state === NotificationStates.notAllowed) {\n    await window.Notification.requestPermission();\n    state = getNotificationState();\n  }\n\n  return state;\n}\n\nconst getRegistration = async () => {\n  var _window$navigator, _window$navigator$ser;\n\n  return await ((_window$navigator = window.navigator) === null || _window$navigator === void 0 ? void 0 : (_window$navigator$ser = _window$navigator.serviceWorker) === null || _window$navigator$ser === void 0 ? void 0 : _window$navigator$ser.getRegistration());\n}; // 1. subscribe to pushmanager\n// 2. send subscription info to our backend\n\n\nexport const registerNotificationSubscription = async () => {\n  if (doesBrowserSupportNotifications()) {\n    const subscription = await ensureSubscription();\n    const subData = subscription.toJSON();\n    await API.notif.desktop.register(_objectSpread(_objectSpread({}, subData), {}, {\n      name: `${platform.name} on ${platform.os}`\n    }));\n  }\n};\n/**\n * Ensure we are subscribed to our browser's push service\n */\n\nasync function ensureSubscription() {\n  var _await$getRegistratio;\n\n  const pushManager = (_await$getRegistratio = await getRegistration()) === null || _await$getRegistratio === void 0 ? void 0 : _await$getRegistratio.pushManager;\n  let subscription = await (pushManager === null || pushManager === void 0 ? void 0 : pushManager.getSubscription());\n\n  if (subscription === null) {\n    const PUBLICKEY = await API.notif.desktop.credentials();\n    console.log(PUBLICKEY);\n    const applicationServerKey = urlB64ToUint8Array(PUBLICKEY);\n    const options = {\n      applicationServerKey,\n      userVisibleOnly: true\n    };\n    subscription = await pushManager.subscribe(options);\n  }\n\n  return subscription;\n}\n\nexport async function getEndpoint() {\n  var _await$getRegistratio2, _await$getRegistratio3;\n\n  const subscription = await ((_await$getRegistratio2 = await getRegistration()) === null || _await$getRegistratio2 === void 0 ? void 0 : (_await$getRegistratio3 = _await$getRegistratio2.pushManager) === null || _await$getRegistratio3 === void 0 ? void 0 : _await$getRegistratio3.getSubscription());\n  return subscription === null || subscription === void 0 ? void 0 : subscription.endpoint;\n}","map":null,"metadata":{},"sourceType":"module"}