{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport { ArrowLeftOutlined, QuestionCircleOutlined } from \"@ant-design/icons\";\nimport { useWindowWidth } from \"@react-hook/window-size\";\nimport { Button, Skeleton, Tooltip } from \"antd\";\nimport Link from \"next/link\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useProfile } from \"../../../hooks/useProfile\";\nimport { useQuestions } from \"../../../hooks/useQuestions\";\nimport { SettingsOptions } from \"../../Settings/SettingsPage\";\nimport EmptyGroupList from \"./QuestionGrouping/EmptyGroupList\";\nimport TAGroupDetail from \"./QuestionGrouping/TAGroupDetail\";\nimport TAQueueDetail from \"./TAQueueDetail\";\nimport TAQueueListSection from \"./TAQueueListSection\"; // The min screen width at which the list and detail become side-by-side\n\nvar SPLIT_DETAIL_BKPT = 900;\nvar Container = styled.div.withConfig({\n  displayName: \"TAQueueListDetail__Container\",\n  componentId: \"sc-1mkewun-0\"\n})([\"flex:1;background:white;border:1px solid #cfd6de;margin-bottom:30px;@media (min-width:\", \"px){border:none;border-left:1px solid #cfd6de;margin-bottom:0px;display:flex;flex-direction:row;min-height:calc( 100vh - 46px - 67px );// - (height of footer) - (height of navbar)}\"], SPLIT_DETAIL_BKPT);\nvar List = styled.div.withConfig({\n  displayName: \"TAQueueListDetail__List\",\n  componentId: \"sc-1mkewun-1\"\n})([\"@media (min-width:\", \"px){width:320px;overflow-y:scroll;}\"], SPLIT_DETAIL_BKPT);\nvar PriorityQueueQuestionBubble = styled(QuestionCircleOutlined).withConfig({\n  displayName: \"TAQueueListDetail__PriorityQueueQuestionBubble\",\n  componentId: \"sc-1mkewun-2\"\n})([\"margin-right:8px;\"]);\nvar Detail = styled.div.withConfig({\n  displayName: \"TAQueueListDetail__Detail\",\n  componentId: \"sc-1mkewun-3\"\n})([\"border-left:1px solid #cfd6de;border-right:1px solid #cfd6de;flex:1;@media (min-width:\", \"px){overflow-y:scroll;}\"], SPLIT_DETAIL_BKPT);\nvar BackToQueue = styled.div.withConfig({\n  displayName: \"TAQueueListDetail__BackToQueue\",\n  componentId: \"sc-1mkewun-4\"\n})([\"height:40px;display:flex;align-items:center;padding-left:12px;color:#1890ff;cursor:pointer;\"]);\n/**\n * List and detail panel of the TA queue\n */\n\nexport default function TAQueueListDetail(_ref) {\n  var _questions$questionsG;\n\n  var queueId = _ref.queueId,\n      courseId = _ref.courseId;\n  var user = useProfile();\n\n  var _useState = useState(null),\n      selectedQuestionId = _useState[0],\n      setSelectedQuestionId = _useState[1];\n\n  var _useQuestions = useQuestions(queueId),\n      questions = _useQuestions.questions;\n\n  var _useState2 = useState(false),\n      isGrouping = _useState2[0],\n      setIsGrouping = _useState2[1];\n\n  var isSideBySide = useWindowWidth() >= SPLIT_DETAIL_BKPT;\n\n  var onSelectQuestion = function onSelectQuestion(qId) {\n    setSelectedQuestionId(qId);\n    setIsGrouping(false);\n  };\n\n  var helpingQuestions = questions === null || questions === void 0 ? void 0 : (_questions$questionsG = questions.questionsGettingHelp) === null || _questions$questionsG === void 0 ? void 0 : _questions$questionsG.filter(function (q) {\n    return q.taHelped.id === user.id;\n  });\n  var myGroup = questions === null || questions === void 0 ? void 0 : questions.groups.find(function (group) {\n    return group.creator.id === user.id;\n  });\n  var groupedQuestions = myGroup ? myGroup.questions : [];\n  var allQuestionsList = questions ? [].concat(_toConsumableArray(helpingQuestions), _toConsumableArray(questions.queue), _toConsumableArray(questions.priorityQueue), _toConsumableArray(questions.groups.flatMap(function (e) {\n    return e.questions;\n  }))) : [];\n  var selectedQuestion = allQuestionsList.find(function (q) {\n    return q.id === selectedQuestionId;\n  }); // set currentQuestion to null if it no longer exists in the queue\n\n  if (selectedQuestionId && !selectedQuestion) {\n    onSelectQuestion(null);\n  } // set current question to first helping question if none is selected (used when help next is clicked)\n\n\n  if (!selectedQuestionId && helpingQuestions.length) {\n    onSelectQuestion(helpingQuestions[0].id);\n  }\n\n  if (!questions) {\n    return __jsx(Skeleton, null);\n  }\n\n  if (allQuestionsList.length === 0) {\n    return __jsx(EmptyQueueInfo, null, __jsx(NoQuestionsText, null, \"There are no questions in the queue\"), !user.phoneNotifsEnabled && !user.desktopNotifsEnabled && __jsx(NotifReminderButton, {\n      courseId: courseId\n    }));\n  }\n\n  var list = __jsx(List, null, __jsx(\"div\", {\n    \"data-cy\": \"list-helping\"\n  }, __jsx(TAQueueListSection, {\n    title: \"Currently Helping\",\n    questions: helpingQuestions,\n    onClickQuestion: onSelectQuestion,\n    selectedQuestionId: selectedQuestionId\n  })), __jsx(\"div\", {\n    \"data-cy\": \"list-group\"\n  }, __jsx(TAQueueListSection, {\n    title: \"Group Students\",\n    questions: groupedQuestions,\n    onClickQuestion: function onClickQuestion() {\n      setIsGrouping(true);\n      setSelectedQuestionId(null);\n    },\n    collapsible: true,\n    emptyDisplay: __jsx(EmptyGroupList, {\n      onClick: function onClick() {\n        setIsGrouping(true);\n        setSelectedQuestionId(null);\n      }\n    })\n  })), __jsx(\"div\", {\n    \"data-cy\": \"list-priority\"\n  }, __jsx(TAQueueListSection, {\n    title: __jsx(\"span\", null, __jsx(Tooltip, {\n      title: \"Students in the priority queue were at the top of the queue before for some reason (e.g. they were at the top but AFK, or a TA helped them previously, and then hit 'requeue student.' You should communicate with your fellow staff members to prioritize these students first.\"\n    }, __jsx(PriorityQueueQuestionBubble, null)), \"Priority Queue\"),\n    questions: questions.priorityQueue,\n    onClickQuestion: onSelectQuestion,\n    selectedQuestionId: selectedQuestionId,\n    collapsible: true\n  })), __jsx(\"div\", {\n    \"data-cy\": \"list-queue\"\n  }, __jsx(TAQueueListSection, {\n    title: \"Waiting In Line\",\n    questions: questions.queue,\n    onClickQuestion: onSelectQuestion,\n    selectedQuestionId: selectedQuestionId,\n    collapsible: true,\n    showNumbers: true\n  })));\n\n  var detail = __jsx(Detail, null, selectedQuestion && __jsx(TAQueueDetail, {\n    courseId: courseId,\n    queueId: queueId,\n    question: selectedQuestion\n  }), isGrouping && __jsx(TAGroupDetail, {\n    courseId: courseId,\n    queueId: queueId,\n    groupCreator: user\n  }));\n\n  if (isSideBySide) {\n    return __jsx(Container, null, list, detail);\n  } else if (selectedQuestionId) {\n    return __jsx(Container, null, __jsx(BackToQueue, {\n      onClick: function onClick() {\n        return onSelectQuestion(null);\n      }\n    }, __jsx(\"span\", null, __jsx(ArrowLeftOutlined, null), \" Back To Queue\")), detail);\n  } else {\n    return __jsx(Container, null, list);\n  }\n}\nvar EmptyQueueInfo = styled.div.withConfig({\n  displayName: \"TAQueueListDetail__EmptyQueueInfo\",\n  componentId: \"sc-1mkewun-5\"\n})([\"flex:1;display:flex;flex-direction:column;align-items:center;margin-top:30px;\"]);\nvar NoQuestionsText = styled.div.withConfig({\n  displayName: \"TAQueueListDetail__NoQuestionsText\",\n  componentId: \"sc-1mkewun-6\"\n})([\"font-weight:500;font-size:24px;color:#212934;\"]);\nvar NotifRemindButton = styled(Button).withConfig({\n  displayName: \"TAQueueListDetail__NotifRemindButton\",\n  componentId: \"sc-1mkewun-7\"\n})([\"margin-top:16px;border-radius:6px;background:#fff;\"]);\n\nfunction NotifReminderButton(_ref2) {\n  var courseId = _ref2.courseId;\n  return __jsx(React.Fragment, null, __jsx(Link, {\n    href: {\n      pathname: \"/settings\",\n      query: {\n        cid: courseId,\n        defaultPage: SettingsOptions.NOTIFICATIONS\n      }\n    }\n  }, __jsx(NotifRemindButton, null, \"Sign Up for Notifications\")));\n}","map":{"version":3,"sources":["/var/www/source/packages/app/components/Queue/TA/TAQueueListDetail.tsx"],"names":["ArrowLeftOutlined","QuestionCircleOutlined","useWindowWidth","Button","Skeleton","Tooltip","Link","React","useState","styled","useProfile","useQuestions","SettingsOptions","EmptyGroupList","TAGroupDetail","TAQueueDetail","TAQueueListSection","SPLIT_DETAIL_BKPT","Container","div","List","PriorityQueueQuestionBubble","Detail","BackToQueue","TAQueueListDetail","queueId","courseId","user","selectedQuestionId","setSelectedQuestionId","questions","isGrouping","setIsGrouping","isSideBySide","onSelectQuestion","qId","helpingQuestions","questionsGettingHelp","filter","q","taHelped","id","myGroup","groups","find","group","creator","groupedQuestions","allQuestionsList","queue","priorityQueue","flatMap","e","selectedQuestion","length","phoneNotifsEnabled","desktopNotifsEnabled","list","detail","EmptyQueueInfo","NoQuestionsText","NotifRemindButton","NotifReminderButton","pathname","query","cid","defaultPage","NOTIFICATIONS"],"mappings":"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","sourcesContent":["import { ArrowLeftOutlined, QuestionCircleOutlined } from \"@ant-design/icons\";\nimport { Question } from \"@koh/common\";\nimport { useWindowWidth } from \"@react-hook/window-size\";\nimport { Button, Skeleton, Tooltip } from \"antd\";\nimport Link from \"next/link\";\nimport React, { ReactElement, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useProfile } from \"../../../hooks/useProfile\";\nimport { useQuestions } from \"../../../hooks/useQuestions\";\nimport { SettingsOptions } from \"../../Settings/SettingsPage\";\nimport EmptyGroupList from \"./QuestionGrouping/EmptyGroupList\";\nimport TAGroupDetail from \"./QuestionGrouping/TAGroupDetail\";\nimport TAQueueDetail from \"./TAQueueDetail\";\nimport TAQueueListSection from \"./TAQueueListSection\";\n\n// The min screen width at which the list and detail become side-by-side\nconst SPLIT_DETAIL_BKPT = 900;\n\nconst Container = styled.div`\n  flex: 1;\n\n  background: white;\n  border: 1px solid #cfd6de;\n  margin-bottom: 30px;\n\n  @media (min-width: ${SPLIT_DETAIL_BKPT}px) {\n    border: none;\n    border-left: 1px solid #cfd6de;\n    margin-bottom: 0px;\n    display: flex;\n    flex-direction: row;\n    min-height: calc(\n      100vh - 46px - 67px\n    ); // - (height of footer) - (height of navbar)\n  }\n`;\n\nconst List = styled.div`\n  @media (min-width: ${SPLIT_DETAIL_BKPT}px) {\n    width: 320px;\n    overflow-y: scroll;\n  }\n`;\n\nconst PriorityQueueQuestionBubble = styled(QuestionCircleOutlined)`\n  margin-right: 8px;\n`;\n\nconst Detail = styled.div`\n  border-left: 1px solid #cfd6de;\n  border-right: 1px solid #cfd6de;\n  flex: 1;\n  @media (min-width: ${SPLIT_DETAIL_BKPT}px) {\n    overflow-y: scroll;\n  }\n`;\n\nconst BackToQueue = styled.div`\n  height: 40px;\n  display: flex;\n  align-items: center;\n  padding-left: 12px;\n  color: #1890ff;\n  cursor: pointer;\n`;\n\n/**\n * List and detail panel of the TA queue\n */\nexport default function TAQueueListDetail({\n  queueId,\n  courseId,\n}: {\n  queueId: number;\n  courseId: number;\n}): ReactElement {\n  const user = useProfile();\n  const [selectedQuestionId, setSelectedQuestionId] = useState<number>(null);\n  const { questions } = useQuestions(queueId);\n  const [isGrouping, setIsGrouping] = useState<boolean>(false);\n  const isSideBySide = useWindowWidth() >= SPLIT_DETAIL_BKPT;\n\n  const onSelectQuestion = (qId: number) => {\n    setSelectedQuestionId(qId);\n    setIsGrouping(false);\n  };\n  const helpingQuestions = questions?.questionsGettingHelp?.filter(\n    (q) => q.taHelped.id === user.id\n  );\n  const myGroup = questions?.groups.find(\n    (group) => group.creator.id === user.id\n  );\n  const groupedQuestions = myGroup ? myGroup.questions : [];\n  const allQuestionsList: Question[] = questions\n    ? [\n        ...helpingQuestions,\n        ...questions.queue,\n        ...questions.priorityQueue,\n        ...questions.groups.flatMap((e) => e.questions),\n      ]\n    : [];\n  const selectedQuestion = allQuestionsList.find(\n    (q) => q.id === selectedQuestionId\n  );\n  // set currentQuestion to null if it no longer exists in the queue\n  if (selectedQuestionId && !selectedQuestion) {\n    onSelectQuestion(null);\n  }\n  // set current question to first helping question if none is selected (used when help next is clicked)\n  if (!selectedQuestionId && helpingQuestions.length) {\n    onSelectQuestion(helpingQuestions[0].id);\n  }\n\n  if (!questions) {\n    return <Skeleton />;\n  }\n\n  if (allQuestionsList.length === 0) {\n    return (\n      <EmptyQueueInfo>\n        <NoQuestionsText>There are no questions in the queue</NoQuestionsText>\n        {!user.phoneNotifsEnabled && !user.desktopNotifsEnabled && (\n          <NotifReminderButton courseId={courseId} />\n        )}\n      </EmptyQueueInfo>\n    );\n  }\n  const list = (\n    <List>\n      <div data-cy=\"list-helping\">\n        <TAQueueListSection\n          title={\"Currently Helping\"}\n          questions={helpingQuestions}\n          onClickQuestion={onSelectQuestion}\n          selectedQuestionId={selectedQuestionId}\n        />\n      </div>\n      <div data-cy=\"list-group\">\n        <TAQueueListSection\n          title=\"Group Students\"\n          questions={groupedQuestions}\n          onClickQuestion={() => {\n            setIsGrouping(true);\n            setSelectedQuestionId(null);\n          }}\n          collapsible\n          emptyDisplay={\n            <EmptyGroupList\n              onClick={() => {\n                setIsGrouping(true);\n                setSelectedQuestionId(null);\n              }}\n            />\n          }\n        />\n      </div>\n      <div data-cy=\"list-priority\">\n        <TAQueueListSection\n          title={\n            <span>\n              <Tooltip title=\"Students in the priority queue were at the top of the queue before for some reason (e.g. they were at the top but AFK, or a TA helped them previously, and then hit 'requeue student.' You should communicate with your fellow staff members to prioritize these students first.\">\n                <PriorityQueueQuestionBubble />\n              </Tooltip>\n              Priority Queue\n            </span>\n          }\n          questions={questions.priorityQueue}\n          onClickQuestion={onSelectQuestion}\n          selectedQuestionId={selectedQuestionId}\n          collapsible\n        />\n      </div>\n      <div data-cy=\"list-queue\">\n        <TAQueueListSection\n          title=\"Waiting In Line\"\n          questions={questions.queue}\n          onClickQuestion={onSelectQuestion}\n          selectedQuestionId={selectedQuestionId}\n          collapsible\n          showNumbers\n        />\n      </div>\n    </List>\n  );\n  const detail = (\n    <Detail>\n      {selectedQuestion && (\n        <TAQueueDetail\n          courseId={courseId}\n          queueId={queueId}\n          question={selectedQuestion}\n        />\n      )}\n      {isGrouping && (\n        <TAGroupDetail\n          courseId={courseId}\n          queueId={queueId}\n          groupCreator={user}\n        />\n      )}\n    </Detail>\n  );\n\n  if (isSideBySide) {\n    return (\n      <Container>\n        {list}\n        {detail}\n      </Container>\n    );\n  } else if (selectedQuestionId) {\n    return (\n      <Container>\n        <BackToQueue onClick={() => onSelectQuestion(null)}>\n          <span>\n            <ArrowLeftOutlined />\n            {\" Back To Queue\"}\n          </span>\n        </BackToQueue>\n        {detail}\n      </Container>\n    );\n  } else {\n    return <Container>{list}</Container>;\n  }\n}\n\nconst EmptyQueueInfo = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 30px;\n`;\n\nconst NoQuestionsText = styled.div`\n  font-weight: 500;\n  font-size: 24px;\n  color: #212934;\n`;\n\nconst NotifRemindButton = styled(Button)`\n  margin-top: 16px;\n  border-radius: 6px;\n  background: #fff;\n`;\n\nfunction NotifReminderButton({ courseId }: { courseId: number }) {\n  return (\n    <>\n      <Link\n        href={{\n          pathname: \"/settings\",\n          query: { cid: courseId, defaultPage: SettingsOptions.NOTIFICATIONS },\n        }}\n      >\n        <NotifRemindButton>Sign Up for Notifications</NotifRemindButton>\n      </Link>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}