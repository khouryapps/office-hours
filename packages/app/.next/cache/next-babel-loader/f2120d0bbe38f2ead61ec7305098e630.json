{"ast":null,"code":"var __jsx = React.createElement;\nimport useSWR from \"swr\";\nimport React from \"react\";\nimport { API } from \"@koh/api-client\";\nimport { Button, message, Modal, Table } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport Router from \"next/router\";\nimport { useCourse } from \"../../hooks/useCourse\";\nconst {\n  confirm\n} = Modal;\nexport default function CoursePreferenceSettings() {\n  const {\n    data: profile,\n    mutate\n  } = useSWR(`api/v1/profile`, async () => API.profile.index());\n  const formattedRoles = {\n    student: \"Student\",\n    ta: \"TA\",\n    professor: \"Professor\"\n  };\n\n  async function withdraw(course) {\n    await API.course.withdrawCourse(course.course.id);\n    message.success(\"Successfully withdrew from \" + course.course.name);\n    await mutate();\n    await Router.push(\"/\");\n  }\n\n  function showConfirm(courseId) {\n    const course = profile === null || profile === void 0 ? void 0 : profile.courses.find(c => c.course.id === courseId);\n    confirm({\n      title: `Please Confirm!`,\n      icon: __jsx(ExclamationCircleOutlined, null),\n      content: `Please confirm that you want to unenroll from ${course.course.name} as a ${formattedRoles[course.role]}.  The only way to get back is by contacting a professor!`,\n\n      onOk() {\n        withdraw(course);\n      }\n\n    });\n  }\n\n  const InstructorCell = ({\n    courseId\n  }) => {\n    var _course$course;\n\n    const course = useCourse(courseId);\n    return __jsx(React.Fragment, null, (_course$course = course.course) === null || _course$course === void 0 ? void 0 : _course$course.coordinator_email);\n  };\n\n  const columns = [{\n    title: \"Course name\",\n    dataIndex: \"name\",\n    key: \"name\"\n  }, {\n    title: \"Role\",\n    dataIndex: \"role\",\n    key: \"role\"\n  }, {\n    title: \"Instructor\",\n    dataIndex: \"instructor\",\n    key: \"instructor\",\n    render: function createInstructorCell(courseId) {\n      return __jsx(InstructorCell, {\n        courseId: courseId\n      });\n    }\n  }, {\n    title: \"\",\n    key: \"courseId\",\n    dataIndex: \"courseId\",\n    render: function withdrawButton(courseId) {\n      return __jsx(Button, {\n        style: {\n          marginLeft: \"20px\"\n        },\n        type: \"primary\",\n        shape: \"round\",\n        onClick: () => {\n          showConfirm(courseId);\n        },\n        danger: true\n      }, \"Withdraw\");\n    }\n  }];\n\n  function createCourseDataSource() {\n    return profile === null || profile === void 0 ? void 0 : profile.courses.map(c => ({\n      key: c.course.id,\n      name: c.course.name,\n      role: formattedRoles[c.role],\n      instructor: c.course.id,\n      courseId: c.course.id\n    }));\n  }\n\n  return profile && __jsx(\"div\", {\n    style: {\n      paddingTop: \"50px\"\n    }\n  }, __jsx(\"h1\", null, \"Course Preferences\"), __jsx(Table, {\n    columns: columns,\n    dataSource: createCourseDataSource()\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}