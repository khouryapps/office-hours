{"ast":null,"code":"var __jsx = React.createElement;\nimport { API } from \"@koh/api-client\";\nimport { AlertType } from \"@koh/common\";\nimport React from \"react\";\nimport useSWR from \"swr\";\nimport { useRouter } from \"next/router\";\nimport StudentQuestionRephraseModal from \"../Queue/Student/StudentQuestionRephraseModal\";\nexport default function AlertsContainer({\n  courseId\n}) {\n  const router = useRouter();\n  const {\n    data,\n    mutate: mutateAlerts\n  } = useSWR(\"/api/v1/alerts\", async () => API.alerts.get(courseId));\n  const alerts = data === null || data === void 0 ? void 0 : data.alerts;\n\n  const handleClose = async (alertId, courseId, queueId) => {\n    await API.alerts.close(alertId);\n    mutateAlerts();\n    router.push(`/course/${courseId}/queue/${queueId}?edit_question=true`);\n  };\n\n  const alertDivs = alerts === null || alerts === void 0 ? void 0 : alerts.map(alert => {\n    switch (alert.alertType) {\n      case AlertType.REPHRASE_QUESTION:\n        return __jsx(StudentQuestionRephraseModal, {\n          payload: alert.payload,\n          handleClose: async (courseId, queueId) => await handleClose(alert.id, courseId, queueId)\n        });\n    }\n  }); // probably want some better way of handling multiple alerts\n\n  return __jsx(\"div\", null, alertDivs);\n}","map":null,"metadata":{},"sourceType":"module"}