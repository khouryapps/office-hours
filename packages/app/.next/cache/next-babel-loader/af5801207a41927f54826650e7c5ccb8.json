{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Modal from \"antd/lib/modal/Modal\";\nimport { Switch, Input, Form } from \"antd\";\nimport styled from \"styled-components\";\nimport { API } from \"@koh/api-client\";\nimport { useQueue } from \"../../../hooks/useQueue\";\nimport { pick } from \"lodash\";\nconst NotesInput = styled(Input.TextArea).withConfig({\n  displayName: \"EditQueueModal__NotesInput\",\n  componentId: \"c8x0cn-0\"\n})([\"border-radius:6px;border:1px solid #b8c4ce;\"]);\nexport function EditQueueModal({\n  queueId,\n  visible,\n  onClose\n}) {\n  const {\n    queue,\n    mutateQueue\n  } = useQueue(queueId);\n  const [form] = Form.useForm();\n\n  const editQueue = async updateQueue => {\n    const newQueue = _objectSpread(_objectSpread({}, queue), updateQueue);\n\n    mutateQueue(newQueue, false);\n    await API.queues.update(newQueue.id, pick(newQueue, [\"notes\", \"allowQuestions\"]));\n    mutateQueue();\n  };\n\n  return __jsx(Modal, {\n    title: \"Edit Queue Details\",\n    visible: visible,\n    onCancel: onClose,\n    onOk: async () => {\n      const value = await form.validateFields();\n      await editQueue(value);\n      onClose();\n    }\n  }, queue && __jsx(Form, {\n    form: form,\n    initialValues: queue\n  }, __jsx(Form.Item, {\n    label: \"Queue Notes\",\n    name: \"notes\"\n  }, __jsx(NotesInput, {\n    allowClear: true,\n    placeholder: \"\"\n  })), __jsx(Form.Item, {\n    label: \"Allow New Questions\",\n    name: \"allowQuestions\",\n    valuePropName: \"checked\"\n  }, __jsx(Switch, {\n    \"data-cy\": \"allow-questions-toggle\"\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}