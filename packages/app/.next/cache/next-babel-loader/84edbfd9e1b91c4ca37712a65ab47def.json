{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { API } from \"@koh/api-client\";\nimport useSWR from \"swr\";\nimport { Tooltip, Card, Space, Drawer, Button, DatePicker, Divider, Row, Spin } from \"antd\";\nimport { InfoCircleOutlined, QuestionCircleOutlined } from \"@ant-design/icons\";\nimport { useProfile } from \"../../../hooks/useProfile\";\nimport { useRouter } from \"next/router\";\nimport { StandardPageContainer } from \"../../../components/common/PageContainer\";\nimport { InsightComponent } from \"@koh/common\";\nimport NavBar from \"../../../components/Nav/NavBar\";\nimport BarChartComponent from \"../../../components/Insights/components/BarChartComponent\";\nimport SimpleDisplayComponent from \"../../../components/Insights/components/SimpleDisplayComponent\";\nimport InsightsDisplayOptions from \"../../../components/Insights/components/InsightsDisplayOptions\";\nimport { SimpleTable } from \"../../../components/Insights/components/SimpleTable\";\nimport styled from \"styled-components\";\nvar InsightsRowContainer = styled.div.withConfig({\n  displayName: \"insights__InsightsRowContainer\",\n  componentId: \"sc-13ej1wk-0\"\n})([\"display:flex;direction:ltr;margin-left:-0.5%;margin-right:-0.5%;\"]);\nexport default function Insights() {\n  var profile = useProfile();\n  var router = useRouter();\n  var cid = router.query.cid;\n\n  var _useState = useState({\n    start: \"\",\n    end: \"\"\n  }),\n      dateRange = _useState[0],\n      setDateRange = _useState[1];\n\n  var _useSWR = useSWR(\"api/v1/insights/listAll\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", API.insights.list());\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }))),\n      allInsights = _useSWR.data;\n\n  var _useState2 = useState(false),\n      settingsVisible = _useState2[0],\n      setSettingsVisible = _useState2[1];\n\n  if (!allInsights || !(profile === null || profile === void 0 ? void 0 : profile.insights)) {\n    return null;\n  } // Group users insights by size (small | default) so they can be rendered correctly\n\n\n  var _profile$insights$red = profile.insights.reduce(function (_ref2, insight) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        smallInsights = _ref3[0],\n        defaultInsights = _ref3[1];\n\n    return allInsights[insight].size === \"small\" ? [[].concat(_toConsumableArray(smallInsights), [insight]), defaultInsights] : [smallInsights, [].concat(_toConsumableArray(defaultInsights), [insight])];\n  }, [[], []]),\n      _profile$insights$red2 = _slicedToArray(_profile$insights$red, 2),\n      smallInsights = _profile$insights$red2[0],\n      defaultInsights = _profile$insights$red2[1];\n\n  var RangePicker = DatePicker.RangePicker;\n  return __jsx(React.Fragment, null, __jsx(StandardPageContainer, null, __jsx(NavBar, {\n    courseId: Number(cid)\n  }), __jsx(Row, {\n    align: \"middle\",\n    justify: \"space-between\",\n    style: {\n      margin: \"12px 0px\"\n    }\n  }, __jsx(\"h1\", {\n    style: {\n      display: \"inline\",\n      margin: \"0px\"\n    }\n  }, \"Insights Dashboard\"), __jsx(Row, null, __jsx(\"div\", {\n    style: {\n      maxWidth: \"200 px\"\n    }\n  }, __jsx(Tooltip, {\n    title: \"If no date range is selected results are from the data for the full semester so far\"\n  }, __jsx(QuestionCircleOutlined, null)), __jsx(\"b\", {\n    style: {\n      display: \"inline-block\",\n      marginRight: \"12px\",\n      marginLeft: \"8px\"\n    }\n  }, \"Date Range\"), __jsx(RangePicker, {\n    onChange: function onChange(_, dateString) {\n      return setDateRange({\n        start: dateString[0],\n        end: dateString[1]\n      });\n    }\n  })), __jsx(Button, {\n    style: {\n      marginLeft: \"24px\"\n    },\n    onClick: function onClick() {\n      return setSettingsVisible(true);\n    }\n  }, \"Edit Insights\"))), __jsx(Divider, {\n    style: {\n      margin: \"0 0 16px 0\"\n    }\n  }), __jsx(Drawer, {\n    title: \"Display Options\",\n    placement: \"left\",\n    closable: true,\n    destroyOnClose: true,\n    onClose: function onClose() {\n      return setSettingsVisible(false);\n    },\n    visible: settingsVisible,\n    width: 400\n  }, __jsx(InsightsDisplayOptions, null)), __jsx(InsightsRowContainer, null, smallInsights === null || smallInsights === void 0 ? void 0 : smallInsights.map(function (insightName) {\n    return __jsx(RenderInsight, {\n      key: insightName,\n      insightName: insightName,\n      insightDisplay: allInsights[insightName],\n      dateRange: dateRange\n    });\n  })), __jsx(InsightsRowContainer, null, defaultInsights === null || defaultInsights === void 0 ? void 0 : defaultInsights.map(function (insightName) {\n    return __jsx(RenderInsight, {\n      key: insightName,\n      insightName: insightName,\n      insightDisplay: allInsights[insightName],\n      dateRange: dateRange\n    });\n  }))));\n}\n\nfunction RenderInsight(_ref4) {\n  var insightName = _ref4.insightName,\n      insightDisplay = _ref4.insightDisplay,\n      dateRange = _ref4.dateRange;\n  var router = useRouter();\n  var cid = router.query.cid;\n\n  var _useSWR2 = useSWR(cid && \"api/v1/insights/\".concat(cid, \"/\").concat(insightName, \"?start=\").concat(dateRange.start, \"&end=\").concat(dateRange.end), /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return API.insights.get(Number(cid), insightName, {\n              start: dateRange.start,\n              end: dateRange.end\n            });\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }))),\n      insightOutput = _useSWR2.data;\n\n  var DataComponent;\n\n  switch (insightDisplay.component) {\n    case InsightComponent.SimpleDisplay:\n      DataComponent = SimpleDisplayComponent;\n      break;\n\n    case InsightComponent.BarChart:\n      DataComponent = BarChartComponent;\n      break;\n\n    case InsightComponent.SimpleTable:\n      DataComponent = SimpleTable;\n      break;\n\n    default:\n      // Line below will show error if switch is not exhaustive of all enum values\n      componentDoesNotExist(insightDisplay.component);\n  }\n\n  return __jsx(Card, {\n    size: insightDisplay.size,\n    title: insightDisplay.displayName,\n    style: {\n      margin: \"0.5%\",\n      padding: \"2px\",\n      width: insightDisplay.size === \"default\" ? \"50%\" : \"16.66%\",\n      maxWidth: insightDisplay.size === \"default\" ? \"625px\" : \"200px\"\n    },\n    bodyStyle: {\n      position: \"relative\"\n    },\n    extra: __jsx(Space, null, __jsx(Tooltip, {\n      title: insightDisplay.description\n    }, __jsx(InfoCircleOutlined, null)))\n  }, insightOutput === undefined ? __jsx(Spin, {\n    style: {\n      margin: \"10% 45%\"\n    }\n  }) : __jsx(DataComponent, {\n    key: insightName,\n    output: insightOutput\n  }));\n}\n\nfunction componentDoesNotExist(componentName) {\n  throw new Error(\"Component \".concat(componentName, \" was unable to be rendered\"));\n}","map":{"version":3,"sources":["/var/www/source/packages/app/pages/course/[cid]/insights.tsx"],"names":["React","useState","API","useSWR","Tooltip","Card","Space","Drawer","Button","DatePicker","Divider","Row","Spin","InfoCircleOutlined","QuestionCircleOutlined","useProfile","useRouter","StandardPageContainer","InsightComponent","NavBar","BarChartComponent","SimpleDisplayComponent","InsightsDisplayOptions","SimpleTable","styled","InsightsRowContainer","div","Insights","profile","router","cid","query","start","end","dateRange","setDateRange","insights","list","allInsights","data","settingsVisible","setSettingsVisible","reduce","insight","smallInsights","defaultInsights","size","RangePicker","Number","margin","display","maxWidth","marginRight","marginLeft","_","dateString","map","insightName","RenderInsight","insightDisplay","get","insightOutput","DataComponent","component","SimpleDisplay","BarChart","componentDoesNotExist","displayName","padding","width","position","description","undefined","componentName","Error"],"mappings":"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","sourcesContent":["import React, { ReactElement, useState } from \"react\";\nimport { API } from \"@koh/api-client\";\nimport useSWR from \"swr\";\nimport {\n  Tooltip,\n  Card,\n  Space,\n  Drawer,\n  Button,\n  DatePicker,\n  Divider,\n  Row,\n  Spin,\n} from \"antd\";\nimport { CardSize } from \"antd/lib/card\";\nimport { InfoCircleOutlined, QuestionCircleOutlined } from \"@ant-design/icons\";\nimport { useProfile } from \"../../../hooks/useProfile\";\nimport { useRouter } from \"next/router\";\nimport { StandardPageContainer } from \"../../../components/common/PageContainer\";\nimport {\n  DateRangeType,\n  InsightComponent,\n  InsightDisplayInfo,\n} from \"@koh/common\";\nimport NavBar from \"../../../components/Nav/NavBar\";\nimport BarChartComponent from \"../../../components/Insights/components/BarChartComponent\";\nimport SimpleDisplayComponent from \"../../../components/Insights/components/SimpleDisplayComponent\";\nimport InsightsDisplayOptions from \"../../../components/Insights/components/InsightsDisplayOptions\";\nimport { SimpleTable } from \"../../../components/Insights/components/SimpleTable\";\nimport styled from \"styled-components\";\n\nconst InsightsRowContainer = styled.div`\n  display: flex;\n  direction: ltr;\n  margin-left: -0.5%;\n  margin-right: -0.5%;\n`;\n\nexport default function Insights(): ReactElement {\n  const profile = useProfile();\n  const router = useRouter();\n  const { cid } = router.query;\n\n  const [dateRange, setDateRange] = useState({ start: \"\", end: \"\" });\n\n  const { data: allInsights } = useSWR(`api/v1/insights/listAll`, async () =>\n    API.insights.list()\n  );\n  const [settingsVisible, setSettingsVisible] = useState(false);\n\n  if (!allInsights || !profile?.insights) {\n    return null;\n  }\n  // Group users insights by size (small | default) so they can be rendered correctly\n  const [smallInsights, defaultInsights] = profile.insights.reduce(\n    ([smallInsights, defaultInsights], insight) =>\n      allInsights[insight].size === \"small\"\n        ? [[...smallInsights, insight], defaultInsights]\n        : [smallInsights, [...defaultInsights, insight]],\n    [[], []]\n  );\n\n  const { RangePicker } = DatePicker;\n\n  return (\n    <>\n      <StandardPageContainer>\n        <NavBar courseId={Number(cid)} />\n        <Row\n          align={\"middle\"}\n          justify={\"space-between\"}\n          style={{ margin: \"12px 0px\" }}\n        >\n          <h1 style={{ display: \"inline\", margin: \"0px\" }}>\n            Insights Dashboard\n          </h1>\n          <Row>\n            <div style={{ maxWidth: \"200 px\" }}>\n              <Tooltip\n                title={\n                  \"If no date range is selected results are from the data for the full semester so far\"\n                }\n              >\n                <QuestionCircleOutlined />\n              </Tooltip>\n              <b\n                style={{\n                  display: \"inline-block\",\n                  marginRight: \"12px\",\n                  marginLeft: \"8px\",\n                }}\n              >\n                Date Range\n              </b>\n              <RangePicker\n                onChange={(_, dateString) =>\n                  setDateRange({ start: dateString[0], end: dateString[1] })\n                }\n              />\n            </div>\n            <Button\n              style={{ marginLeft: \"24px\" }}\n              onClick={() => setSettingsVisible(true)}\n            >\n              Edit Insights\n            </Button>\n          </Row>\n        </Row>\n        <Divider style={{ margin: \"0 0 16px 0\" }} />\n        <Drawer\n          title=\"Display Options\"\n          placement=\"left\"\n          closable={true}\n          destroyOnClose={true}\n          onClose={() => setSettingsVisible(false)}\n          visible={settingsVisible}\n          width={400}\n        >\n          <InsightsDisplayOptions />\n        </Drawer>\n        <InsightsRowContainer>\n          {smallInsights?.map((insightName: string) => {\n            return (\n              <RenderInsight\n                key={insightName}\n                insightName={insightName}\n                insightDisplay={allInsights[insightName]}\n                dateRange={dateRange}\n              />\n            );\n          })}\n        </InsightsRowContainer>\n        <InsightsRowContainer>\n          {defaultInsights?.map((insightName: string) => {\n            return (\n              <RenderInsight\n                key={insightName}\n                insightName={insightName}\n                insightDisplay={allInsights[insightName]}\n                dateRange={dateRange}\n              />\n            );\n          })}\n        </InsightsRowContainer>\n      </StandardPageContainer>\n    </>\n  );\n}\n\ninterface RenderInsightProps {\n  insightName: string;\n  insightDisplay: InsightDisplayInfo;\n  dateRange: DateRangeType;\n}\n\nfunction RenderInsight({\n  insightName,\n  insightDisplay,\n  dateRange,\n}: RenderInsightProps): ReactElement {\n  const router = useRouter();\n  const { cid } = router.query;\n\n  const { data: insightOutput } = useSWR(\n    cid &&\n      `api/v1/insights/${cid}/${insightName}?start=${dateRange.start}&end=${dateRange.end}`,\n    async () =>\n      await API.insights.get(Number(cid), insightName, {\n        start: dateRange.start,\n        end: dateRange.end,\n      })\n  );\n\n  let DataComponent;\n  switch (insightDisplay.component) {\n    case InsightComponent.SimpleDisplay:\n      DataComponent = SimpleDisplayComponent;\n      break;\n    case InsightComponent.BarChart:\n      DataComponent = BarChartComponent;\n      break;\n    case InsightComponent.SimpleTable:\n      DataComponent = SimpleTable;\n      break;\n    default:\n      // Line below will show error if switch is not exhaustive of all enum values\n      componentDoesNotExist(insightDisplay.component);\n  }\n\n  return (\n    <Card\n      size={insightDisplay.size as CardSize}\n      title={insightDisplay.displayName}\n      style={{\n        margin: \"0.5%\",\n        padding: \"2px\",\n        width: insightDisplay.size === \"default\" ? \"50%\" : \"16.66%\",\n        maxWidth: insightDisplay.size === \"default\" ? \"625px\" : \"200px\",\n      }}\n      bodyStyle={{ position: \"relative\" }}\n      extra={\n        <Space>\n          <Tooltip title={insightDisplay.description}>\n            <InfoCircleOutlined />\n          </Tooltip>\n        </Space>\n      }\n    >\n      {insightOutput === undefined ? (\n        <Spin style={{ margin: \"10% 45%\" }} />\n      ) : (\n        <DataComponent key={insightName} output={insightOutput} />\n      )}\n    </Card>\n  );\n}\n\nfunction componentDoesNotExist(componentName: never): never {\n  throw new Error(`Component ${componentName} was unable to be rendered`);\n}\n"]},"metadata":{},"sourceType":"module"}