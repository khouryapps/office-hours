{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useQuestions } from \"../../../../hooks/useQuestions\";\nimport AllQuestionsCheckList from \"./AllQuestionsChecklist\";\nimport { CurrentGroupList } from \"./CurrentGroupList\";\nexport default function TAGroupDetail(_ref) {\n  var groupCreator = _ref.groupCreator,\n      queueId = _ref.queueId,\n      courseId = _ref.courseId;\n\n  var _useQuestions = useQuestions(queueId),\n      questions = _useQuestions.questions,\n      mutateQuestions = _useQuestions.mutateQuestions;\n\n  var allQuestions = [].concat(_toConsumableArray(questions.queue), _toConsumableArray(questions.priorityQueue));\n  var myGroup = questions === null || questions === void 0 ? void 0 : questions.groups.find(function (group) {\n    return group.creator.id === groupCreator.id;\n  });\n  var groupedQuestions = myGroup ? myGroup.questions : [];\n  var groupableQuestions = allQuestions.filter(function (q) {\n    return q.groupable;\n  });\n  return groupedQuestions.length ? __jsx(CurrentGroupList, {\n    courseId: courseId,\n    group: myGroup,\n    queueId: queueId\n  }) : __jsx(AllQuestionsCheckList, {\n    allQuestions: groupableQuestions,\n    hasMissingQuestions: groupableQuestions.length != allQuestions.length,\n    groupCreator: groupCreator,\n    queueId: queueId,\n    onStartCall: function onStartCall() {\n      mutateQuestions();\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/source/packages/app/components/Queue/TA/QuestionGrouping/TAGroupDetail.tsx"],"names":["React","useQuestions","AllQuestionsCheckList","CurrentGroupList","TAGroupDetail","groupCreator","queueId","courseId","questions","mutateQuestions","allQuestions","queue","priorityQueue","myGroup","groups","find","group","creator","id","groupedQuestions","groupableQuestions","filter","q","groupable","length"],"mappings":";;AACA,OAAOA,KAAP,MAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,gCAA7B;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,eAAe,SAASC,aAAT,OAQE;AAAA,MAPfC,YAOe,QAPfA,YAOe;AAAA,MANfC,OAMe,QANfA,OAMe;AAAA,MALfC,QAKe,QALfA,QAKe;;AAAA,sBACwBN,YAAY,CAACK,OAAD,CADpC;AAAA,MACPE,SADO,iBACPA,SADO;AAAA,MACIC,eADJ,iBACIA,eADJ;;AAEf,MAAMC,YAAY,gCAAOF,SAAS,CAACG,KAAjB,sBAA2BH,SAAS,CAACI,aAArC,EAAlB;AACA,MAAMC,OAAO,GAAGL,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEM,MAAX,CAAkBC,IAAlB,CACd,UAACC,KAAD;AAAA,WAAWA,KAAK,CAACC,OAAN,CAAcC,EAAd,KAAqBb,YAAY,CAACa,EAA7C;AAAA,GADc,CAAhB;AAGA,MAAMC,gBAAgB,GAAGN,OAAO,GAAGA,OAAO,CAACL,SAAX,GAAuB,EAAvD;AACA,MAAMY,kBAAkB,GAAGV,YAAY,CAACW,MAAb,CAAoB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,SAAT;AAAA,GAApB,CAA3B;AAEA,SAAOJ,gBAAgB,CAACK,MAAjB,GACL,MAAC,gBAAD;AAAkB,IAAA,QAAQ,EAAEjB,QAA5B;AAAsC,IAAA,KAAK,EAAEM,OAA7C;AAAsD,IAAA,OAAO,EAAEP;AAA/D,IADK,GAGL,MAAC,qBAAD;AACE,IAAA,YAAY,EAAEc,kBADhB;AAEE,IAAA,mBAAmB,EAAEA,kBAAkB,CAACI,MAAnB,IAA6Bd,YAAY,CAACc,MAFjE;AAGE,IAAA,YAAY,EAAEnB,YAHhB;AAIE,IAAA,OAAO,EAAEC,OAJX;AAKE,IAAA,WAAW,EAAE,uBAAM;AACjBG,MAAAA,eAAe;AAChB;AAPH,IAHF;AAaD","sourcesContent":["import { User } from \"@koh/common\";\nimport React, { ReactElement } from \"react\";\nimport { useQuestions } from \"../../../../hooks/useQuestions\";\nimport AllQuestionsCheckList from \"./AllQuestionsChecklist\";\nimport { CurrentGroupList } from \"./CurrentGroupList\";\n\nexport default function TAGroupDetail({\n  groupCreator,\n  queueId,\n  courseId,\n}: {\n  groupCreator: User;\n  queueId: number;\n  courseId: number;\n}): ReactElement {\n  const { questions, mutateQuestions } = useQuestions(queueId);\n  const allQuestions = [...questions.queue, ...questions.priorityQueue];\n  const myGroup = questions?.groups.find(\n    (group) => group.creator.id === groupCreator.id\n  );\n  const groupedQuestions = myGroup ? myGroup.questions : [];\n  const groupableQuestions = allQuestions.filter((q) => q.groupable);\n\n  return groupedQuestions.length ? (\n    <CurrentGroupList courseId={courseId} group={myGroup} queueId={queueId} />\n  ) : (\n    <AllQuestionsCheckList\n      allQuestions={groupableQuestions}\n      hasMissingQuestions={groupableQuestions.length != allQuestions.length}\n      groupCreator={groupCreator}\n      queueId={queueId}\n      onStartCall={() => {\n        mutateQuestions();\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}