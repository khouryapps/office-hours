{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport { API } from \"@koh/api-client\";\nimport { ERROR_MESSAGES, OpenQuestionStatus } from \"@koh/common\";\nimport { notification } from \"antd\";\nimport { QuestionStatusKeys, Role } from \"@koh/common\";\nimport { Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useCourse } from \"../../../hooks/useCourse\";\nimport { useProfile } from \"../../../hooks/useProfile\";\nimport { useQuestions } from \"../../../hooks/useQuestions\";\nimport { useQueue } from \"../../../hooks/useQueue\";\nimport { useRoleInCourse } from \"../../../hooks/useRoleInCourse\";\nimport { useTAInQueueInfo } from \"../../../hooks/useTAInQueueInfo\";\nimport TACheckinButton from \"../../Today/TACheckinButton\";\nimport { QueueInfoColumn, QueueInfoColumnButton } from \"../QueueListSharedComponents\";\nimport { EditQueueModal } from \"./EditQueueModal\";\nimport TAQueueListDetail from \"./TAQueueListDetail\";\n/**\n * Method to help student and\n * pop open notification if another TA helped at same time (race condition)\n */\n\nfunction onHelpQuestion(_x) {\n  return _onHelpQuestion.apply(this, arguments);\n}\n\nfunction _onHelpQuestion() {\n  _onHelpQuestion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(questionId) {\n    var _e$response, _e$response2, _e$response2$data;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return API.questions.update(questionId, {\n              status: OpenQuestionStatus.Helping\n            });\n\n          case 3:\n            _context2.next = 8;\n            break;\n\n          case 5:\n            _context2.prev = 5;\n            _context2.t0 = _context2[\"catch\"](0);\n\n            if (((_e$response = _context2.t0.response) === null || _e$response === void 0 ? void 0 : _e$response.status) === 401 && ((_e$response2 = _context2.t0.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.message) === ERROR_MESSAGES.questionController.updateQuestion.otherTAHelping) {\n              notification.open({\n                message: \"Another TA is currently helping the student\",\n                description: \"This happens when another TA clicks help at the exact same time\",\n                type: \"error\",\n                duration: 3,\n                className: \"hide-in-percy\",\n                style: {\n                  width: 450\n                }\n              });\n            }\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 5]]);\n  }));\n  return _onHelpQuestion.apply(this, arguments);\n}\n\nvar Container = styled.div.withConfig({\n  displayName: \"TAQueue__Container\",\n  componentId: \"sc-173p98z-0\"\n})([\"flex:1;display:flex;flex-direction:column;@media (min-width:650px){flex-direction:row;}\"]);\nvar HelpNextButton = styled(QueueInfoColumnButton).withConfig({\n  displayName: \"TAQueue__HelpNextButton\",\n  componentId: \"sc-173p98z-1\"\n})([\"color:white;background:#2a9187;&:hover,&:focus{color:white;background:#39aca1;}\"]);\nvar EditQueueButton = styled(QueueInfoColumnButton).withConfig({\n  displayName: \"TAQueue__EditQueueButton\",\n  componentId: \"sc-173p98z-2\"\n})([\"color:#212934;\"]);\nvar MiddleSpacer = styled.div.withConfig({\n  displayName: \"TAQueue__MiddleSpacer\",\n  componentId: \"sc-173p98z-3\"\n})([\"margin-left:20px;\"]);\nexport default function TAQueue(_ref) {\n  var _questions$queue;\n\n  var qid = _ref.qid,\n      courseId = _ref.courseId;\n  var user = useProfile();\n  var role = useRoleInCourse(courseId);\n\n  var _useQueue = useQueue(qid),\n      queue = _useQueue.queue;\n\n  var _useQuestions = useQuestions(qid),\n      questions = _useQuestions.questions,\n      mutateQuestions = _useQuestions.mutateQuestions;\n\n  var _useTAInQueueInfo = useTAInQueueInfo(qid),\n      isCheckedIn = _useTAInQueueInfo.isCheckedIn,\n      isHelping = _useTAInQueueInfo.isHelping;\n\n  var _useState = useState(false),\n      queueSettingsModal = _useState[0],\n      setQueueSettingsModal = _useState[1];\n\n  var _useCourse = useCourse(courseId),\n      course = _useCourse.course;\n\n  var staffCheckedIntoAnotherQueue = course === null || course === void 0 ? void 0 : course.queues.some(function (q) {\n    return q.id !== qid && q.staffList.some(function (staffMember) {\n      return staffMember.id === (user === null || user === void 0 ? void 0 : user.id);\n    });\n  });\n  var nextQuestion = (questions === null || questions === void 0 ? void 0 : questions.priorityQueue[0]) || ( // gets the first item of priority queue if it exists\n  questions === null || questions === void 0 ? void 0 : (_questions$queue = questions.queue) === null || _questions$queue === void 0 ? void 0 : _questions$queue.find(function (question) {\n    return question.status === QuestionStatusKeys.Queued;\n  }));\n\n  var helpNext = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var defaultMessage;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return onHelpQuestion(nextQuestion.id);\n\n            case 2:\n              mutateQuestions();\n              defaultMessage = user.includeDefaultMessage ? user.defaultMessage : \"\";\n              window.open(\"https://teams.microsoft.com/l/chat/0/0?users=\".concat(nextQuestion.creator.email, \"&message=\").concat(defaultMessage));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function helpNext() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // TODO: figure out tooltips\n\n\n  if (queue) {\n    return __jsx(React.Fragment, null, __jsx(Container, null, __jsx(QueueInfoColumn, {\n      queueId: qid,\n      buttons: __jsx(React.Fragment, null, __jsx(EditQueueButton, {\n        \"data-cy\": \"editQueue\",\n        onClick: function onClick() {\n          return setQueueSettingsModal(true);\n        }\n      }, \"Edit Queue Details\"), __jsx(Tooltip, {\n        title: !isCheckedIn && \"You must check in to help students!\"\n      }, __jsx(HelpNextButton, {\n        onClick: helpNext,\n        disabled: !isCheckedIn || !nextQuestion || isHelping,\n        \"data-cy\": \"help-next\"\n      }, \"Help Next\")), __jsx(\"div\", {\n        style: {\n          marginBottom: \"12px\"\n        }\n      }, __jsx(TACheckinButton, {\n        courseId: courseId,\n        room: queue === null || queue === void 0 ? void 0 : queue.room,\n        disabled: staffCheckedIntoAnotherQueue || isHelping || queue.isProfessorQueue && role !== Role.PROFESSOR,\n        state: isCheckedIn ? \"CheckedIn\" : \"CheckedOut\",\n        block: true\n      })))\n    }), __jsx(MiddleSpacer, null), user && questions && __jsx(TAQueueListDetail, {\n      queueId: qid,\n      courseId: courseId\n    })), __jsx(EditQueueModal, {\n      queueId: qid,\n      visible: queueSettingsModal,\n      onClose: function onClose() {\n        return setQueueSettingsModal(false);\n      }\n    }));\n  } else {\n    return __jsx(\"div\", null);\n  }\n}","map":{"version":3,"sources":["/home/runner/work/office-hours/office-hours/packages/app/components/Queue/TA/TAQueue.tsx"],"names":["API","ERROR_MESSAGES","OpenQuestionStatus","notification","QuestionStatusKeys","Role","Tooltip","React","useState","styled","useCourse","useProfile","useQuestions","useQueue","useRoleInCourse","useTAInQueueInfo","TACheckinButton","QueueInfoColumn","QueueInfoColumnButton","EditQueueModal","TAQueueListDetail","onHelpQuestion","questionId","questions","update","status","Helping","response","data","message","questionController","updateQuestion","otherTAHelping","open","description","type","duration","className","style","width","Container","div","HelpNextButton","EditQueueButton","MiddleSpacer","TAQueue","qid","courseId","user","role","queue","mutateQuestions","isCheckedIn","isHelping","queueSettingsModal","setQueueSettingsModal","course","staffCheckedIntoAnotherQueue","queues","some","q","id","staffList","staffMember","nextQuestion","priorityQueue","find","question","Queued","helpNext","defaultMessage","includeDefaultMessage","window","creator","email","marginBottom","room","isProfessorQueue","PROFESSOR"],"mappings":"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","sourcesContent":["import { API } from \"@koh/api-client\";\nimport { ERROR_MESSAGES, OpenQuestionStatus } from \"@koh/common\";\nimport { notification } from \"antd\";\nimport { QuestionStatusKeys, Role } from \"@koh/common\";\nimport { Tooltip } from \"antd\";\nimport React, { ReactElement, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useCourse } from \"../../../hooks/useCourse\";\nimport { useProfile } from \"../../../hooks/useProfile\";\nimport { useQuestions } from \"../../../hooks/useQuestions\";\nimport { useQueue } from \"../../../hooks/useQueue\";\nimport { useRoleInCourse } from \"../../../hooks/useRoleInCourse\";\nimport { useTAInQueueInfo } from \"../../../hooks/useTAInQueueInfo\";\nimport TACheckinButton from \"../../Today/TACheckinButton\";\nimport {\n  QueueInfoColumn,\n  QueueInfoColumnButton,\n} from \"../QueueListSharedComponents\";\nimport { EditQueueModal } from \"./EditQueueModal\";\nimport TAQueueListDetail from \"./TAQueueListDetail\";\n\n/**\n * Method to help student and\n * pop open notification if another TA helped at same time (race condition)\n */\nasync function onHelpQuestion(questionId: number): Promise<void> {\n  try {\n    await API.questions.update(questionId, {\n      status: OpenQuestionStatus.Helping,\n    });\n  } catch (e) {\n    if (\n      e.response?.status === 401 &&\n      e.response?.data?.message ===\n        ERROR_MESSAGES.questionController.updateQuestion.otherTAHelping\n    ) {\n      notification.open({\n        message: \"Another TA is currently helping the student\",\n        description:\n          \"This happens when another TA clicks help at the exact same time\",\n        type: \"error\",\n        duration: 3,\n        className: \"hide-in-percy\",\n        style: {\n          width: 450,\n        },\n      });\n    }\n  }\n}\n\nconst Container = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  @media (min-width: 650px) {\n    flex-direction: row;\n  }\n`;\n\nconst HelpNextButton = styled(QueueInfoColumnButton)`\n  color: white;\n  background: #2a9187;\n  &:hover,\n  &:focus {\n    color: white;\n    background: #39aca1;\n  }\n`;\n\nconst EditQueueButton = styled(QueueInfoColumnButton)`\n  color: #212934;\n`;\n\nconst MiddleSpacer = styled.div`\n  margin-left: 20px;\n`;\n\ninterface TAQueueProps {\n  qid: number;\n  courseId: number;\n}\n\nexport default function TAQueue({ qid, courseId }: TAQueueProps): ReactElement {\n  const user = useProfile();\n  const role = useRoleInCourse(courseId);\n  const { queue } = useQueue(qid);\n\n  const { questions, mutateQuestions } = useQuestions(qid);\n\n  const { isCheckedIn, isHelping } = useTAInQueueInfo(qid);\n\n  const [queueSettingsModal, setQueueSettingsModal] = useState(false);\n\n  const { course } = useCourse(courseId);\n  const staffCheckedIntoAnotherQueue = course?.queues.some(\n    (q) =>\n      q.id !== qid &&\n      q.staffList.some((staffMember) => staffMember.id === user?.id)\n  );\n\n  const nextQuestion =\n    questions?.priorityQueue[0] || // gets the first item of priority queue if it exists\n    questions?.queue?.find(\n      (question) => question.status === QuestionStatusKeys.Queued\n    );\n\n  const helpNext = async () => {\n    await onHelpQuestion(nextQuestion.id);\n    mutateQuestions();\n    const defaultMessage = user.includeDefaultMessage\n      ? user.defaultMessage\n      : \"\";\n    window.open(\n      `https://teams.microsoft.com/l/chat/0/0?users=${nextQuestion.creator.email}&message=${defaultMessage}`\n    );\n  };\n\n  // TODO: figure out tooltips\n  if (queue) {\n    return (\n      <>\n        <Container>\n          <QueueInfoColumn\n            queueId={qid}\n            buttons={\n              <>\n                <EditQueueButton\n                  data-cy=\"editQueue\"\n                  onClick={() => setQueueSettingsModal(true)}\n                >\n                  Edit Queue Details\n                </EditQueueButton>\n                <Tooltip\n                  title={!isCheckedIn && \"You must check in to help students!\"}\n                >\n                  <HelpNextButton\n                    onClick={helpNext}\n                    disabled={!isCheckedIn || !nextQuestion || isHelping}\n                    data-cy=\"help-next\"\n                  >\n                    Help Next\n                  </HelpNextButton>\n                </Tooltip>\n                <div style={{ marginBottom: \"12px\" }}>\n                  <TACheckinButton\n                    courseId={courseId}\n                    room={queue?.room}\n                    disabled={\n                      staffCheckedIntoAnotherQueue ||\n                      isHelping ||\n                      (queue.isProfessorQueue && role !== Role.PROFESSOR)\n                    }\n                    state={isCheckedIn ? \"CheckedIn\" : \"CheckedOut\"}\n                    block\n                  />\n                </div>\n              </>\n            }\n          />\n          <MiddleSpacer />\n          {user && questions && (\n            <TAQueueListDetail queueId={qid} courseId={courseId} />\n          )}\n        </Container>\n        <EditQueueModal\n          queueId={qid}\n          visible={queueSettingsModal}\n          onClose={() => setQueueSettingsModal(false)}\n        />\n      </>\n    );\n  } else {\n    return <div />;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}