{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { MinusCircleOutlined, QuestionCircleOutlined } from \"@ant-design/icons\";\nimport { API } from \"@koh/api-client\";\nimport { ERROR_MESSAGES } from \"@koh/common\";\nimport { Button, Form, List, message, Switch, Tooltip } from \"antd\";\nimport { pick } from \"lodash\";\nimport { HeaderTitle } from \"./Styled\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport useSWR from \"swr\";\nimport { getEndpoint, getNotificationState, NotificationStates, registerNotificationSubscription, requestNotificationPermission } from \"../../utils/notification\";\nconst DeviceAddHeader = styled.div.withConfig({\n  displayName: \"NotificationsSettings__DeviceAddHeader\",\n  componentId: \"sc-aypbgh-0\"\n})([\"display:flex;justify-content:space-between;\"]);\nexport default function NotificationsSettings() {\n  const {\n    data: profile,\n    mutate\n  } = useSWR(`api/v1/profile`, async () => API.profile.index());\n  const [form] = Form.useForm();\n\n  const editProfile = async updateProfile => {\n    const newProfile = _objectSpread(_objectSpread({}, profile), updateProfile);\n\n    mutate(newProfile, false);\n    await API.profile.patch(pick(newProfile, [\"desktopNotifsEnabled\"]));\n    mutate();\n    return newProfile;\n  };\n\n  const handleOk = async () => {\n    const value = await form.validateFields();\n\n    try {\n      const newProfile = await editProfile(value);\n      form.setFieldsValue(newProfile);\n      message.success(\"Your notification settings have been successfully updated\");\n    } catch (e) {\n      var _e$response, _e$response2, _e$response2$data;\n\n      if (((_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.status) === 400 && ((_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.message) === ERROR_MESSAGES.notificationService.registerPhone) {\n        form.setFields([{\n          name: \"phoneNumber\",\n          errors: [\"Invalid phone number\"]\n        }]);\n      }\n    }\n  };\n\n  return profile && /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(HeaderTitle, {\n      children: /*#__PURE__*/_jsx(\"h1\", {\n        children: \"Notifications\"\n      })\n    }), /*#__PURE__*/_jsxs(Form, {\n      wrapperCol: {\n        span: 10\n      },\n      form: form,\n      initialValues: profile,\n      children: [/*#__PURE__*/_jsx(Form.Item, {\n        style: {\n          flex: 1\n        },\n        label: \"Enable notifications on all devices\",\n        name: \"desktopNotifsEnabled\",\n        valuePropName: \"checked\",\n        children: /*#__PURE__*/_jsx(Switch, {})\n      }), /*#__PURE__*/_jsx(Form.Item, {\n        shouldUpdate: true,\n        noStyle: true,\n        children: () => (form === null || form === void 0 ? void 0 : form.getFieldValue(\"desktopNotifsEnabled\")) && /*#__PURE__*/_jsx(DeviceNotifPanel, {})\n      })]\n    }), /*#__PURE__*/_jsx(Tooltip, {\n      title: \"Click for help guide\",\n      children: /*#__PURE__*/_jsx(QuestionCircleOutlined, {\n        style: {\n          float: \"right\",\n          fontSize: \"25px\"\n        },\n        onClick: () => window.open(\"https://sandboxnu.notion.site/Khoury-Office-Hours-App-6eb1ee9f338f4b859cd89054f6503f43\")\n      })\n    }), /*#__PURE__*/_jsx(Button, {\n      type: \"primary\",\n      onClick: handleOk,\n      style: {\n        marginBottom: \"15px\"\n      },\n      children: \"Save\"\n    }, \"submit\")]\n  });\n}\n\nfunction useThisDeviceEndpoint() {\n  const {\n    0: endpoint,\n    1: setEndpoint\n  } = useState(null);\n  useEffect(() => {\n    (async () => setEndpoint(await getEndpoint()))();\n  });\n  return endpoint;\n}\n\nfunction renderDeviceInfo(device, isThisDevice) {\n  if (device.name) {\n    return isThisDevice ? `${device.name} (This Device)` : device.name;\n  } else {\n    return isThisDevice ? \"This Device\" : \"Other Device\";\n  }\n}\n\nfunction DeviceNotifPanel() {\n  var _profile$desktopNotif;\n\n  const thisEndpoint = useThisDeviceEndpoint();\n  const {\n    data: profile,\n    mutate\n  } = useSWR(`api/v1/profile`, async () => API.profile.index());\n  const thisDesktopNotif = profile === null || profile === void 0 ? void 0 : (_profile$desktopNotif = profile.desktopNotifs) === null || _profile$desktopNotif === void 0 ? void 0 : _profile$desktopNotif.find(dn => dn.endpoint === thisEndpoint);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsxs(DeviceAddHeader, {\n      children: [/*#__PURE__*/_jsx(\"h3\", {\n        children: \"Your Devices\"\n      }), !thisDesktopNotif && /*#__PURE__*/_jsx(Tooltip, {\n        title: getNotificationState() === NotificationStates.browserUnsupported && \"Browser does not support notifications. Please use Chrome or Firefox, and not Incognito Mode.\",\n        children: /*#__PURE__*/_jsx(Button, {\n          onClick: async () => {\n            const canNotify = await requestNotificationPermission();\n\n            if (canNotify === NotificationStates.notAllowed) {\n              message.warning(\"Please allow notifications in this browser\");\n            }\n\n            if (canNotify === NotificationStates.granted) {\n              await registerNotificationSubscription();\n              mutate();\n            }\n          },\n          disabled: getNotificationState() === NotificationStates.browserUnsupported,\n          style: {\n            marginBottom: \"4px\"\n          },\n          children: \"Add This Device\"\n        })\n      })]\n    }), /*#__PURE__*/_jsx(List, {\n      bordered: true,\n      dataSource: profile.desktopNotifs,\n      locale: {\n        emptyText: \"No Devices Registered To Receive Notifications\"\n      },\n      renderItem: device => /*#__PURE__*/_jsx(List.Item, {\n        actions: [/*#__PURE__*/_jsx(MinusCircleOutlined, {\n          style: {\n            fontSize: \"20px\"\n          },\n          onClick: async () => {\n            await API.notif.desktop.unregister(device.id);\n            mutate();\n          }\n        }, 0)],\n        children: /*#__PURE__*/_jsx(List.Item.Meta, {\n          title: renderDeviceInfo(device, device.endpoint === thisEndpoint),\n          description: `Registered ${device.createdAt.toLocaleDateString()}`\n        })\n      })\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}