{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { CheckOutlined, CloseOutlined, DeleteOutlined, PhoneOutlined, QuestionOutlined, UndoOutlined } from \"@ant-design/icons\";\nimport { API } from \"@koh/api-client\";\nimport { AlertType, ClosedQuestionStatus, LimboQuestionStatus, OpenQuestionStatus } from \"@koh/common\";\nimport { message, Popconfirm, Tooltip } from \"antd\";\nimport React, { useCallback } from \"react\";\nimport { useDefaultMessage } from \"../../../hooks/useDefaultMessage\";\nimport { useQuestions } from \"../../../hooks/useQuestions\";\nimport { useTAInQueueInfo } from \"../../../hooks/useTAInQueueInfo\";\nimport { BannerDangerButton, BannerOrangeButton, BannerPrimaryButton, CantFindButton, FinishHelpingButton, RequeueButton } from \"../Banner\";\nimport { useTeams } from \"../../../hooks/useTeams\";\nconst PRORITY_QUEUED_MESSAGE_TEXT = \"This student has been temporarily removed from the queue. They must select to rejoin the queue and will then be placed in the Priority Queue.\";\nexport default function TAQueueDetailButtons({\n  courseId,\n  queueId,\n  question,\n  hasUnresolvedRephraseAlert\n}) {\n  const defaultMessage = useDefaultMessage();\n  const {\n    mutateQuestions\n  } = useQuestions(queueId);\n  const changeStatus = useCallback(async status => {\n    await API.questions.update(question.id, {\n      status\n    });\n    mutateQuestions();\n  }, [question.id, mutateQuestions]);\n  const {\n    isCheckedIn,\n    isHelping\n  } = useTAInQueueInfo(queueId);\n  const openTeams = useTeams(queueId, question.creator.email, defaultMessage); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  const sendRephraseAlert = async () => {\n    const payload = {\n      queueId,\n      questionId: question.id,\n      courseId\n    };\n\n    try {\n      await API.alerts.create({\n        alertType: AlertType.REPHRASE_QUESTION,\n        courseId,\n        payload,\n        targetUserId: question.creator.id\n      });\n      await mutateQuestions();\n      message.success(\"Successfully asked student to rephrase their question.\");\n    } catch (e) {//If the ta creates an alert that already exists the error is caught and nothing happens\n    }\n  };\n\n  const helpStudent = () => {\n    changeStatus(OpenQuestionStatus.Helping);\n    openTeams();\n  };\n\n  if (question.status === OpenQuestionStatus.Helping) {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Popconfirm, {\n        title: \"Are you sure you want to send this student back to the queue?\",\n        okText: \"Yes\",\n        cancelText: \"No\",\n        onConfirm: async () => {\n          message.success(PRORITY_QUEUED_MESSAGE_TEXT, 2);\n          await changeStatus(LimboQuestionStatus.ReQueueing);\n        },\n        children: /*#__PURE__*/_jsx(Tooltip, {\n          title: \"Requeue Student\",\n          children: /*#__PURE__*/_jsx(RequeueButton, {\n            icon: /*#__PURE__*/_jsx(UndoOutlined, {}),\n            \"data-cy\": \"requeue-student-button\"\n          })\n        })\n      }), /*#__PURE__*/_jsx(Popconfirm, {\n        title: \"Are you sure you can't find this student?\",\n        okText: \"Yes\",\n        cancelText: \"No\",\n        onConfirm: async () => {\n          message.success(PRORITY_QUEUED_MESSAGE_TEXT, 2);\n          await changeStatus(LimboQuestionStatus.CantFind);\n          await API.questions.notify(question.id);\n        },\n        children: /*#__PURE__*/_jsx(Tooltip, {\n          title: \"Can't Find\",\n          children: /*#__PURE__*/_jsx(CantFindButton, {\n            shape: \"circle\",\n            icon: /*#__PURE__*/_jsx(CloseOutlined, {}),\n            \"data-cy\": \"cant-find-button\"\n          })\n        })\n      }), /*#__PURE__*/_jsx(Tooltip, {\n        title: \"Finish Helping\",\n        children: /*#__PURE__*/_jsx(FinishHelpingButton, {\n          icon: /*#__PURE__*/_jsx(CheckOutlined, {}),\n          onClick: () => changeStatus(ClosedQuestionStatus.Resolved),\n          \"data-cy\": \"finish-helping-button\"\n        })\n      })]\n    });\n  } else {\n    const [canHelp, helpTooltip] = (() => {\n      if (!isCheckedIn) {\n        return [false, \"You must check in to help students!\"];\n      } else if (isHelping) {\n        return [false, \"You are already helping a student\"];\n      } else {\n        return [true, \"Help Student\"];\n      }\n    })();\n\n    const [canRephrase, rephraseTooltip] = (() => {\n      if (!isCheckedIn) {\n        return [false, \"You must check in to ask this student to rephrase their question\"];\n      } else if (hasUnresolvedRephraseAlert) {\n        return [false, \"The student has already been asked to rephrase their question\"];\n      } else {\n        return [true, \"Ask the student to add more detail to their question\"];\n      }\n    })();\n\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Popconfirm, {\n        title: \"Are you sure you want to delete this question from the queue?\",\n        disabled: !isCheckedIn,\n        okText: \"Yes\",\n        cancelText: \"No\",\n        onConfirm: async () => {\n          await changeStatus(question.status === OpenQuestionStatus.Drafting ? ClosedQuestionStatus.DeletedDraft : LimboQuestionStatus.TADeleted);\n          await API.questions.notify(question.id);\n        },\n        children: /*#__PURE__*/_jsx(Tooltip, {\n          title: isCheckedIn ? \"Remove From Queue\" : \"You must check in to remove students from the queue\",\n          children: /*#__PURE__*/_jsx(\"span\", {\n            children: /*#__PURE__*/_jsx(BannerDangerButton, {\n              shape: \"circle\",\n              icon: /*#__PURE__*/_jsx(DeleteOutlined, {}),\n              \"data-cy\": \"remove-from-queue\",\n              disabled: !isCheckedIn\n            })\n          })\n        })\n      }), /*#__PURE__*/_jsx(Tooltip, {\n        title: rephraseTooltip,\n        children: /*#__PURE__*/_jsx(\"span\", {\n          children: /*#__PURE__*/_jsx(BannerOrangeButton, {\n            shape: \"circle\",\n            icon: /*#__PURE__*/_jsx(QuestionOutlined, {}),\n            onClick: sendRephraseAlert,\n            \"data-cy\": \"request-rephrase-question\",\n            disabled: !canRephrase\n          })\n        })\n      }), /*#__PURE__*/_jsx(Tooltip, {\n        title: helpTooltip,\n        children: /*#__PURE__*/_jsx(\"span\", {\n          children: /*#__PURE__*/_jsx(BannerPrimaryButton, {\n            icon: /*#__PURE__*/_jsx(PhoneOutlined, {}),\n            onClick: () => helpStudent(),\n            disabled: !canHelp,\n            \"data-cy\": \"help-student\"\n          })\n        })\n      })]\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}