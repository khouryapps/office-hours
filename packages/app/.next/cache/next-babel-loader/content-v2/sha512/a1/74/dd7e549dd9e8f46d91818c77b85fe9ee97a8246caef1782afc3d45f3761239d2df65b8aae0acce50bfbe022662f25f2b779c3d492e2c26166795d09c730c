{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { PhoneOutlined } from \"@ant-design/icons\";\nimport { API } from \"@koh/api-client\";\nimport { Checkbox, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useDefaultMessage } from \"../../../../hooks/useDefaultMessage\";\nimport { useTAInQueueInfo } from \"../../../../hooks/useTAInQueueInfo\";\nimport { BannerPrimaryButton } from \"../../Banner\";\nimport { Header } from \"../TAQueueDetail\";\nimport TAQueueListItem from \"../TAQueueListItem\";\nexport const Description = styled.div.withConfig({\n  displayName: \"AllQuestionsChecklist__Description\",\n  componentId: \"sc-1m6wlb4-0\"\n})([\"font-size:12px;color:#8895a6;\"]);\nconst SelectAllContainer = styled.div.withConfig({\n  displayName: \"AllQuestionsChecklist__SelectAllContainer\",\n  componentId: \"sc-1m6wlb4-1\"\n})([\"padding:3px 8px;border-bottom:1px solid #cfd6de;\"]);\nconst QuestionsList = styled.div.withConfig({\n  displayName: \"AllQuestionsChecklist__QuestionsList\",\n  componentId: \"sc-1m6wlb4-2\"\n})([\"display:flex;flex-direction:column;\"]);\nconst RedText = styled.span.withConfig({\n  displayName: \"AllQuestionsChecklist__RedText\",\n  componentId: \"sc-1m6wlb4-3\"\n})([\"color:red;\"]);\nexport default function AllQuestionsCheckList({\n  groupCreator,\n  allQuestions,\n  hasMissingQuestions,\n  queueId,\n  onStartCall\n}) {\n  const {\n    0: checkedQuestions,\n    1: setCheckedQuestions\n  } = useState(new Set());\n  const {\n    isCheckedIn,\n    isHelping\n  } = useTAInQueueInfo(queueId);\n\n  const [canHelp, helpTooltip] = (() => {\n    if (!isCheckedIn) {\n      return [false, \"You must check in to help students!\"];\n    } else if (isHelping) {\n      return [false, \"You are already helping a student\"];\n    } else {\n      return [true, \"Create Group & Call\"];\n    }\n  })();\n\n  const defaultMessage = useDefaultMessage();\n\n  const onQuestionChecked = q => {\n    if (!checkedQuestions.has(q.id)) {\n      setCheckedQuestions(new Set(checkedQuestions.add(q.id)));\n    } else {\n      checkedQuestions.delete(q.id);\n      setCheckedQuestions(new Set(checkedQuestions));\n    }\n  };\n\n  const onToggleSelectAll = e => {\n    if (e.target.checked) {\n      setCheckedQuestions(new Set(allQuestions.map(q => q.id)));\n    } else {\n      setCheckedQuestions(new Set());\n    }\n  };\n\n  const usersInLink = allQuestions.filter(question => checkedQuestions.has(question.id)).map(question => question.creator.email).join(\",\");\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsxs(Header, {\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(\"strong\", {\n          children: `${groupCreator.name}'s Group Session`\n        }), /*#__PURE__*/_jsxs(Description, {\n          children: [\"Select Students to Create Group\", hasMissingQuestions ? /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(RedText, {\n              children: \"Note:\"\n            }), \" some students may not show up, as they did not consent to being grouped\"]\n          }) : null]\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(Tooltip, {\n          title: helpTooltip,\n          children: /*#__PURE__*/_jsx(\"span\", {\n            children: /*#__PURE__*/_jsx(BannerPrimaryButton, {\n              icon: /*#__PURE__*/_jsx(PhoneOutlined, {}),\n              onClick: () => {\n                API.questions.group({\n                  questionIds: Array.from(checkedQuestions),\n                  queueId: queueId\n                });\n                onStartCall();\n                window.open(`https://teams.microsoft.com/l/chat/0/0?users=${usersInLink}&message=${defaultMessage}`);\n              },\n              disabled: !canHelp || checkedQuestions.size === 0,\n              \"data-cy\": \"help-student\"\n            })\n          })\n        })\n      })]\n    }), /*#__PURE__*/_jsx(SelectAllContainer, {\n      children: /*#__PURE__*/_jsx(Checkbox, {\n        checked: allQuestions.length === checkedQuestions.size,\n        indeterminate: checkedQuestions.size && checkedQuestions.size !== allQuestions.length,\n        onChange: onToggleSelectAll,\n        children: /*#__PURE__*/_jsx(\"span\", {\n          style: {\n            paddingLeft: \"9px\"\n          },\n          children: \"Select All\"\n        })\n      })\n    }), /*#__PURE__*/_jsx(QuestionsList, {\n      children: allQuestions.map((q, i) => /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(TAQueueListItem, {\n          question: q,\n          index: i + 1,\n          selected: checkedQuestions.has(q.id),\n          onClick: () => onQuestionChecked(q),\n          showCheckbox: true\n        })\n      }, q.id))\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}