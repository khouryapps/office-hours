{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _slicedToArray from \"/var/www/source/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/var/www/source/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/source/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nimport { API } from \"@koh/api-client\";\nimport useSWR from \"swr\";\nimport { Divider, Switch } from \"antd\";\nimport styled from \"styled-components\";\nvar Row = styled.div.withConfig({\n  displayName: \"InsightsDisplayOptions__Row\",\n  componentId: \"sc-pl63wh-0\"\n})([\"display:flex;flex-direction:row;justify-content:space-between;font-size:18px;align-items:center;margin-bottom:16px;\"]);\nexport default function InsightsDisplayOptions() {\n  var _Object$entries;\n\n  var _useSWR = useSWR(\"api/v1/profile\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", API.profile.index());\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }))),\n      profile = _useSWR.data,\n      mutateProfile = _useSWR.mutate;\n\n  var _useSWR2 = useSWR(\"api/v1/insights\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", API.insights.list());\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }))),\n      insightsList = _useSWR2.data;\n\n  var toggleInsightOnOrOff = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(checked, insightName) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!checked) {\n                _context3.next = 5;\n                break;\n              }\n\n              _context3.next = 3;\n              return API.insights.toggleOn(insightName);\n\n            case 3:\n              _context3.next = 7;\n              break;\n\n            case 5:\n              _context3.next = 7;\n              return API.insights.toggleOff(insightName);\n\n            case 7:\n              mutateProfile();\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function toggleInsightOnOrOff(_x, _x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(\"div\", {\n      children: insightsList && ((_Object$entries = Object.entries(insightsList)) === null || _Object$entries === void 0 ? void 0 : _Object$entries.map(function (_ref4) {\n        var _profile$insights;\n\n        var _ref5 = _slicedToArray(_ref4, 2),\n            insightName = _ref5[0],\n            insightPartial = _ref5[1];\n\n        return /*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsxs(Row, {\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              children: insightPartial.displayName\n            }), /*#__PURE__*/_jsx(Switch, {\n              checked: profile === null || profile === void 0 ? void 0 : (_profile$insights = profile.insights) === null || _profile$insights === void 0 ? void 0 : _profile$insights.includes(insightName),\n              onChange: function onChange(checked) {\n                return toggleInsightOnOrOff(checked, insightName);\n              }\n            })]\n          }), /*#__PURE__*/_jsx(Divider, {})]\n        }, insightName);\n      }))\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}