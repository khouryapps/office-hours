{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/var/www/source/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/source/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { API } from \"@koh/api-client\";\nimport { ERROR_MESSAGES, OpenQuestionStatus } from \"@koh/common\";\nimport { notification } from \"antd\";\nimport { QuestionStatusKeys, Role } from \"@koh/common\";\nimport { Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useCourse } from \"../../../hooks/useCourse\";\nimport { useProfile } from \"../../../hooks/useProfile\";\nimport { useQuestions } from \"../../../hooks/useQuestions\";\nimport { useQueue } from \"../../../hooks/useQueue\";\nimport { useRoleInCourse } from \"../../../hooks/useRoleInCourse\";\nimport { useTAInQueueInfo } from \"../../../hooks/useTAInQueueInfo\";\nimport TACheckinButton from \"../../Today/TACheckinButton\";\nimport { QueueInfoColumn, QueueInfoColumnButton } from \"../QueueListSharedComponents\";\nimport { EditQueueModal } from \"./EditQueueModal\";\nimport TAQueueListDetail from \"./TAQueueListDetail\";\n/**\n * Method to help student and\n * pop open notification if another TA helped at same time (race condition)\n */\n\nfunction onHelpQuestion(_x) {\n  return _onHelpQuestion.apply(this, arguments);\n}\n\nfunction _onHelpQuestion() {\n  _onHelpQuestion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(questionId) {\n    var _e$response, _e$response2, _e$response2$data;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return API.questions.update(questionId, {\n              status: OpenQuestionStatus.Helping\n            });\n\n          case 3:\n            _context2.next = 8;\n            break;\n\n          case 5:\n            _context2.prev = 5;\n            _context2.t0 = _context2[\"catch\"](0);\n\n            if (((_e$response = _context2.t0.response) === null || _e$response === void 0 ? void 0 : _e$response.status) === 401 && ((_e$response2 = _context2.t0.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.message) === ERROR_MESSAGES.questionController.updateQuestion.otherTAHelping) {\n              notification.open({\n                message: \"Another TA is currently helping the student\",\n                description: \"This happens when another TA clicks help at the exact same time\",\n                type: \"error\",\n                duration: 3,\n                className: \"hide-in-percy\",\n                style: {\n                  width: 450\n                }\n              });\n            }\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 5]]);\n  }));\n  return _onHelpQuestion.apply(this, arguments);\n}\n\nvar Container = styled.div.withConfig({\n  displayName: \"TAQueue__Container\",\n  componentId: \"sc-173p98z-0\"\n})([\"flex:1;display:flex;flex-direction:column;@media (min-width:650px){flex-direction:row;}\"]);\nvar HelpNextButton = styled(QueueInfoColumnButton).withConfig({\n  displayName: \"TAQueue__HelpNextButton\",\n  componentId: \"sc-173p98z-1\"\n})([\"color:white;background:#2a9187;&:hover,&:focus{color:white;background:#39aca1;}\"]);\nvar EditQueueButton = styled(QueueInfoColumnButton).withConfig({\n  displayName: \"TAQueue__EditQueueButton\",\n  componentId: \"sc-173p98z-2\"\n})([\"color:#212934;\"]);\nvar MiddleSpacer = styled.div.withConfig({\n  displayName: \"TAQueue__MiddleSpacer\",\n  componentId: \"sc-173p98z-3\"\n})([\"margin-left:20px;\"]);\nexport default function TAQueue(_ref) {\n  var _questions$queue;\n\n  var qid = _ref.qid,\n      courseId = _ref.courseId;\n  var user = useProfile();\n  var role = useRoleInCourse(courseId);\n\n  var _useQueue = useQueue(qid),\n      queue = _useQueue.queue;\n\n  var _useQuestions = useQuestions(qid),\n      questions = _useQuestions.questions,\n      mutateQuestions = _useQuestions.mutateQuestions;\n\n  var _useTAInQueueInfo = useTAInQueueInfo(qid),\n      isCheckedIn = _useTAInQueueInfo.isCheckedIn,\n      isHelping = _useTAInQueueInfo.isHelping;\n\n  var _useState = useState(false),\n      queueSettingsModal = _useState[0],\n      setQueueSettingsModal = _useState[1];\n\n  var _useCourse = useCourse(courseId),\n      course = _useCourse.course;\n\n  var staffCheckedIntoAnotherQueue = course === null || course === void 0 ? void 0 : course.queues.some(function (q) {\n    return q.id !== qid && q.staffList.some(function (staffMember) {\n      return staffMember.id === (user === null || user === void 0 ? void 0 : user.id);\n    });\n  });\n  var nextQuestion = (questions === null || questions === void 0 ? void 0 : questions.priorityQueue[0]) || ( // gets the first item of priority queue if it exists\n  questions === null || questions === void 0 ? void 0 : (_questions$queue = questions.queue) === null || _questions$queue === void 0 ? void 0 : _questions$queue.find(function (question) {\n    return question.status === QuestionStatusKeys.Queued;\n  }));\n\n  var helpNext = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var defaultMessage;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return onHelpQuestion(nextQuestion.id);\n\n            case 2:\n              mutateQuestions();\n              defaultMessage = user.includeDefaultMessage ? user.defaultMessage : \"\";\n              window.open(\"https://teams.microsoft.com/l/chat/0/0?users=\".concat(nextQuestion.creator.email, \"&message=\").concat(defaultMessage));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function helpNext() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // TODO: figure out tooltips\n\n\n  if (queue) {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(Container, {\n        children: [/*#__PURE__*/_jsx(QueueInfoColumn, {\n          queueId: qid,\n          buttons: /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(EditQueueButton, {\n              \"data-cy\": \"editQueue\",\n              onClick: function onClick() {\n                return setQueueSettingsModal(true);\n              },\n              children: \"Edit Queue Details\"\n            }), /*#__PURE__*/_jsx(Tooltip, {\n              title: !isCheckedIn && \"You must check in to help students!\",\n              children: /*#__PURE__*/_jsx(HelpNextButton, {\n                onClick: helpNext,\n                disabled: !isCheckedIn || !nextQuestion || isHelping,\n                \"data-cy\": \"help-next\",\n                children: \"Help Next\"\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              style: {\n                marginBottom: \"12px\"\n              },\n              children: /*#__PURE__*/_jsx(TACheckinButton, {\n                courseId: courseId,\n                room: queue === null || queue === void 0 ? void 0 : queue.room,\n                disabled: staffCheckedIntoAnotherQueue || isHelping || queue.isProfessorQueue && role !== Role.PROFESSOR,\n                state: isCheckedIn ? \"CheckedIn\" : \"CheckedOut\",\n                block: true\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(MiddleSpacer, {}), user && questions && /*#__PURE__*/_jsx(TAQueueListDetail, {\n          queueId: qid,\n          courseId: courseId\n        })]\n      }), /*#__PURE__*/_jsx(EditQueueModal, {\n        queueId: qid,\n        visible: queueSettingsModal,\n        onClose: function onClose() {\n          return setQueueSettingsModal(false);\n        }\n      })]\n    });\n  } else {\n    return /*#__PURE__*/_jsx(\"div\", {});\n  }\n}","map":null,"metadata":{},"sourceType":"module"}