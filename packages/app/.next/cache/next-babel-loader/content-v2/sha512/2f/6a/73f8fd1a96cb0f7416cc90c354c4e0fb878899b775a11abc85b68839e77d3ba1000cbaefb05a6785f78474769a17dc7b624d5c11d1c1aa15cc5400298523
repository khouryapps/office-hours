{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { API } from \"@koh/api-client\";\nimport { Role } from \"@koh/common\";\nimport { Col, Row } from \"antd\";\nimport { chunk, mean } from \"lodash\";\nimport moment from \"moment\";\nimport Head from \"next/head\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { StandardPageContainer } from \"../../../components/common/PageContainer\";\nimport NavBar from \"../../../components/Nav/NavBar\";\nimport SchedulePanel from \"../../../components/Schedule/SchedulePanel\";\nimport QueueCard, { QueueCardSkeleton } from \"../../../components/Today/QueueCard\";\nimport TodayPageCheckinButton from \"../../../components/Today/QueueCheckInButton\";\nimport ReleaseNotes from \"../../../components/Today/ReleaseNotes\";\nimport WelcomeStudents from \"../../../components/Today/WelcomeStudents\";\nimport { useCourse } from \"../../../hooks/useCourse\";\nimport { useRoleInCourse } from \"../../../hooks/useRoleInCourse\";\nimport PopularTimes from \"../../../components/Today/PopularTimes/PopularTimes\";\nimport { orderBy } from \"lodash\";\nimport ApplyToSandbox from \"../../../components/Today/SandboxApplication\";\nconst Container = styled.div.withConfig({\n  displayName: \"today__Container\",\n  componentId: \"sc-guxhv1-0\"\n})([\"margin-top:32px;\"]);\nconst Title = styled.div.withConfig({\n  displayName: \"today__Title\",\n  componentId: \"sc-guxhv1-1\"\n})([\"font-weight:500;font-size:30px;color:#212934;\"]);\nconst TodayCol = styled(Col).withConfig({\n  displayName: \"today__TodayCol\",\n  componentId: \"sc-guxhv1-2\"\n})([\"margin-bottom:15px;\"]);\nconst RoleColorSpan = styled.span.withConfig({\n  displayName: \"today__RoleColorSpan\",\n  componentId: \"sc-guxhv1-3\"\n})([\"color:#3684c6;font-weight:bold;\"]);\n\nfunction roleToString(role) {\n  switch (role) {\n    case Role.TA:\n      return \"TA\";\n\n    case Role.STUDENT:\n      return \"Student\";\n\n    case Role.PROFESSOR:\n      return \"Professor\";\n\n    default:\n      return \"\";\n  }\n}\n\nfunction arrayRotate(arr, count) {\n  const adjustedCount = (arr.length + count) % arr.length;\n  return arr.slice(adjustedCount, arr.length).concat(arr.slice(0, adjustedCount));\n}\n\nconst collapseHeatmap = heatmap => chunk(heatmap, 4).map(hours => {\n  const filteredOfficeHours = hours.filter(v => v !== -1);\n  return filteredOfficeHours.length > 0 ? mean(filteredOfficeHours) : -1;\n});\n\nexport default function Today() {\n  var _course$queues;\n\n  const router = useRouter();\n  const {\n    cid\n  } = router.query;\n  const role = useRoleInCourse(Number(cid));\n  const {\n    course,\n    mutateCourse\n  } = useCourse(Number(cid));\n  const sortByProfOrder = role == Role.PROFESSOR ? \"desc\" : \"asc\";\n  const sortedQueues = (course === null || course === void 0 ? void 0 : course.queues) && orderBy(course === null || course === void 0 ? void 0 : course.queues, [\"isOpen\", \"isProfessorQueue\"], [\"desc\", sortByProfOrder]);\n\n  const updateQueueNotes = async (queue, notes) => {\n    const newQueues = course && course.queues.map(q => q.id === queue.id ? _objectSpread(_objectSpread({}, q), {}, {\n      notes\n    }) : q);\n    mutateCourse(_objectSpread(_objectSpread({}, course), {}, {\n      queues: newQueues\n    }), false);\n    await API.queues.update(queue.id, {\n      notes,\n      allowQuestions: queue.allowQuestions\n    });\n    mutateCourse();\n  };\n\n  return /*#__PURE__*/_jsxs(StandardPageContainer, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsxs(\"title\", {\n        children: [course === null || course === void 0 ? void 0 : course.name, \" | Khoury Office Hours\"]\n      })\n    }), /*#__PURE__*/_jsx(ReleaseNotes, {}), /*#__PURE__*/_jsx(WelcomeStudents, {}), role != Role.PROFESSOR && /*#__PURE__*/_jsx(ApplyToSandbox, {}), /*#__PURE__*/_jsx(NavBar, {\n      courseId: Number(cid)\n    }), /*#__PURE__*/_jsx(Container, {\n      children: /*#__PURE__*/_jsxs(Row, {\n        gutter: 64,\n        children: [/*#__PURE__*/_jsxs(TodayCol, {\n          md: 12,\n          xs: 24,\n          children: [/*#__PURE__*/_jsxs(Row, {\n            justify: \"space-between\",\n            children: [/*#__PURE__*/_jsx(Title, {\n              children: \"Current Office Hours\"\n            }), /*#__PURE__*/_jsx(TodayPageCheckinButton, {})]\n          }), /*#__PURE__*/_jsx(Row, {\n            children: /*#__PURE__*/_jsx(\"div\", {\n              children: /*#__PURE__*/_jsxs(\"i\", {\n                children: [\"You are a \", /*#__PURE__*/_jsx(RoleColorSpan, {\n                  children: roleToString(role)\n                }), \" \", \"for this course\"]\n              })\n            })\n          }), (course === null || course === void 0 ? void 0 : (_course$queues = course.queues) === null || _course$queues === void 0 ? void 0 : _course$queues.length) === 0 ? /*#__PURE__*/_jsx(\"h1\", {\n            style: {\n              paddingTop: \"100px\"\n            },\n            children: \"There are no queues for this course\"\n          }) : sortedQueues === null || sortedQueues === void 0 ? void 0 : sortedQueues.map(q => /*#__PURE__*/_jsx(QueueCard, {\n            queue: q,\n            isTA: role === Role.TA || role === Role.PROFESSOR,\n            updateQueueNotes: updateQueueNotes\n          }, q.id)), !course && /*#__PURE__*/_jsx(QueueCardSkeleton, {}), // This only works with UTC offsets in the form N:00, to help with other offsets, the size of the array might have to change to a size of 24*7*4 (for every 15 min interval)\n          course && course.heatmap && /*#__PURE__*/_jsx(PopularTimes, {\n            heatmap: collapseHeatmap(arrayRotate(course.heatmap, -Math.floor(moment().utcOffset() / 15)))\n          })]\n        }), /*#__PURE__*/_jsx(TodayCol, {\n          md: 12,\n          sm: 24,\n          children: /*#__PURE__*/_jsx(SchedulePanel, {\n            courseId: Number(cid),\n            defaultView: \"timeGridDay\"\n          })\n        })]\n      })\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}