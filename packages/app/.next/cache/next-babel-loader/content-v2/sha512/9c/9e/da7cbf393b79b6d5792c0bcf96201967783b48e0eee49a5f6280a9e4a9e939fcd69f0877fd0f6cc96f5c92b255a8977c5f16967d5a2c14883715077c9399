{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _toConsumableArray from \"/var/www/source/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/var/www/source/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/var/www/source/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/source/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useState } from \"react\";\nimport { API } from \"@koh/api-client\";\nimport useSWR from \"swr\";\nimport { Tooltip, Card, Space, Drawer, Button, DatePicker, Divider, Row, Spin } from \"antd\";\nimport { InfoCircleOutlined, QuestionCircleOutlined } from \"@ant-design/icons\";\nimport { useProfile } from \"../../../hooks/useProfile\";\nimport { InsightComponent } from \"@koh/common\";\nimport BarChartComponent from \"../../../components/Insights/components/BarChartComponent\";\nimport SimpleDisplayComponent from \"../../../components/Insights/components/SimpleDisplayComponent\";\nimport InsightsDisplayOptions from \"../../../components/Insights/components/InsightsDisplayOptions\";\nimport { SimpleTable } from \"../../../components/Insights/components/SimpleTable\";\nimport NavBar from \"../../../components/Nav/NavBar\";\nimport { StandardPageContainer } from \"../../../components/common/PageContainer\";\nimport { useRouter } from \"next/router\";\nimport styled from \"styled-components\";\nvar InsightsRowContainer = styled.div.withConfig({\n  displayName: \"insights__InsightsRowContainer\",\n  componentId: \"sc-13ej1wk-0\"\n})([\"display:flex;direction:ltr;margin-left:-0.5%;margin-right:-0.5%;\"]);\nexport default function Insights() {\n  var profile = useProfile();\n  var router = useRouter();\n  var cid = router.query.cid;\n\n  var _useState = useState({\n    start: \"\",\n    end: \"\"\n  }),\n      dateRange = _useState[0],\n      setDateRange = _useState[1];\n\n  var _useState2 = useState(1),\n      mostActiveStudentsPage = _useState2[0],\n      setMostActiveStudentsPage = _useState2[1];\n\n  var _useSWR = useSWR(\"api/v1/insights/listAll\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", API.insights.list());\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }))),\n      allInsights = _useSWR.data;\n\n  var _useState3 = useState(false),\n      settingsVisible = _useState3[0],\n      setSettingsVisible = _useState3[1];\n\n  if (!allInsights || !(profile !== null && profile !== void 0 && profile.insights)) {\n    return null;\n  } // Group users insights by size (small | default) so they can be rendered correctly\n\n\n  var _profile$insights$red = profile.insights.reduce(function (_ref2, insight) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        smallInsights = _ref3[0],\n        defaultInsights = _ref3[1];\n\n    return allInsights[insight].size === \"small\" ? [[].concat(_toConsumableArray(smallInsights), [insight]), defaultInsights] : [smallInsights, [].concat(_toConsumableArray(defaultInsights), [insight])];\n  }, [[], []]),\n      _profile$insights$red2 = _slicedToArray(_profile$insights$red, 2),\n      smallInsights = _profile$insights$red2[0],\n      defaultInsights = _profile$insights$red2[1];\n\n  var RangePicker = DatePicker.RangePicker;\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(StandardPageContainer, {\n      children: [/*#__PURE__*/_jsx(NavBar, {\n        courseId: Number(cid)\n      }), /*#__PURE__*/_jsxs(Row, {\n        align: \"middle\",\n        justify: \"space-between\",\n        style: {\n          margin: \"12px 0px\"\n        },\n        children: [/*#__PURE__*/_jsx(\"h1\", {\n          style: {\n            display: \"inline\",\n            margin: \"0px\"\n          },\n          children: \"Insights Dashboard\"\n        }), /*#__PURE__*/_jsxs(Row, {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            style: {\n              maxWidth: \"200 px\"\n            },\n            children: [/*#__PURE__*/_jsx(Tooltip, {\n              title: \"If no date range is selected results are from the data for the full semester so far\",\n              children: /*#__PURE__*/_jsx(QuestionCircleOutlined, {})\n            }), /*#__PURE__*/_jsx(\"b\", {\n              style: {\n                display: \"inline-block\",\n                marginRight: \"12px\",\n                marginLeft: \"8px\"\n              },\n              children: \"Date Range\"\n            }), /*#__PURE__*/_jsx(RangePicker, {\n              onChange: function onChange(_, dateString) {\n                return setDateRange({\n                  start: dateString[0],\n                  end: dateString[1]\n                });\n              }\n            })]\n          }), /*#__PURE__*/_jsx(Button, {\n            style: {\n              marginLeft: \"24px\"\n            },\n            onClick: function onClick() {\n              return setSettingsVisible(true);\n            },\n            children: \"Edit Insights\"\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(Divider, {\n        style: {\n          margin: \"0 0 16px 0\"\n        }\n      }), /*#__PURE__*/_jsx(Drawer, {\n        title: \"Display Options\",\n        placement: \"left\",\n        closable: true,\n        destroyOnClose: true,\n        onClose: function onClose() {\n          return setSettingsVisible(false);\n        },\n        visible: settingsVisible,\n        width: 400,\n        children: /*#__PURE__*/_jsx(InsightsDisplayOptions, {})\n      }), /*#__PURE__*/_jsx(InsightsRowContainer, {\n        children: smallInsights === null || smallInsights === void 0 ? void 0 : smallInsights.map(function (insightName) {\n          return /*#__PURE__*/_jsx(MemoizedRenderInsight, {\n            insightName: insightName,\n            insightDisplay: allInsights[insightName],\n            dateRange: dateRange,\n            mostActiveStudentsPage: mostActiveStudentsPage,\n            setMostActiveStudentsPage: setMostActiveStudentsPage\n          }, insightName);\n        })\n      }), /*#__PURE__*/_jsx(InsightsRowContainer, {\n        children: defaultInsights === null || defaultInsights === void 0 ? void 0 : defaultInsights.map(function (insightName) {\n          return /*#__PURE__*/_jsx(MemoizedRenderInsight, {\n            insightName: insightName,\n            insightDisplay: allInsights[insightName],\n            dateRange: dateRange,\n            mostActiveStudentsPage: mostActiveStudentsPage,\n            setMostActiveStudentsPage: setMostActiveStudentsPage\n          }, insightName);\n        })\n      })]\n    })\n  });\n}\n\nvar equalRenderInsights = function equalRenderInsights(prevProps, nextProps) {\n  if (prevProps.insightName === \"MostActiveStudents\" && nextProps.insightName === \"MostActiveStudents\") {\n    return prevProps.mostActiveStudentsPage === nextProps.mostActiveStudentsPage && prevProps.dateRange.start === nextProps.dateRange.start && prevProps.dateRange.end === nextProps.dateRange.end;\n  } else {\n    return prevProps.insightName === nextProps.insightName && prevProps.dateRange.start === nextProps.dateRange.start && prevProps.dateRange.end === nextProps.dateRange.end;\n  }\n};\n\nvar MemoizedRenderInsight = /*#__PURE__*/React.memo(RenderInsight, equalRenderInsights);\n\nfunction RenderInsight(_ref4) {\n  var insightName = _ref4.insightName,\n      insightDisplay = _ref4.insightDisplay,\n      dateRange = _ref4.dateRange,\n      mostActiveStudentsPage = _ref4.mostActiveStudentsPage,\n      setMostActiveStudentsPage = _ref4.setMostActiveStudentsPage;\n  var router = useRouter();\n  var cid = router.query.cid;\n  var limit = insightName === \"MostActiveStudents\" ? 6 : null;\n  var offset = insightName === \"MostActiveStudents\" ? (mostActiveStudentsPage - 1) * limit : null;\n\n  var _useSWR2 = useSWR(cid && \"api/v1/insights/\".concat(cid, \"/\").concat(insightName, \"?start=\").concat(dateRange.start, \"&end=\").concat(dateRange.end).concat(limit ? \"limit&6\" : \"\").concat(offset ? \"offset&\".concat(offset) : \"\"), /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return API.insights.get(Number(cid), insightName, {\n              start: dateRange.start,\n              end: dateRange.end,\n              limit: limit,\n              offset: offset\n            });\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }))),\n      insightOutput = _useSWR2.data;\n\n  var insightComponent;\n\n  if (insightOutput === undefined) {\n    insightComponent = /*#__PURE__*/_jsx(Spin, {\n      style: {\n        margin: \"10% 45%\"\n      }\n    });\n  } else {\n    switch (insightDisplay.component) {\n      case InsightComponent.SimpleDisplay:\n        insightComponent = /*#__PURE__*/_jsx(SimpleDisplayComponent, {\n          output: insightOutput\n        }, insightName);\n        break;\n\n      case InsightComponent.BarChart:\n        insightComponent = /*#__PURE__*/_jsx(BarChartComponent, {\n          output: insightOutput\n        }, insightName);\n        break;\n\n      case InsightComponent.SimpleTable:\n        insightComponent = /*#__PURE__*/_jsx(SimpleTable, {\n          output: insightOutput,\n          currentPage: mostActiveStudentsPage,\n          setPage: setMostActiveStudentsPage\n        }, insightName);\n        break;\n\n      default:\n        // Line below will show error if switch is not exhaustive of all enum values\n        componentDoesNotExist(insightDisplay.component);\n    }\n  }\n\n  return /*#__PURE__*/_jsx(Card, {\n    size: insightDisplay.size,\n    title: insightDisplay.displayName,\n    style: {\n      margin: \"0.5%\",\n      padding: \"2px\",\n      width: insightDisplay.size === \"default\" ? \"50%\" : \"16.66%\",\n      maxWidth: insightDisplay.size === \"default\" ? \"625px\" : \"200px\"\n    },\n    bodyStyle: {\n      position: \"relative\"\n    },\n    extra: /*#__PURE__*/_jsx(Space, {\n      children: /*#__PURE__*/_jsx(Tooltip, {\n        title: insightDisplay.description,\n        children: /*#__PURE__*/_jsx(InfoCircleOutlined, {})\n      })\n    }),\n    children: insightComponent\n  });\n}\n\nfunction componentDoesNotExist(componentName) {\n  throw new Error(\"Component \".concat(componentName, \" was unable to be rendered\"));\n}","map":null,"metadata":{},"sourceType":"module"}