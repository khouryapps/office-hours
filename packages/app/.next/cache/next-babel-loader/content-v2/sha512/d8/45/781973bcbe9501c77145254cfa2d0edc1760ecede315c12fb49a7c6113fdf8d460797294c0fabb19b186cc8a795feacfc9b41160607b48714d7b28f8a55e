{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"/var/www/source/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { AxisBottom, AxisLeft } from \"@visx/axis\";\nimport { GridRows } from \"@visx/grid\";\nimport { Group } from \"@visx/group\";\nimport { scaleBand, scaleLinear } from \"@visx/scale\";\nimport { BarRounded } from \"@visx/shape\";\nimport { defaultStyles, useTooltip, useTooltipInPortal } from \"@visx/tooltip\";\nimport { range } from \"lodash\";\nimport React, { useMemo } from \"react\";\nimport styled from \"styled-components\";\nimport { formatWaitTime } from \"../../../utils/TimeUtil\";\nimport { formatDateHour } from \"./FormatDateHour\";\nvar tooltipTimeout;\n\nvar tooltipStyles = _objectSpread(_objectSpread({}, defaultStyles), {}, {\n  minWidth: 60,\n  backgroundColor: \"rgba(0,0,0,0.9)\",\n  color: \"white\"\n}); // The distance in pixels from the left side of the component to the origin of the graph\n\n\nvar LEFT_MARGIN = 45; // The distance in pixels from the end of the bottom axis to the right side of the component\n\nvar RIGHT_MARGIN = 10; // The distance in pixels from the top of the component to the top of the y axis\n\nvar TOP_MARGIN = 10;\nvar BOTTOM_MARGIN = 20; //padding in between each bar as a percent of the bar width\n\nvar BAR_PADDING = 0.2; // the padding to the left of the left axis in pixels\n\nvar GraphContainer = styled.div.withConfig({\n  displayName: \"TimeGraph__GraphContainer\",\n  componentId: \"sc-18irejk-0\"\n})([\"position:relative;& .popularTimes__bar{cursor:pointer;}\"]);\nexport default function TimeGraph(_ref) {\n  var values = _ref.values,\n      maxTime = _ref.maxTime,\n      firstHour = _ref.firstHour,\n      lastHour = _ref.lastHour,\n      width = _ref.width,\n      height = _ref.height;\n\n  var _useTooltip = useTooltip(),\n      tooltipOpen = _useTooltip.tooltipOpen,\n      tooltipLeft = _useTooltip.tooltipLeft,\n      tooltipTop = _useTooltip.tooltipTop,\n      tooltipData = _useTooltip.tooltipData,\n      hideTooltip = _useTooltip.hideTooltip,\n      showTooltip = _useTooltip.showTooltip;\n\n  var _useTooltipInPortal = useTooltipInPortal(),\n      containerRef = _useTooltipInPortal.containerRef,\n      TooltipInPortal = _useTooltipInPortal.TooltipInPortal; // bounds\n\n\n  var xMax = width - RIGHT_MARGIN - LEFT_MARGIN;\n  var yMax = height - TOP_MARGIN - BOTTOM_MARGIN; // scales, memoize for performance\n\n  var xScale = useMemo(function () {\n    return scaleBand({\n      range: [0, xMax],\n      round: true,\n      domain: range(Math.max(0, firstHour), Math.min(lastHour + 1, 24) + 1),\n      padding: BAR_PADDING\n    });\n  }, [xMax, firstHour, lastHour]); // number of minutes between each grid row line\n\n  var gridRowInterval = maxTime >= 60 ? 60 : 30;\n  var maxTickVal = Math.max(maxTime, gridRowInterval);\n  var yScale = useMemo(function () {\n    return scaleLinear({\n      range: [yMax, 0],\n      round: true,\n      domain: [0, maxTickVal + 5]\n    });\n  }, [yMax, maxTickVal]);\n  var barWidth = xScale.bandwidth(); // the tick values for the y axis\n\n  var yAxisTickValues = range(gridRowInterval, maxTickVal + 1, gridRowInterval);\n  return width < 10 ? null :\n  /*#__PURE__*/\n  // relative position is needed for correct tooltip positioning\n  _jsxs(GraphContainer, {\n    children: [/*#__PURE__*/_jsxs(\"svg\", {\n      ref: containerRef,\n      width: width,\n      height: height,\n      children: [/*#__PURE__*/_jsx(\"rect\", {\n        x: 0,\n        y: 0,\n        width: width,\n        height: height,\n        fill: \"rgba(0,0,0,0)\",\n        rx: 14\n      }), /*#__PURE__*/_jsx(GridRows, {\n        top: TOP_MARGIN,\n        left: LEFT_MARGIN,\n        width: width - RIGHT_MARGIN - LEFT_MARGIN,\n        scale: yScale,\n        tickValues: yAxisTickValues,\n        stroke: \"#cccccc\"\n      }), /*#__PURE__*/_jsx(Group, {\n        left: LEFT_MARGIN,\n        top: TOP_MARGIN,\n        children: values.map(function (value, i) {\n          var barHeight = yMax - yScale(value);\n          var barX = xScale(i) + barWidth * (1 + BAR_PADDING) / 2;\n          var barY = yMax - barHeight;\n\n          var interactWithBar = function interactWithBar() {\n            if (tooltipTimeout) clearTimeout(tooltipTimeout);\n            var top = yMax - barHeight - TOP_MARGIN; // - VERTICAL_MARGIN - barHeight;\n\n            var left = barX + barWidth;\n            showTooltip({\n              tooltipData: value,\n              tooltipTop: top,\n              tooltipLeft: left\n            });\n          };\n\n          return /*#__PURE__*/_jsx(BarRounded, {\n            className: \"popularTimes__bar\",\n            x: barX,\n            y: barY,\n            width: barWidth,\n            height: barHeight,\n            radius: 10,\n            top: true,\n            fill: \"#40a9ff\",\n            onMouseLeave: function onMouseLeave() {\n              tooltipTimeout = window.setTimeout(function () {\n                hideTooltip();\n              }, 300);\n            },\n            onMouseOver: interactWithBar,\n            onMouseDown: interactWithBar\n          }, \"bar-\".concat(formatDateHour(i)));\n        })\n      }), /*#__PURE__*/_jsx(Group, {\n        left: LEFT_MARGIN,\n        children: /*#__PURE__*/_jsx(AxisBottom, {\n          top: yMax + TOP_MARGIN,\n          scale: xScale,\n          tickFormat: function tickFormat(hour) {\n            return (hour - firstHour) % 3 == 0 ? formatDateHour(hour) : \"\";\n          },\n          tickLabelProps: function tickLabelProps() {\n            return {\n              fill: \"\",\n              fontSize: 11,\n              textAnchor: \"middle\"\n            };\n          }\n        })\n      }), /*#__PURE__*/_jsx(Group, {\n        top: TOP_MARGIN,\n        left: LEFT_MARGIN,\n        children: /*#__PURE__*/_jsx(AxisLeft, {\n          scale: yScale,\n          hideTicks: true,\n          tickValues: yAxisTickValues,\n          tickFormat: function tickFormat(hour) {\n            return formatWaitTime(hour);\n          },\n          tickLabelProps: function tickLabelProps() {\n            return {\n              fill: \"\",\n              fontSize: 11,\n              textAnchor: \"end\"\n            };\n          }\n        })\n      })]\n    }), tooltipOpen && tooltipData && /*#__PURE__*/_jsx(TooltipInPortal, {\n      // update tooltip bounds each render\n      top: tooltipTop,\n      left: tooltipLeft,\n      style: tooltipStyles,\n      children: formatWaitTime(tooltipData)\n    }, Math.random())]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}