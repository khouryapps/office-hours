{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport ReconnectingEventSource from \"reconnecting-eventsource\";\nvar EVENTSOURCES = {};\n/**\n * Listen to eventsource at given url calling the given onmessage when messages are received.\n * onmessage is overwritten if listenerKey is the same.\n * Returns whether the event source is connected\n * @param url URL to subscribe event source to\n * @param listenerKey key of the listener. eg: \"queue\" or \"question\"\n * @param onmessage callback when messages are received\n */\n\nexport var useEventSource = function useEventSource(url, listenerKey, onmessage) {\n  var _useState = useState(false),\n      isLive = _useState[0],\n      setIsLive = _useState[1];\n\n  useEffect(function () {\n    if (url) {\n      var source;\n\n      if (url in EVENTSOURCES) {\n        source = EVENTSOURCES[url];\n      } else {\n        source = {\n          eventSource: new ReconnectingEventSource(url),\n          listeners: {},\n          isLiveSetters: new Set()\n        };\n        EVENTSOURCES[url] = source;\n\n        source.eventSource.onmessage = function logEvents(event) {\n          var values = Object.values(source.listeners);\n          var eventData = JSON.parse(event.data);\n          values.forEach(function (lac) {\n            return lac.listener(eventData);\n          });\n        };\n\n        source.eventSource.onopen = function () {\n          return source.isLiveSetters.forEach(function (set) {\n            return set(true);\n          });\n        };\n\n        source.eventSource.onerror = function () {\n          return source.isLiveSetters.forEach(function (set) {\n            return set(false);\n          });\n        };\n      }\n\n      setIsLive(source.eventSource.readyState === EventSource.OPEN);\n      source.isLiveSetters.add(setIsLive);\n      var listener = source.listeners[listenerKey];\n\n      if (source.listeners[listenerKey]) {\n        listener.count++;\n      } else {\n        listener = {\n          listener: onmessage,\n          count: 1\n        };\n        source.listeners[listenerKey] = listener;\n      }\n\n      return function () {\n        // Close event source if no one is listening\n        listener.count--;\n        source.isLiveSetters[\"delete\"](setIsLive);\n\n        if (listener.count === 0) {\n          delete source.listeners[listenerKey];\n\n          if (Object.values(source.listeners).length === 0) {\n            source.eventSource.close();\n            delete EVENTSOURCES[url];\n          }\n        }\n      };\n    }\n  }, [url, onmessage, listenerKey]);\n  return isLive;\n};","map":null,"metadata":{},"sourceType":"module"}