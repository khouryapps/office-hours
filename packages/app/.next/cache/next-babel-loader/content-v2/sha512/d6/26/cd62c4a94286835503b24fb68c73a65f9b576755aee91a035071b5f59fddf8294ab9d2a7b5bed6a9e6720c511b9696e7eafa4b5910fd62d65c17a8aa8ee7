{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ClockCircleOutlined, CloudSyncOutlined, FrownOutlined, NotificationOutlined, StopOutlined } from \"@ant-design/icons\";\nimport { Button, Tooltip } from \"antd\";\nimport Linkify from \"react-linkify\";\nimport moment from \"moment\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useQueue } from \"../../hooks/useQueue\";\nimport { formatQueueTime } from \"../../utils/TimeUtil\";\nimport { RenderEvery } from \"../RenderEvery\";\nimport { TAStatuses } from \"./TAStatuses\";\nexport const Container = styled.div.withConfig({\n  displayName: \"QueueListSharedComponents__Container\",\n  componentId: \"sc-1abq9vy-0\"\n})([\"display:flex;flex-direction:row;align-items:center;\"]);\nconst QueueTitle = styled.div.withConfig({\n  displayName: \"QueueListSharedComponents__QueueTitle\",\n  componentId: \"sc-1abq9vy-1\"\n})([\"font-weight:500;font-size:24px;color:#212934;\"]);\nexport const NotesText = styled.div.withConfig({\n  displayName: \"QueueListSharedComponents__NotesText\",\n  componentId: \"sc-1abq9vy-2\"\n})([\"font-size:16px;color:#5f6b79;\"]); // New queue styled components start here\n\nconst InfoColumnContainer = styled.div.withConfig({\n  displayName: \"QueueListSharedComponents__InfoColumnContainer\",\n  componentId: \"sc-1abq9vy-3\"\n})([\"flex-shrink:0;padding-bottom:30px;@media (min-width:650px){margin-top:32px;width:290px;}\"]);\nconst QueueInfoColumnButtonStyle = styled(Button).withConfig({\n  displayName: \"QueueListSharedComponents__QueueInfoColumnButtonStyle\",\n  componentId: \"sc-1abq9vy-4\"\n})([\"font-weight:500;font-size:14px;border:1px solid #cfd6de;border-radius:6px;margin-bottom:12px;\"]);\nexport const QueueInfoColumnButton = props => /*#__PURE__*/_jsx(QueueInfoColumnButtonStyle, _objectSpread({\n  size: \"large\",\n  block: true\n}, props));\nconst QueuePropertyRow = styled.div.withConfig({\n  displayName: \"QueueListSharedComponents__QueuePropertyRow\",\n  componentId: \"sc-1abq9vy-5\"\n})([\"display:flex;flex-direction:row;align-items:center;margin-bottom:20px;color:#5f6b79;font-size:20px;\"]);\nconst QueuePropertyText = styled.div.withConfig({\n  displayName: \"QueueListSharedComponents__QueuePropertyText\",\n  componentId: \"sc-1abq9vy-6\"\n})([\"margin-left:12px;font-size:16px;min-width:0;overflow-wrap:break-word;white-space:pre-wrap;\"]);\nconst StaffH2 = styled.h2.withConfig({\n  displayName: \"QueueListSharedComponents__StaffH2\",\n  componentId: \"sc-1abq9vy-7\"\n})([\"margin-top:32px;\"]);\nconst QueueRoomGroup = styled.div.withConfig({\n  displayName: \"QueueListSharedComponents__QueueRoomGroup\",\n  componentId: \"sc-1abq9vy-8\"\n})([\"display:flex;flex-direction:row;align-items:center;margin-bottom:24px;\"]);\nexport function QueueInfoColumn({\n  queueId,\n  buttons\n}) {\n  const {\n    queue\n  } = useQueue(queueId);\n  return /*#__PURE__*/_jsxs(InfoColumnContainer, {\n    children: [/*#__PURE__*/_jsxs(QueueRoomGroup, {\n      children: [/*#__PURE__*/_jsx(QueueTitle, {\n        children: queue === null || queue === void 0 ? void 0 : queue.room\n      }), !queue.allowQuestions && /*#__PURE__*/_jsx(Tooltip, {\n        title: \"This queue is no longer accepting questions\",\n        children: /*#__PURE__*/_jsx(StopOutlined, {\n          \"data-cy\": \"stopQuestions\",\n          style: {\n            color: \"red\",\n            fontSize: \"24px\",\n            marginLeft: \"8px\"\n          }\n        })\n      })]\n    }), queue.startTime && queue.endTime && /*#__PURE__*/_jsxs(QueuePropertyRow, {\n      children: [/*#__PURE__*/_jsx(ClockCircleOutlined, {}), /*#__PURE__*/_jsx(QueuePropertyText, {\n        className: \"hide-in-percy\",\n        children: formatQueueTime(queue)\n      })]\n    }), (queue === null || queue === void 0 ? void 0 : queue.notes) && /*#__PURE__*/_jsxs(QueuePropertyRow, {\n      children: [/*#__PURE__*/_jsx(NotificationOutlined, {}), /*#__PURE__*/_jsx(Linkify, {\n        componentDecorator: (decoratedHref, decoratedText, key) => /*#__PURE__*/_jsx(\"a\", {\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          href: decoratedHref,\n          children: decoratedText\n        }, key),\n        children: /*#__PURE__*/_jsx(QueuePropertyText, {\n          children: queue.notes\n        })\n      })]\n    }), /*#__PURE__*/_jsx(QueueUpToDateInfo, {\n      queueId: queueId\n    }), buttons, /*#__PURE__*/_jsx(StaffH2, {\n      children: \"Staff\"\n    }), /*#__PURE__*/_jsx(TAStatuses, {\n      queueId: queueId\n    })]\n  });\n}\n\nfunction QueueUpToDateInfo({\n  queueId\n}) {\n  const {\n    0: lastUpdated,\n    1: setLastUpdated\n  } = useState(null);\n  const {\n    isLive\n  } = useQueue(queueId, setLastUpdated);\n  return /*#__PURE__*/_jsxs(QueuePropertyRow, {\n    className: \"hide-in-percy\",\n    children: [isLive || lastUpdated ? /*#__PURE__*/_jsx(CloudSyncOutlined, {}) : /*#__PURE__*/_jsx(FrownOutlined, {}), /*#__PURE__*/_jsx(QueuePropertyText, {\n      className: \"hide-in-percy\",\n      children: isLive ? \"Queue up to date\" : lastUpdated ? /*#__PURE__*/_jsx(RenderEvery, {\n        render: () => {\n          const secondsAgo = (Date.now() - lastUpdated.getTime()) / 1000;\n          return `Queue updated ${secondsAgo < 60 ? Math.ceil(secondsAgo) + \"s\" : moment(lastUpdated).fromNow(true)} ago`;\n        },\n        interval: 1000\n      }) : \"Queue may be out of date\"\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}