{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState, useEffect, useRef } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\"; // must go before plugins\n\nimport timeGridPlugin, { DayTimeColsView } from \"@fullcalendar/timegrid\";\nimport listPlugin from \"@fullcalendar/list\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport iCalendarPlugin from \"@fullcalendar/icalendar\";\nimport { Button, Spin, Tooltip } from \"antd\";\nimport { useRoleInCourse } from \"../../hooks/useRoleInCourse\";\nimport { Role } from \"@koh/common\";\nimport styled from \"styled-components\";\nimport \"./fullcalendar.css\";\nconst CalendarWrapper = styled.div.withConfig({\n  displayName: \"SchedulePanel__CalendarWrapper\",\n  componentId: \"sc-1bcbtu4-0\"\n})([\"margin-bottom:20px;\"]);\nconst UpdateButton = styled(Button).withConfig({\n  displayName: \"SchedulePanel__UpdateButton\",\n  componentId: \"sc-1bcbtu4-1\"\n})([\"border-radius:6px;color:white;font-weight:500;font-size:14px;\"]);\nconst SpinnerContainer = styled.div.withConfig({\n  displayName: \"SchedulePanel__SpinnerContainer\",\n  componentId: \"sc-1bcbtu4-2\"\n})([\"position:absolute;top:0;left:0;height:100%;width:100%;background:#f8f9fb99;z-index:100;display:flex;justify-content:center;align-items:center;\"]);\nexport default function SchedulePanel({\n  courseId,\n  defaultView = \"timeGridWeek\"\n}) {\n  // iCalendarPlugin uses XMLHttpRequest, which is not available when Next.js is trying to\n  // server-side render the page. Using state to only render the <FullCalendar> component after\n  // <SchedulePanel> mounts fixes it.\n  const {\n    0: isClientSide,\n    1: setIsClientSide\n  } = useState(false);\n  const role = useRoleInCourse(courseId);\n  const calendarRef = useRef(null);\n  const spinnerRef = useRef(null);\n  useEffect(() => {\n    // it is now safe to render the client-side only component\n    setIsClientSide(true);\n  }, []); // allows us to render tooltips around events (in case of cluttered calendars)\n\n  const renderEventContent = arg => {\n    const data = calendarRef.current.getApi().getCurrentData();\n    const viewSpec = data.viewSpecs[arg.view.type].component;\n\n    if (viewSpec === DayTimeColsView) {\n      return /*#__PURE__*/_jsx(Tooltip, {\n        title: `${arg.timeText}: ${arg.event.title}`,\n        children: /*#__PURE__*/_jsxs(\"span\", {\n          children: [/*#__PURE__*/_jsx(\"strong\", {\n            children: arg.timeText\n          }), \" \", arg.event.title]\n        })\n      });\n    }\n  };\n\n  const fetchCalUrl = refresh => `/api/v1/resources/calendar/${courseId}/refresh=${refresh}`;\n\n  const refetchEvents = () => {\n    const calApi = calendarRef.current.getApi();\n    calApi.getEventSources().forEach(src => src.remove());\n    calApi.addEventSource({\n      url: fetchCalUrl(true),\n      format: \"ics\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(SpinnerContainer, {\n      ref: spinnerRef,\n      children: /*#__PURE__*/_jsx(Spin, {})\n    }), isClientSide && !isNaN(courseId) && /*#__PURE__*/_jsx(CalendarWrapper, {\n      children: /*#__PURE__*/_jsx(FullCalendar, {\n        ref: calendarRef,\n        plugins: [timeGridPlugin, iCalendarPlugin, dayGridPlugin, listPlugin],\n        events: {\n          url: fetchCalUrl(false),\n          format: \"ics\"\n        },\n        scrollTime: \"08:00:00\" // auto set each day's view to begin at 8AM\n        ,\n        initialView: defaultView,\n        headerToolbar: {\n          start: \"title\",\n          center: \"dayGridMonth timeGridWeek timeGridDay listWeek\",\n          end: \"today prev,next\"\n        },\n        loading: loading => {\n          // FullCal is stupid so if you setState in this cb you get into an infinite render loop\n          // https://stackoverflow.com/questions/66818770/fullcalendar-react-loading-function-problem\n          // So we're just floating a spinner on top of the calendar and setting its display property\n          if (spinnerRef.current) spinnerRef.current.style.display = loading ? \"flex\" : \"none\";\n        },\n        height: \"70vh\",\n        eventContent: renderEventContent\n      })\n    }), role === Role.PROFESSOR && /*#__PURE__*/_jsx(UpdateButton, {\n      type: \"primary\",\n      onClick: refetchEvents,\n      children: \"Update Calendar\"\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}