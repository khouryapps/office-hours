{"ast":null,"code":"import { CreateAlertResponse, CreateQuestionResponse, DesktopNotifPartial, GetCourseOverridesResponse, GetCourseResponse, GetProfileResponse, GetQuestionResponse, GetQueueResponse, ListQuestionsResponse, TACheckinTimesResponse, UpdateCourseOverrideResponse, UpdateQuestionResponse } from \"@koh/common\";\nimport Axios from \"axios\";\nimport { plainToClass } from \"class-transformer\";\n\nclass APIClient {\n  /**\n   * Send HTTP and return data, optionally serialized with class-transformer (helpful for Date serialization)\n   * @param method HTTP method\n   * @param url URL to send req to\n   * @param responseClass Class with class-transformer decorators to serialize response to\n   * @param body body to send with req\n   */\n  async req(method, url, responseClass, body, params) {\n    const res = (await this.axios.request({\n      method,\n      url,\n      data: body,\n      params\n    })).data;\n    return responseClass ? plainToClass(responseClass, res) : res;\n  }\n\n  constructor(baseURL = \"\") {\n    this.axios = void 0;\n    this.profile = {\n      index: async () => this.req(\"GET\", `/api/v1/profile`, GetProfileResponse),\n      patch: async (body) => this.req(\"PATCH\", `/api/v1/profile`, undefined, body),\n      deleteProfilePicture: async () => this.req(\"DELETE\", `/api/v1/profile/delete_profile_picture`)\n    };\n    this.course = {\n      get: async (courseId) => this.req(\"GET\", `/api/v1/courses/${courseId}`, GetCourseResponse),\n      updateCalendar: async (courseId) => this.req(\"POST\", `/api/v1/courses/${courseId}/update_calendar`),\n      getCourseOverrides: async (courseId) => this.req(\"GET\", `/api/v1/courses/${courseId}/course_override`, GetCourseOverridesResponse),\n      addOverride: async (courseId, params) => this.req(\"POST\", `/api/v1/courses/${courseId}/update_override`, UpdateCourseOverrideResponse, params),\n      deleteOverride: async (courseId, params) => this.req(\"DELETE\", `/api/v1/courses/${courseId}/update_override`, undefined, params),\n      withdrawCourse: async (courseId) => this.req(\"DELETE\", `/api/v1/courses/${courseId}/withdraw_course`, undefined),\n      registerCourses: async (params) => this.req(\"POST\", `/api/v1/courses/register_courses`, undefined, params),\n      getTACheckinTimes: async (courseId, startDate, endDate) => this.req(\"GET\", `/api/v1/courses/${courseId}/ta_check_in_times`, TACheckinTimesResponse, {}, {\n        startDate,\n        endDate\n      }),\n      toggleSelfEnroll: async (courseId) => this.req(\"POST\", `/api/v1/courses/${courseId}/self_enroll`),\n      selfEnrollCourses: async () => this.req(\"GET\", \"/api/v1/self_enroll_courses\"),\n      createSelfEnrollOverride: async (courseId) => this.req(\"POST\", `/api/v1/create_self_enroll_override/${courseId}`)\n    };\n    this.taStatus = {\n      checkIn: async (courseId, room) => this.req(\"POST\", `/api/v1/courses/${courseId}/ta_location/${room}`),\n      checkOut: async (courseId, room) => this.req(\"DELETE\", `/api/v1/courses/${courseId}/ta_location/${room}`)\n    };\n    this.questions = {\n      index: async (queueId) => this.req(\"GET\", `/api/v1/queues/${queueId}/questions`, ListQuestionsResponse),\n      create: async (params) => this.req(\"POST\", `/api/v1/questions`, CreateQuestionResponse, params),\n      get: async (questionId) => this.req(\"GET\", `/api/v1/questions/${questionId}`, GetQuestionResponse),\n      update: async (questionId, params) => this.req(\"PATCH\", `/api/v1/questions/${questionId}`, UpdateQuestionResponse, params),\n      notify: async (questionId) => this.req(\"POST\", `/api/v1/questions/${questionId}/notify`),\n      group: async (params) => this.req(\"POST\", \"/api/v1/questions/group\", undefined, params),\n      resolveGroup: async (groupId, queueId) => this.req(\"PATCH\", `/api/v1/questions/resolveGroup/${groupId}`, undefined, {\n        queueId\n      })\n    };\n    this.queues = {\n      get: async (queueId) => this.req(\"GET\", `/api/v1/queues/${queueId}`, GetQueueResponse),\n      update: async (queueId, params) => this.req(\"PATCH\", `/api/v1/queues/${queueId}`, UpdateQuestionResponse, params),\n      clean: async (queueId) => this.req(\"POST\", `/api/v1/queues/${queueId}/clean`)\n    };\n    this.notif = {\n      desktop: {\n        credentials: async () => this.req(\"GET\", \"/api/v1/notifications/desktop/credentials\"),\n        register: async (payload) => this.req(\"POST\", `/api/v1/notifications/desktop/device`, DesktopNotifPartial, payload),\n        unregister: async (deviceId) => this.req(\"DELETE\", `/api/v1/notifications/desktop/device/${deviceId}`, undefined)\n      }\n    };\n    this.seeds = {\n      delete: async () => this.req(\"GET\", `/api/v1/seeds/delete`),\n      create: async () => this.req(\"GET\", `/api/v1/seeds/create`),\n      fillQueue: async () => this.req(\"GET\", `/api/v1/seeds/fill_queue`)\n    };\n    this.semesters = {\n      get: async () => this.req(\"GET\", `/api/v1/semesters`)\n    };\n    this.releaseNotes = {\n      get: async () => this.req(\"GET\", `/api/v1/release_notes`)\n    };\n    this.insights = {\n      get: async (courseId, insightName, params) => {\n        return this.req(\"GET\", `/api/v1/insights/${courseId}/${insightName}`, undefined, undefined, params);\n      },\n      list: async () => this.req(\"GET\", `/api/v1/insights/list`),\n      toggleOn: async (insightName) => this.req(\"PATCH\", `/api/v1/insights`, undefined, {\n        insightName\n      }),\n      toggleOff: async (insightName) => this.req(\"DELETE\", `/api/v1/insights`, undefined, {\n        insightName\n      })\n    };\n    this.alerts = {\n      get: async (courseId) => this.req(\"GET\", `/api/v1/alerts/${courseId}`),\n      create: async (params) => this.req(\"POST\", `/api/v1/alerts`, CreateAlertResponse, params),\n      close: async (alertId) => this.req(\"PATCH\", `/api/v1/alerts/${alertId}`)\n    };\n    this.axios = Axios.create({\n      baseURL: baseURL\n    });\n  }\n\n}\n\nexport const API = new APIClient(process.env.NEXT_PUBLIC_API_URL);","map":null,"metadata":{},"sourceType":"module"}