{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { API } from \"@koh/api-client\";\nimport { ERROR_MESSAGES, OpenQuestionStatus } from \"@koh/common\";\nimport { notification } from \"antd\";\nimport { QuestionStatusKeys, Role } from \"@koh/common\";\nimport { Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useCourse } from \"../../../hooks/useCourse\";\nimport { useProfile } from \"../../../hooks/useProfile\";\nimport { useQuestions } from \"../../../hooks/useQuestions\";\nimport { useQueue } from \"../../../hooks/useQueue\";\nimport { useRoleInCourse } from \"../../../hooks/useRoleInCourse\";\nimport { useTAInQueueInfo } from \"../../../hooks/useTAInQueueInfo\";\nimport TACheckinButton from \"../../Today/TACheckinButton\";\nimport { QueueInfoColumn, QueueInfoColumnButton } from \"../QueueListSharedComponents\";\nimport { EditQueueModal } from \"./EditQueueModal\";\nimport TAQueueListDetail from \"./TAQueueListDetail\";\n/**\n * Method to help student and\n * pop open notification if another TA helped at same time (race condition)\n */\n\nasync function onHelpQuestion(questionId) {\n  try {\n    await API.questions.update(questionId, {\n      status: OpenQuestionStatus.Helping\n    });\n  } catch (e) {\n    var _e$response, _e$response2, _e$response2$data;\n\n    if (((_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.status) === 401 && ((_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.message) === ERROR_MESSAGES.questionController.updateQuestion.otherTAHelping) {\n      notification.open({\n        message: \"Another TA is currently helping the student\",\n        description: \"This happens when another TA clicks help at the exact same time\",\n        type: \"error\",\n        duration: 3,\n        className: \"hide-in-percy\",\n        style: {\n          width: 450\n        }\n      });\n    }\n  }\n}\n\nconst Container = styled.div.withConfig({\n  displayName: \"TAQueue__Container\",\n  componentId: \"sc-173p98z-0\"\n})([\"flex:1;display:flex;flex-direction:column;@media (min-width:650px){flex-direction:row;}\"]);\nconst HelpNextButton = styled(QueueInfoColumnButton).withConfig({\n  displayName: \"TAQueue__HelpNextButton\",\n  componentId: \"sc-173p98z-1\"\n})([\"color:white;background:#2a9187;&:hover,&:focus{color:white;background:#39aca1;}\"]);\nconst EditQueueButton = styled(QueueInfoColumnButton).withConfig({\n  displayName: \"TAQueue__EditQueueButton\",\n  componentId: \"sc-173p98z-2\"\n})([\"color:#212934;\"]);\nconst MiddleSpacer = styled.div.withConfig({\n  displayName: \"TAQueue__MiddleSpacer\",\n  componentId: \"sc-173p98z-3\"\n})([\"margin-left:20px;\"]);\nexport default function TAQueue({\n  qid,\n  courseId\n}) {\n  var _questions$queue;\n\n  const user = useProfile();\n  const role = useRoleInCourse(courseId);\n  const {\n    queue\n  } = useQueue(qid);\n  const {\n    questions,\n    mutateQuestions\n  } = useQuestions(qid);\n  const {\n    isCheckedIn,\n    isHelping\n  } = useTAInQueueInfo(qid);\n  const {\n    0: queueSettingsModal,\n    1: setQueueSettingsModal\n  } = useState(false);\n  const {\n    course\n  } = useCourse(courseId);\n  const staffCheckedIntoAnotherQueue = course === null || course === void 0 ? void 0 : course.queues.some(q => q.id !== qid && q.staffList.some(staffMember => staffMember.id === (user === null || user === void 0 ? void 0 : user.id)));\n  const nextQuestion = (questions === null || questions === void 0 ? void 0 : questions.priorityQueue[0]) || ( // gets the first item of priority queue if it exists\n  questions === null || questions === void 0 ? void 0 : (_questions$queue = questions.queue) === null || _questions$queue === void 0 ? void 0 : _questions$queue.find(question => question.status === QuestionStatusKeys.Queued));\n\n  const helpNext = async () => {\n    await onHelpQuestion(nextQuestion.id);\n    mutateQuestions();\n    const defaultMessage = user.includeDefaultMessage ? user.defaultMessage : \"\";\n    window.open(`https://teams.microsoft.com/l/chat/0/0?users=${nextQuestion.creator.email}&message=${defaultMessage}`);\n  }; // TODO: figure out tooltips\n\n\n  if (queue) {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(Container, {\n        children: [/*#__PURE__*/_jsx(QueueInfoColumn, {\n          queueId: qid,\n          buttons: /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(EditQueueButton, {\n              \"data-cy\": \"editQueue\",\n              onClick: () => setQueueSettingsModal(true),\n              children: \"Edit Queue Details\"\n            }), /*#__PURE__*/_jsx(Tooltip, {\n              title: !isCheckedIn && \"You must check in to help students!\",\n              children: /*#__PURE__*/_jsx(HelpNextButton, {\n                onClick: helpNext,\n                disabled: !isCheckedIn || !nextQuestion || isHelping,\n                \"data-cy\": \"help-next\",\n                children: \"Help Next\"\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              style: {\n                marginBottom: \"12px\"\n              },\n              children: /*#__PURE__*/_jsx(TACheckinButton, {\n                courseId: courseId,\n                room: queue === null || queue === void 0 ? void 0 : queue.room,\n                disabled: staffCheckedIntoAnotherQueue || isHelping || queue.isProfessorQueue && role !== Role.PROFESSOR,\n                state: isCheckedIn ? \"CheckedIn\" : \"CheckedOut\",\n                block: true\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(MiddleSpacer, {}), user && questions && /*#__PURE__*/_jsx(TAQueueListDetail, {\n          queueId: qid,\n          courseId: courseId\n        })]\n      }), /*#__PURE__*/_jsx(EditQueueModal, {\n        queueId: qid,\n        visible: queueSettingsModal,\n        onClose: () => setQueueSettingsModal(false)\n      })]\n    });\n  } else {\n    return /*#__PURE__*/_jsx(\"div\", {});\n  }\n}","map":null,"metadata":{},"sourceType":"module"}