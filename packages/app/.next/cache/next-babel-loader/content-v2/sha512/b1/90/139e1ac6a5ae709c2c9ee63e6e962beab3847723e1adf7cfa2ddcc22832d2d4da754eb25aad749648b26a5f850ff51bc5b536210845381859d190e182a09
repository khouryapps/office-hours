{"ast":null,"code":"import _toConsumableArray from \"/var/www/source/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _slicedToArray from \"/var/www/source/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { ClockCircleOutlined, DownOutlined, HourglassOutlined, LeftOutlined, RightOutlined } from \"@ant-design/icons\";\nimport { ParentSize } from \"@visx/responsive\";\nimport { Dropdown, Menu } from \"antd\";\nimport { chunk, uniq, mean, sortBy } from \"lodash\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { formatWaitTime } from \"../../../utils/TimeUtil\";\nimport { formatDateHour } from \"./FormatDateHour\";\nimport TimeGraph from \"./TimeGraph\";\nvar TitleRow = styled.div.withConfig({\n  displayName: \"PopularTimes__TitleRow\",\n  componentId: \"sc-1jf1o8u-0\"\n})([\"display:flex;align-items:baseline;\"]);\nvar WeekdayDropdown = styled.h2.withConfig({\n  displayName: \"PopularTimes__WeekdayDropdown\",\n  componentId: \"sc-1jf1o8u-1\"\n})([\"display:flex;align-items:center;margin-left:8px;color:#1890ff;cursor:pointer;\"]);\nvar GraphWithArrow = styled.div.withConfig({\n  displayName: \"PopularTimes__GraphWithArrow\",\n  componentId: \"sc-1jf1o8u-2\"\n})([\"display:flex;align-items:center;margin-bottom:20px;\"]);\nvar GraphContainer = styled.div.withConfig({\n  displayName: \"PopularTimes__GraphContainer\",\n  componentId: \"sc-1jf1o8u-3\"\n})([\"flex-grow:1;min-width:0;\"]);\nvar GraphArrowButtons = styled.div.withConfig({\n  displayName: \"PopularTimes__GraphArrowButtons\",\n  componentId: \"sc-1jf1o8u-4\"\n})([\"padding:20px 5px;font-size:1.5em;cursor:pointer;\"]);\nvar GraphNotes = styled.h4.withConfig({\n  displayName: \"PopularTimes__GraphNotes\",\n  componentId: \"sc-1jf1o8u-5\"\n})([\"font-size:14px;color:#111;padding-left:40px;\"]);\nvar DAYS_OF_WEEK = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\nfunction findWeekMinAndMax(days) {\n  var minHourInWeek = 24;\n  var maxHourInWeek = 0;\n  days.forEach(function (v, hour) {\n    if (v >= 0) {\n      if (hour % 24 > maxHourInWeek) {\n        maxHourInWeek = hour % 24;\n      }\n\n      if (hour % 24 < minHourInWeek) {\n        minHourInWeek = hour % 24;\n      }\n    }\n  });\n\n  if (maxHourInWeek < minHourInWeek) {\n    return [0, 23];\n  }\n\n  return [minHourInWeek, maxHourInWeek];\n}\n\nvar BUSY = {\n  shortest: \"the shortest\",\n  shorter: \"shorter than usual\",\n  avg: \"average\",\n  longer: \"longer than usual\",\n  longest: \"the longest\"\n}; // Mapping for text describing level of business, given the length of the unique wait times that week (to account for days without hours)\n\nvar BUSY_TEXTS = {\n  1: [BUSY.avg],\n  2: [BUSY.shortest, BUSY.longest],\n  3: [BUSY.shortest, BUSY.avg, BUSY.longest],\n  4: [BUSY.shortest, BUSY.shorter, BUSY.longer, BUSY.longest],\n  5: [BUSY.shortest, BUSY.shorter, BUSY.avg, BUSY.longer, BUSY.longest],\n  6: [BUSY.shortest, BUSY.shorter, BUSY.shorter, BUSY.longer, BUSY.longer, BUSY.longest],\n  7: [BUSY.shortest, BUSY.shorter, BUSY.shorter, BUSY.avg, BUSY.longer, BUSY.longer, BUSY.longest]\n};\n\nfunction generateBusyText(day, dailySumWaitTimes) {\n  var dayWaitTime = dailySumWaitTimes[day];\n  var uniqSumWaitTimes = uniq(sortBy(dailySumWaitTimes.filter(function (v) {\n    return v >= 0;\n  })));\n  var rank = uniqSumWaitTimes.indexOf(dayWaitTime);\n  return BUSY_TEXTS[uniqSumWaitTimes.length][rank];\n}\n\nexport default function PopularTimes(_ref) {\n  var heatmap = _ref.heatmap;\n\n  var _useState = useState(new Date().getDay()),\n      currentDayOfWeek = _useState[0],\n      setCurrentDayOfWeek = _useState[1];\n\n  var _findWeekMinAndMax = findWeekMinAndMax(heatmap),\n      _findWeekMinAndMax2 = _slicedToArray(_findWeekMinAndMax, 2),\n      firstHour = _findWeekMinAndMax2[0],\n      lastHour = _findWeekMinAndMax2[1];\n\n  var dailyAvgWaitTimes = chunk(heatmap, 24).map(function (hours) {\n    var filteredOfficeHours = hours.filter(function (v) {\n      return v !== -1;\n    });\n    return filteredOfficeHours.length > 0 ? mean(filteredOfficeHours) : -1;\n  });\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"hide-in-percy\",\n    children: [/*#__PURE__*/_jsxs(TitleRow, {\n      children: [/*#__PURE__*/_jsx(\"h2\", {\n        children: \"Wait Times on\"\n      }), /*#__PURE__*/_jsx(Dropdown, {\n        trigger: [\"click\"],\n        overlay: /*#__PURE__*/_jsx(Menu, {\n          children: DAYS_OF_WEEK.map(function (dayName, i) {\n            return /*#__PURE__*/_jsx(Menu.Item, {\n              children: /*#__PURE__*/_jsx(\"a\", {\n                onClick: function onClick() {\n                  return setCurrentDayOfWeek(i);\n                },\n                children: dayName\n              })\n            }, dayName);\n          })\n        }),\n        children: /*#__PURE__*/_jsxs(WeekdayDropdown, {\n          children: [DAYS_OF_WEEK[currentDayOfWeek], /*#__PURE__*/_jsx(DownOutlined, {})]\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(GraphWithArrow, {\n      children: [/*#__PURE__*/_jsx(GraphArrowButtons, {\n        onClick: function onClick() {\n          return setCurrentDayOfWeek((7 + currentDayOfWeek - 1) % 7);\n        },\n        children: /*#__PURE__*/_jsx(LeftOutlined, {})\n      }), /*#__PURE__*/_jsx(GraphContainer, {\n        children: /*#__PURE__*/_jsx(ParentSize, {\n          children: function children(_ref2) {\n            var width = _ref2.width;\n            return /*#__PURE__*/_jsx(TimeGraph, {\n              values: heatmap.slice(currentDayOfWeek * 24, (currentDayOfWeek + 1) * 24 - 1).map(function (i) {\n                return i < 0 ? 0 : Math.floor(i);\n              }),\n              maxTime: Math.max.apply(Math, _toConsumableArray(heatmap)),\n              firstHour: firstHour,\n              lastHour: lastHour,\n              width: width,\n              height: 220\n            });\n          }\n        })\n      }), /*#__PURE__*/_jsx(GraphArrowButtons, {\n        onClick: function onClick() {\n          return setCurrentDayOfWeek((currentDayOfWeek + 1) % 7);\n        },\n        children: /*#__PURE__*/_jsx(RightOutlined, {})\n      })]\n    }), dailyAvgWaitTimes[currentDayOfWeek] >= 0 && /*#__PURE__*/_jsxs(GraphNotes, {\n      children: [/*#__PURE__*/_jsx(ClockCircleOutlined, {}), \" \", DAYS_OF_WEEK[currentDayOfWeek], \"s have\", \" \", /*#__PURE__*/_jsx(\"strong\", {\n        children: generateBusyText(currentDayOfWeek, dailyAvgWaitTimes)\n      }), \" \", \"wait times.\"]\n    }), new Date().getDay() === currentDayOfWeek && heatmap[currentDayOfWeek * 24 + new Date().getHours()] >= 0 && /*#__PURE__*/_jsxs(GraphNotes, {\n      children: [/*#__PURE__*/_jsx(HourglassOutlined, {}), \" At \", formatDateHour(new Date().getHours()), \", people generally wait\", \" \", /*#__PURE__*/_jsx(\"strong\", {\n        children: formatWaitTime(heatmap[currentDayOfWeek * 24 + new Date().getHours()])\n      }), \".\"]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}