{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/var/www/source/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/var/www/source/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/var/www/source/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/var/www/source/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Modal from \"antd/lib/modal/Modal\";\nimport { Switch, Input, Form } from \"antd\";\nimport styled from \"styled-components\";\nimport { API } from \"@koh/api-client\";\nimport { useQueue } from \"../../../hooks/useQueue\";\nimport { pick } from \"lodash\";\nvar NotesInput = styled(Input.TextArea).withConfig({\n  displayName: \"EditQueueModal__NotesInput\",\n  componentId: \"sc-c8x0cn-0\"\n})([\"border-radius:6px;border:1px solid #b8c4ce;\"]);\nexport function EditQueueModal(_ref) {\n  var queueId = _ref.queueId,\n      visible = _ref.visible,\n      onClose = _ref.onClose;\n\n  var _useQueue = useQueue(queueId),\n      queue = _useQueue.queue,\n      mutateQueue = _useQueue.mutateQueue;\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  var editQueue = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(updateQueue) {\n      var newQueue;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              newQueue = _objectSpread(_objectSpread({}, queue), updateQueue);\n              mutateQueue(newQueue, false);\n              _context.next = 4;\n              return API.queues.update(newQueue.id, pick(newQueue, [\"notes\", \"allowQuestions\"]));\n\n            case 4:\n              mutateQueue();\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function editQueue(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsx(Modal, {\n    title: \"Edit Queue Details\",\n    visible: visible,\n    onCancel: onClose,\n    onOk: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var value;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return form.validateFields();\n\n            case 2:\n              value = _context2.sent;\n              _context2.next = 5;\n              return editQueue(value);\n\n            case 5:\n              onClose();\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })),\n    children: queue && /*#__PURE__*/_jsxs(Form, {\n      form: form,\n      initialValues: queue,\n      children: [/*#__PURE__*/_jsx(Form.Item, {\n        label: \"Queue Notes\",\n        name: \"notes\",\n        children: /*#__PURE__*/_jsx(NotesInput, {\n          allowClear: true,\n          placeholder: \"\"\n        })\n      }), /*#__PURE__*/_jsx(Form.Item, {\n        label: \"Allow New Questions\",\n        name: \"allowQuestions\",\n        valuePropName: \"checked\",\n        children: /*#__PURE__*/_jsx(Switch, {\n          \"data-cy\": \"allow-questions-toggle\"\n        })\n      })]\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}