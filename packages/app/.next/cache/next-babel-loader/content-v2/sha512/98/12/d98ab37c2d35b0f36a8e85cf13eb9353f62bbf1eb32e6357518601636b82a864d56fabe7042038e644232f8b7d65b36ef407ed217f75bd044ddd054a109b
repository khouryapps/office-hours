{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { ArrowLeftOutlined, QuestionCircleOutlined } from \"@ant-design/icons\";\nimport { useWindowWidth } from \"@react-hook/window-size\";\nimport { Button, Skeleton, Tooltip } from \"antd\";\nimport Link from \"next/link\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useProfile } from \"../../../hooks/useProfile\";\nimport { useQuestions } from \"../../../hooks/useQuestions\";\nimport { SettingsOptions } from \"../../Settings/SettingsPage\";\nimport EmptyGroupList from \"./QuestionGrouping/EmptyGroupList\";\nimport TAGroupDetail from \"./QuestionGrouping/TAGroupDetail\";\nimport TAQueueDetail from \"./TAQueueDetail\";\nimport TAQueueListSection from \"./TAQueueListSection\";\nimport { useHotkeys } from \"react-hotkeys-hook\"; // The min screen width at which the list and detail become side-by-side\n\nconst SPLIT_DETAIL_BKPT = 900;\nconst Container = styled.div.withConfig({\n  displayName: \"TAQueueListDetail__Container\",\n  componentId: \"sc-1mkewun-0\"\n})([\"flex:1;background:white;border:1px solid #cfd6de;margin-bottom:30px;@media (min-width:\", \"px){border:none;border-left:1px solid #cfd6de;margin-bottom:0px;display:flex;flex-direction:row;min-height:calc( 100vh - 46px - 67px );// - (height of footer) - (height of navbar)}\"], SPLIT_DETAIL_BKPT);\nconst List = styled.div.withConfig({\n  displayName: \"TAQueueListDetail__List\",\n  componentId: \"sc-1mkewun-1\"\n})([\"@media (min-width:\", \"px){width:320px;overflow-y:scroll;}\"], SPLIT_DETAIL_BKPT);\nconst PriorityQueueQuestionBubble = styled(QuestionCircleOutlined).withConfig({\n  displayName: \"TAQueueListDetail__PriorityQueueQuestionBubble\",\n  componentId: \"sc-1mkewun-2\"\n})([\"margin-right:8px;\"]);\nconst Detail = styled.div.withConfig({\n  displayName: \"TAQueueListDetail__Detail\",\n  componentId: \"sc-1mkewun-3\"\n})([\"border-left:1px solid #cfd6de;border-right:1px solid #cfd6de;flex:1;@media (min-width:\", \"px){overflow-y:scroll;}\"], SPLIT_DETAIL_BKPT);\nconst BackToQueue = styled.div.withConfig({\n  displayName: \"TAQueueListDetail__BackToQueue\",\n  componentId: \"sc-1mkewun-4\"\n})([\"height:40px;display:flex;align-items:center;padding-left:12px;color:#1890ff;cursor:pointer;\"]);\n/**\n * List and detail panel of the TA queue\n */\n\nexport default function TAQueueListDetail({\n  queueId,\n  courseId\n}) {\n  var _questions$questionsG, _questions$unresolved;\n\n  const user = useProfile();\n  const {\n    0: selectedQuestionId,\n    1: setSelectedQuestionId\n  } = useState(null);\n  const {\n    questions\n  } = useQuestions(queueId);\n  const {\n    0: isGrouping,\n    1: setIsGrouping\n  } = useState(false);\n  const isSideBySide = useWindowWidth() >= SPLIT_DETAIL_BKPT;\n\n  const onSelectQuestion = qId => {\n    setSelectedQuestionId(qId);\n    setIsGrouping(false);\n  };\n\n  const helpingQuestions = questions === null || questions === void 0 ? void 0 : (_questions$questionsG = questions.questionsGettingHelp) === null || _questions$questionsG === void 0 ? void 0 : _questions$questionsG.filter(q => q.taHelped.id === user.id);\n  const myGroup = questions === null || questions === void 0 ? void 0 : questions.groups.find(group => group.creator.id === user.id);\n  const groupedQuestions = myGroup ? myGroup.questions : [];\n  const allQuestionsList = questions ? [...helpingQuestions, ...questions.queue, ...questions.priorityQueue, ...questions.groups.flatMap(e => e.questions)] : [];\n  const selectedQuestion = allQuestionsList.find(q => q.id === selectedQuestionId);\n\n  const navigateQuestions = isUp => {\n    const priorityAndWaitingQuestionIds = [...questions.priorityQueue, ...questions.queue].map(question => question.id);\n    const numOfQuestions = priorityAndWaitingQuestionIds.length;\n\n    if (numOfQuestions > 0) {\n      setSelectedQuestionId(prevId => {\n        const addMinus = isUp ? -1 : 1;\n        const qIdIndex = priorityAndWaitingQuestionIds.indexOf(prevId);\n        const modulusMagic = ((qIdIndex + addMinus) % numOfQuestions + numOfQuestions) % numOfQuestions;\n        return priorityAndWaitingQuestionIds[prevId ? modulusMagic : 0];\n      });\n    }\n  };\n\n  useHotkeys(\"up\", () => navigateQuestions(true), [questions]);\n  useHotkeys(\"down\", () => navigateQuestions(false), [questions]);\n  const hasUnresolvedRephraseAlert = questions === null || questions === void 0 ? void 0 : (_questions$unresolved = questions.unresolvedAlerts) === null || _questions$unresolved === void 0 ? void 0 : _questions$unresolved.map(payload => payload.questionId).includes(selectedQuestionId); // set currentQuestion to null if it no longer exists in the queue\n\n  if (selectedQuestionId && !selectedQuestion) {\n    onSelectQuestion(null);\n  } // set current question to first helping question if none is selected (used when help next is clicked)\n\n\n  if (!selectedQuestionId && helpingQuestions.length) {\n    onSelectQuestion(helpingQuestions[0].id);\n  }\n\n  if (!questions) {\n    return /*#__PURE__*/_jsx(Skeleton, {});\n  }\n\n  if (allQuestionsList.length === 0) {\n    return /*#__PURE__*/_jsxs(EmptyQueueInfo, {\n      children: [/*#__PURE__*/_jsx(NoQuestionsText, {\n        children: \"There are no questions in the queue\"\n      }), !user.phoneNotifsEnabled && !user.desktopNotifsEnabled && /*#__PURE__*/_jsx(NotifReminderButton, {\n        courseId: courseId\n      })]\n    });\n  }\n\n  const list = /*#__PURE__*/_jsxs(List, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      \"data-cy\": \"list-helping\",\n      children: /*#__PURE__*/_jsx(TAQueueListSection, {\n        title: \"Currently Helping\",\n        questions: helpingQuestions,\n        onClickQuestion: onSelectQuestion,\n        selectedQuestionId: selectedQuestionId\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      \"data-cy\": \"list-group\",\n      children: /*#__PURE__*/_jsx(TAQueueListSection, {\n        title: \"Group Students\",\n        questions: groupedQuestions,\n        onClickQuestion: () => {\n          setIsGrouping(true);\n          setSelectedQuestionId(null);\n        },\n        collapsible: true,\n        emptyDisplay: /*#__PURE__*/_jsx(EmptyGroupList, {\n          onClick: () => {\n            setIsGrouping(true);\n            setSelectedQuestionId(null);\n          }\n        })\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      \"data-cy\": \"list-priority\",\n      children: /*#__PURE__*/_jsx(TAQueueListSection, {\n        title: /*#__PURE__*/_jsxs(\"span\", {\n          children: [/*#__PURE__*/_jsx(Tooltip, {\n            title: \"Students in the priority queue were at the top of the queue before for some reason (e.g. they were at the top but AFK, or a TA helped them previously, and then hit 'requeue student.' You should communicate with your fellow staff members to prioritize these students first.\",\n            children: /*#__PURE__*/_jsx(PriorityQueueQuestionBubble, {})\n          }), \"Priority Queue\"]\n        }),\n        questions: questions.priorityQueue,\n        onClickQuestion: onSelectQuestion,\n        selectedQuestionId: selectedQuestionId,\n        collapsible: true\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      \"data-cy\": \"list-queue\",\n      children: /*#__PURE__*/_jsx(TAQueueListSection, {\n        title: \"Waiting In Line\",\n        questions: questions.queue,\n        onClickQuestion: onSelectQuestion,\n        selectedQuestionId: selectedQuestionId,\n        collapsible: true,\n        showNumbers: true\n      })\n    })]\n  });\n\n  const detail = /*#__PURE__*/_jsxs(Detail, {\n    children: [selectedQuestion && /*#__PURE__*/_jsx(TAQueueDetail, {\n      courseId: courseId,\n      queueId: queueId,\n      question: selectedQuestion,\n      hasUnresolvedRephraseAlert: hasUnresolvedRephraseAlert\n    }), isGrouping && /*#__PURE__*/_jsx(TAGroupDetail, {\n      courseId: courseId,\n      queueId: queueId,\n      groupCreator: user\n    })]\n  });\n\n  if (isSideBySide) {\n    return /*#__PURE__*/_jsxs(Container, {\n      children: [list, detail]\n    });\n  } else if (selectedQuestionId) {\n    return /*#__PURE__*/_jsxs(Container, {\n      children: [/*#__PURE__*/_jsx(BackToQueue, {\n        onClick: () => onSelectQuestion(null),\n        children: /*#__PURE__*/_jsxs(\"span\", {\n          children: [/*#__PURE__*/_jsx(ArrowLeftOutlined, {}), \" Back To Queue\"]\n        })\n      }), detail]\n    });\n  } else {\n    return /*#__PURE__*/_jsx(Container, {\n      children: list\n    });\n  }\n}\nconst EmptyQueueInfo = styled.div.withConfig({\n  displayName: \"TAQueueListDetail__EmptyQueueInfo\",\n  componentId: \"sc-1mkewun-5\"\n})([\"flex:1;display:flex;flex-direction:column;align-items:center;margin-top:30px;\"]);\nconst NoQuestionsText = styled.div.withConfig({\n  displayName: \"TAQueueListDetail__NoQuestionsText\",\n  componentId: \"sc-1mkewun-6\"\n})([\"font-weight:500;font-size:24px;color:#212934;\"]);\nconst NotifRemindButton = styled(Button).withConfig({\n  displayName: \"TAQueueListDetail__NotifRemindButton\",\n  componentId: \"sc-1mkewun-7\"\n})([\"margin-top:16px;border-radius:6px;background:#fff;\"]);\n\nfunction NotifReminderButton({\n  courseId\n}) {\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(Link, {\n      href: {\n        pathname: \"/settings\",\n        query: {\n          cid: courseId,\n          defaultPage: SettingsOptions.NOTIFICATIONS\n        }\n      },\n      children: /*#__PURE__*/_jsx(NotifRemindButton, {\n        children: \"Sign Up for Notifications\"\n      })\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}