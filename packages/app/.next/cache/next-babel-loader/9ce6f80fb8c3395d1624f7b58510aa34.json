{"ast":null,"code":"import { useProfile } from \"./useProfile\";\nimport { useQuestions } from \"./useQuestions\";\nimport { useQueue } from \"./useQueue\";\n/**\n * Get information about the currently logged-in TA, in the context of the given queue\n * TODO: The server could probably return this data more directly, instead of us having to run find and some on arrays\n */\n\nexport function useTAInQueueInfo(queueId) {\n  var _questions$questionsG, _questions$groups;\n\n  var user = useProfile();\n\n  var _useQueue = useQueue(queueId),\n      queue = _useQueue.queue;\n\n  var _useQuestions = useQuestions(queueId),\n      questions = _useQuestions.questions;\n\n  var helpingQuestions = questions === null || questions === void 0 ? void 0 : (_questions$questionsG = questions.questionsGettingHelp) === null || _questions$questionsG === void 0 ? void 0 : _questions$questionsG.filter(function (question) {\n    var _question$taHelped;\n\n    return ((_question$taHelped = question.taHelped) === null || _question$taHelped === void 0 ? void 0 : _question$taHelped.id) === (user === null || user === void 0 ? void 0 : user.id);\n  });\n  var helpingGroup = questions === null || questions === void 0 ? void 0 : (_questions$groups = questions.groups) === null || _questions$groups === void 0 ? void 0 : _questions$groups.find(function (g) {\n    return g.creator.id === user.id;\n  });\n  var isHelping = (helpingQuestions === null || helpingQuestions === void 0 ? void 0 : helpingQuestions.length) > 0 || !!helpingGroup;\n  var isCheckedIn = queue === null || queue === void 0 ? void 0 : queue.staffList.some(function (e) {\n    return e.id === (user === null || user === void 0 ? void 0 : user.id);\n  });\n  return {\n    helpingQuestions: helpingQuestions,\n    helpingGroup: helpingGroup,\n    isHelping: isHelping,\n    isCheckedIn: isCheckedIn\n  };\n}","map":{"version":3,"sources":["/var/www/source/packages/app/hooks/useTAInQueueInfo.ts"],"names":["useProfile","useQuestions","useQueue","useTAInQueueInfo","queueId","user","queue","questions","helpingQuestions","questionsGettingHelp","filter","question","taHelped","id","helpingGroup","groups","find","g","creator","isHelping","length","isCheckedIn","staffList","some","e"],"mappings":"AACA,SAASA,UAAT,QAA2B,cAA3B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,QAAT,QAAyB,YAAzB;AAEA;;;;;AAUA,OAAO,SAASC,gBAAT,CAA0BC,OAA1B,EAA0D;AAAA;;AAC/D,MAAMC,IAAI,GAAGL,UAAU,EAAvB;;AAD+D,kBAG7CE,QAAQ,CAACE,OAAD,CAHqC;AAAA,MAGvDE,KAHuD,aAGvDA,KAHuD;;AAAA,sBAKzCL,YAAY,CAACG,OAAD,CAL6B;AAAA,MAKvDG,SALuD,iBAKvDA,SALuD;;AAM/D,MAAMC,gBAAgB,GAAGD,SAAH,aAAGA,SAAH,gDAAGA,SAAS,CAAEE,oBAAd,0DAAG,sBAAiCC,MAAjC,CACvB,UAACC,QAAD;AAAA;;AAAA,WAAc,uBAAAA,QAAQ,CAACC,QAAT,0EAAmBC,EAAnB,OAA0BR,IAA1B,aAA0BA,IAA1B,uBAA0BA,IAAI,CAAEQ,EAAhC,CAAd;AAAA,GADuB,CAAzB;AAGA,MAAMC,YAAY,GAAGP,SAAH,aAAGA,SAAH,4CAAGA,SAAS,CAAEQ,MAAd,sDAAG,kBAAmBC,IAAnB,CAAwB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,OAAF,CAAUL,EAAV,KAAiBR,IAAI,CAACQ,EAA7B;AAAA,GAAxB,CAArB;AACA,MAAMM,SAAS,GAAG,CAAAX,gBAAgB,SAAhB,IAAAA,gBAAgB,WAAhB,YAAAA,gBAAgB,CAAEY,MAAlB,IAA2B,CAA3B,IAAgC,CAAC,CAACN,YAApD;AAEA,MAAMO,WAAW,GAAGf,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEgB,SAAP,CAAiBC,IAAjB,CAAsB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACX,EAAF,MAASR,IAAT,aAASA,IAAT,uBAASA,IAAI,CAAEQ,EAAf,CAAP;AAAA,GAAtB,CAApB;AAEA,SAAO;AAAEL,IAAAA,gBAAgB,EAAhBA,gBAAF;AAAoBM,IAAAA,YAAY,EAAZA,YAApB;AAAkCK,IAAAA,SAAS,EAATA,SAAlC;AAA6CE,IAAAA,WAAW,EAAXA;AAA7C,GAAP;AACD","sourcesContent":["import { Question, QuestionGroup } from \"@koh/common\";\nimport { useProfile } from \"./useProfile\";\nimport { useQuestions } from \"./useQuestions\";\nimport { useQueue } from \"./useQueue\";\n\n/**\n * Get information about the currently logged-in TA, in the context of the given queue\n * TODO: The server could probably return this data more directly, instead of us having to run find and some on arrays\n */\ninterface TAInQueueInfo {\n  helpingQuestions: Question[];\n  helpingGroup: QuestionGroup;\n  isHelping: boolean;\n  isCheckedIn: boolean;\n}\nexport function useTAInQueueInfo(queueId: number): TAInQueueInfo {\n  const user = useProfile();\n\n  const { queue } = useQueue(queueId);\n\n  const { questions } = useQuestions(queueId);\n  const helpingQuestions = questions?.questionsGettingHelp?.filter(\n    (question) => question.taHelped?.id === user?.id\n  );\n  const helpingGroup = questions?.groups?.find((g) => g.creator.id === user.id);\n  const isHelping = helpingQuestions?.length > 0 || !!helpingGroup;\n\n  const isCheckedIn = queue?.staffList.some((e) => e.id === user?.id);\n\n  return { helpingQuestions, helpingGroup, isHelping, isCheckedIn };\n}\n"]},"metadata":{},"sourceType":"module"}