{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport ConfirmCourses from \"./ConfirmCourses\";\nimport EditCourse from \"./EditCourse\";\nimport SelectCourses from \"./SelectCourses\";\nimport { message, Progress } from \"antd\";\nimport styled from \"styled-components\";\nimport { API } from \"@koh/api-client\";\nimport useSWR from \"swr\";\nimport Router from \"next/router\";\nvar ProgressBar = styled(Progress).withConfig({\n  displayName: \"ApplyPage__ProgressBar\",\n  componentId: \"dtpg8c-0\"\n})([\"padding-bottom:2.5em;& .ant-progress-inner{border:1px solid #d9d9d9;}\"]);\nexport function createSGString(_ref) {\n  var name = _ref.name,\n      crns = _ref.crns;\n  return \"\".concat(name, \" (CRNs: \").concat(crns.join(\", \"), \")\");\n}\nexport var Highlight = styled.span.withConfig({\n  displayName: \"ApplyPage__Highlight\",\n  componentId: \"dtpg8c-1\"\n})([\"color:#1890ff;\"]);\nexport default function ApplyPage() {\n  var _useState = useState([]),\n      postBody = _useState[0],\n      setPostBody = _useState[1];\n\n  var _useState2 = useState(-1),\n      currentCourse = _useState2[0],\n      setCurrentCourse = _useState2[1];\n\n  var _useSWR = useSWR(\"api/v1/profile\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", API.profile.index());\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }))),\n      profile = _useSWR.data,\n      mutateProfile = _useSWR.mutate;\n\n  var handleSelectCourses = function handleSelectCourses(selectedCourses) {\n    setPostBody(selectedCourses.map(function (course) {\n      return {\n        name: course.name,\n        crns: course.crns\n      };\n    }));\n    setCurrentCourse(currentCourse + 1);\n  };\n\n  var handleEditCourse = function handleEditCourse(courseInfo) {\n    var newPostBody = _toConsumableArray(postBody);\n\n    newPostBody[currentCourse] = _objectSpread(_objectSpread({}, postBody[currentCourse]), courseInfo);\n    setPostBody(newPostBody);\n    setCurrentCourse(currentCourse + 1);\n  };\n\n  var handleSubmitCourses = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _e$response, _e$response$data;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return API.course.registerCourses(postBody.map(function (courseInfo) {\n                return {\n                  name: courseInfo.displayName,\n                  sectionGroupName: courseInfo.name,\n                  iCalURL: courseInfo.iCalURL,\n                  coordinator_email: courseInfo.coordinator_email,\n                  timezone: courseInfo.timezone\n                };\n              }));\n\n            case 3:\n              message.success(\"Successfully registered courses. Redirecting you to the app...\");\n              _context2.next = 6;\n              return mutateProfile();\n\n            case 6:\n              Router.push(\"/course/[cid]/today\", \"/course/\".concat(profile.courses[0].course.id, \"/today\"));\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](0);\n              message.error((_e$response = _context2.t0.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.message);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 9]]);\n    }));\n\n    return function handleSubmitCourses() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var calculateProgress = function calculateProgress() {\n    return Math.round((currentCourse + 1) * 100 / postBody.length);\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      padding: \"3% 12%\"\n    }\n  }, __jsx(\"h1\", null, \"Apply for Khoury Office Hours\"), __jsx(ProgressBar, {\n    percent: calculateProgress(),\n    strokeColor: \"#408FEA\",\n    trailColor: \"white\",\n    strokeWidth: 12\n  }), currentCourse < 0 ? __jsx(SelectCourses, {\n    onSubmit: handleSelectCourses,\n    initialValues: postBody.map(function (c) {\n      return c.name;\n    })\n  }) : currentCourse < postBody.length ? __jsx(EditCourse, {\n    courseInfo: postBody[currentCourse],\n    onSubmitCourse: handleEditCourse,\n    onBack: function onBack() {\n      return setCurrentCourse(currentCourse - 1);\n    }\n  }) : __jsx(ConfirmCourses, {\n    courses: postBody,\n    onSubmit: handleSubmitCourses,\n    onBack: function onBack() {\n      return setCurrentCourse(currentCourse - 1);\n    }\n  }));\n}","map":{"version":3,"sources":["/var/www/source/packages/app/components/Apply/ApplyPage.tsx"],"names":["React","useState","ConfirmCourses","EditCourse","SelectCourses","message","Progress","styled","API","useSWR","Router","ProgressBar","createSGString","name","crns","join","Highlight","span","ApplyPage","postBody","setPostBody","currentCourse","setCurrentCourse","profile","index","data","mutateProfile","mutate","handleSelectCourses","selectedCourses","map","course","handleEditCourse","courseInfo","newPostBody","handleSubmitCourses","registerCourses","displayName","sectionGroupName","iCalURL","coordinator_email","timezone","success","push","courses","id","error","response","calculateProgress","Math","round","length","padding","c"],"mappings":"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","sourcesContent":["import { KhouryProfCourse } from \"@koh/common\";\nimport React, { ReactElement, useState } from \"react\";\nimport ConfirmCourses from \"./ConfirmCourses\";\nimport EditCourse, { EditCourseInfo } from \"./EditCourse\";\nimport SelectCourses from \"./SelectCourses\";\nimport { message, Progress } from \"antd\";\nimport styled from \"styled-components\";\nimport { API } from \"@koh/api-client\";\nimport useSWR from \"swr\";\nimport Router from \"next/router\";\n\nexport interface RegisterCourseInfo {\n  name: string;\n  crns: number[];\n  displayName?: string;\n  iCalURL?: string;\n  coordinator_email?: string;\n  timezone?: string;\n}\n\nconst ProgressBar = styled(Progress)`\n  padding-bottom: 2.5em;\n\n  & .ant-progress-inner {\n    border: 1px solid #d9d9d9;\n  }\n`;\n\nexport function createSGString({\n  name,\n  crns,\n}: {\n  name: string;\n  crns: number[];\n}): string {\n  return `${name} (CRNs: ${crns.join(\", \")})`;\n}\n\nexport const Highlight = styled.span`\n  color: #1890ff;\n`;\n\nexport default function ApplyPage(): ReactElement {\n  const [postBody, setPostBody] = useState<RegisterCourseInfo[]>([]);\n  const [currentCourse, setCurrentCourse] = useState<number>(-1);\n  const { data: profile, mutate: mutateProfile } = useSWR(\n    `api/v1/profile`,\n    async () => API.profile.index()\n  );\n\n  const handleSelectCourses = (selectedCourses: KhouryProfCourse[]) => {\n    setPostBody(\n      selectedCourses.map((course) => ({\n        name: course.name,\n        crns: course.crns,\n      }))\n    );\n    setCurrentCourse(currentCourse + 1);\n  };\n\n  const handleEditCourse = (courseInfo: EditCourseInfo) => {\n    const newPostBody = [...postBody];\n    newPostBody[currentCourse] = {\n      ...postBody[currentCourse],\n      ...courseInfo,\n    };\n    setPostBody(newPostBody);\n    setCurrentCourse(currentCourse + 1);\n  };\n\n  const handleSubmitCourses = async () => {\n    try {\n      await API.course.registerCourses(\n        postBody.map((courseInfo) => ({\n          name: courseInfo.displayName,\n          sectionGroupName: courseInfo.name,\n          iCalURL: courseInfo.iCalURL,\n          coordinator_email: courseInfo.coordinator_email,\n          timezone: courseInfo.timezone,\n        }))\n      );\n      message.success(\n        \"Successfully registered courses. Redirecting you to the app...\"\n      );\n      await mutateProfile();\n      Router.push(\n        \"/course/[cid]/today\",\n        `/course/${profile.courses[0].course.id}/today`\n      );\n    } catch (e) {\n      message.error(e.response?.data?.message);\n    }\n  };\n\n  const calculateProgress = () => {\n    return Math.round(((currentCourse + 1) * 100) / postBody.length);\n  };\n\n  return (\n    <div style={{ padding: \"3% 12%\" }}>\n      <h1>Apply for Khoury Office Hours</h1>\n      <ProgressBar\n        percent={calculateProgress()}\n        strokeColor=\"#408FEA\"\n        trailColor=\"white\"\n        strokeWidth={12}\n      />\n      {currentCourse < 0 ? (\n        <SelectCourses\n          onSubmit={handleSelectCourses}\n          initialValues={postBody.map((c) => c.name)}\n        />\n      ) : currentCourse < postBody.length ? (\n        <EditCourse\n          courseInfo={postBody[currentCourse]}\n          onSubmitCourse={handleEditCourse}\n          onBack={() => setCurrentCourse(currentCourse - 1)}\n        />\n      ) : (\n        <ConfirmCourses\n          courses={postBody}\n          onSubmit={handleSubmitCourses}\n          onBack={() => setCurrentCourse(currentCourse - 1)}\n        />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}